# HA package version 3.0.1 built Tue Aug  9 14:47:31 2016
if echo '
' | od -b | grep -q 015 ; then echo dos format script - exiting ; exit 0 ; fi ; true
# This is a shell archive.  Save it in a file, remove anything before
# this line, and then unpack it by entering "sh file".  Note, it may
# create directories; files and directories will be owned by you and
# have default permissions.
#
# This archive contains:
#
#	VERSION
#	README
#	RUNBOOK
#	Release_Notes
#	appdservice.c
#	lib
#	monitors
#	monitors/DiskMonitor
#	monitors/MysqlMonitor
#	monitors/DiskMonitor/monitor.xml
#	monitors/DiskMonitor/disk-stat.sh
#	monitors/MysqlMonitor/monitor.xml
#	monitors/MysqlMonitor/mysql-stat.sh
#	monitors/DiskMonitor/README
#	monitors/MysqlMonitor/README
#	assassin.sh
#	failover.sh
#	watchdog.sh
#	watchdog.settings.template
#	replicate.sh
#	install-init.sh
#	uninstall-init.sh
#	appdservice-pbrun.sh
#	appdservice-root.sh
#	appdservice-xuser.sh
#	appdstatus.sh
#	appdynamics-machine-agent.sh
#	appdynamics-machine-agent.sysconfig
#	mysqlclient.sh
#	getaccess.sh
#	appdcontroller.sh
#	appdcontroller-db.sh
#	appdcontroller.sysconfig
#	appdcontroller-db.sysconfig
#	numa.settings.template
#	numa-patch-controller.sh
#	save_mysql_passwd.sh
#	rsyncd.conf
#	lib/password.sh
#	lib/ha.sh
#	lib/sql.sh
#	lib/log.sh
#	lib/conf.sh
#	lib/runuser.sh
#	lib/init.sh
#
echo x - VERSION
sed 's/^X//' >VERSION << 'END-of-VERSION'
X3.0.1
END-of-VERSION
echo x - README
sed 's/^X//' >README << 'END-of-README'
XContents:
X
X	README: this file
X	RUNBOOK:  a list of state descriptions, validations, and remedial actions
X
X
X	replicate.sh:  the all-singing, all-dancing HA (re)activator
X	this installs and sets up the HA function for a controller pair.
X
X	appdcontroller.sh: a file intended to be placed into /etc/init.d to control
X	the controller, watchdog, and assassin
X
X	appdcontroller-db.sh: a file intended to be placed into /etc/init.d to control
X	the mysql database
X
X	appdynamics-machine-agent.sh: a file to start the machine agent
X
X	assassin.sh:  a script run on a failed-over primary to kill the old primary
X
X	failover.sh:  a script run on a secondary to become the new primary
X
X	install-init.sh:  an installer for the appdcontroller.sh
X
X	uninstall-init.sh:  an uninstaller for the appdcontroller.sh
X
X	watchdog.sh:  run on a secondary to watch the primary and maybe failover
X
X	watchdog.settings.template:  copy this to watchdog.settings to override defaults
X
X	appdservice-root.sh:  a null privilege escalation wrapper
X
X	appdservice-pbrun.sh:  a privilege escalation wrapper around pbrun
X
X	appdservice.c:  a privilege escalation c program
X
X	numa.settings.template: a template file containing numa static node assignments
X
X	numa-patch-controller.sh:  a script to edit numa hooks into controller.sh
X
X	appdcontroller-db.sysconfig: source files for system configuration
X	appdcontroller.sysconfig
X	appdynamics-machine-agent.sysconfig
X
X	save_mysql_passwd.sh: a script used to obfuscate and save the mysql root password
X	getaccess.sh:  a script to extract the access key from a database to set
X			up monitoring
X
X	appdstatus.sh: a script to replace 'service appdcontroller status' on 
X		systemd machines
X
XInstallation notes:
XThis software is intended to connect the appdynamics controller into linux's
Xservice machinery.  This optionally includes a watchdog process running on the
Xsecondary HA node that will initiate a failover if a failure is detected in
Xthe primary controller or database.
X
XPermissions: 
X	If the controller is to be run as a non-root user, part of the 
Xinstallation cannot be directly automated, as it involves installing of a 
Xsystem service into /etc/init.d and ancillary directories using install-init.sh
X
XPrerequisites:
X--------------
X	1) Ssh must be installed in such a way that the user the controller is to 
Xbe run as has symmetrical passwordless ssh access.  This is done by generating 
Xa key pair on each node, and placing the other's public key into the appropriate
Xauthorized_keys file.  in detail, assuming user appduser, node1 and node2
X
X	on node1:
X
X	su - appduser
X	mkdir -p .ssh
X	ssh-keygen -t rsa -N "" -f .ssh/id_rsa
X	scp .ssh/id_rsa.pub node2:/tmp
X
X	on node2:
X
X	su - appduser
X	mkdir -p .ssh
X	ssh-keygen -t rsa -N "" -f .ssh/id_rsa
X	cat /tmp/id_rsa.pub >> .ssh/authorized_keys
X	scp .ssh/id_rsa.pub node1:/tmp
X
X	on node1:
X	cat /tmp/id_rsa.pub >> ~/.ssh/authorized_keys
X
XAll of the above commands may not be needed, and some of them may prompt for a
Xpassword.
X
X	2) reliable symmetrical reverse host lookup must be configured.  the best
Xway is to place the host names into each /etc/hosts file.   reverse DNS adds 
Xan additional point of failure.  
X		a) /etc/nsswitch.conf should have files placed before dns. example:
X			hosts:      files dns
X		b) /etc/hosts:
X			192.168.144.128 host1
X			192.168.144.137 host2
X
X	3) each machine must have the root and data directory writable by the 
Xappropriate appdynamics user:
X
X	ls -lad /opt/AppDynamics/Controller
Xdrwxr-xr-x. 18 appduser users    4096 Jan 26 18:18 /opt/AppDynamics/Controller
X
X	4) the primary controller should be installed as a standalone controller;
Xthe secondary should not be installed at all.
X
XInstallation:
X-------------
XOn the primary, unpack the shar file using bash into a directory HA under the 
Xcontroller root install subdirectory.
X
X	cd /opt/AppDynamics/Controller
X	mkdir -p HA
X	chmod +w *
X	bash HA.shar
X	
XMysql Password:
X---------------
Xnewer controllers remove the db/.rootpw file from the controller installation for
Xsecurity reasons, plaintext passwords in data files being a known vulnerability.
Xas the HA package requires frequent database access, it is impractical to prompt
Xfor the password every time the database is used.   accordingly, we decrypt the
Xpassword at each required access from a data file.  this data file must be written
Xby the save_mysql_passwd.sh script before running any component of the HA toolkit.
X
X	cd HA
X	./save_mysql_passwd.sh
X
X	this will prompt for the mysql root password
X
XActivation:
X-----------
XThe key script to replicate the primary database to the secondary, make all the
Xappropriate state changes, and activate the HA pair is the replicate.sh script.
Xit is run on an active controller.  Attempts to run it on a passive controller 
Xwill be rejected.  it has a few specialized options, but it has reasonable
Xdefaults and is extracts a lot of configuration information from the existing
Xinstallation.  the most simple usage is to activate a HA pair immediately.
Xrun the following as the same user as appdynamics is running as.
Xsince the controller is taken down, the command will prompt for a confirmation message.
X
X	./replicate.sh -s node2 -f -w -e proxy
X
Xwhen it has completed, the HA pair will be running and replicating.
XIf running as non-root, the command asks that some commands manually be run as
Xroot to complete the installation.
X
XIncremental Activation:
X-----------------------
XRuns of the replicate script without the -f option will perform an imperfect 
Xcopy of the primary controller to the secondary without taking the primary down.
XThis can be used to minimize the downtime necessary to do the initial 
Xinstallation.  if the data volume to replicate is large, several runs without
Xthe -f option would approach a perfect copy over a period of days.  the final
Xactivation with -f during a maintenance window would only copy those data filesi
Xthat differ from the last copy.
X
XPrivilege Escalation:
X---------------------
Xthe install-init.sh script is used to install the init scripts, and to set
Xup a controlled privilege escalation.  this can take the form of sudo settings,
Xor one of 3 flavors of /sbin/appdservice. run install-init.sh for usage.
X
XService Control:
X----------------
XAfter activation, the controller service and HA facility can be controlled 
Xusing the linux service command.  these options must be executed as root.
XThe default installation will automatically shut down the controller when
Xthe system is halted, and automatically start it at boot time.
X
X	service appdcontroller start
X	service appdcontroller stop
X
Xan additional service, appdcontroller-db, is used to manage the database.
Xa sensible dependency between the two services is implemented
X
XStatus:
X-------
XOnce installed as a service, the linux service utility can be run on either
Xnode to report the current state of the replication, background processes, and
Xthe controller itself.
X
X	service appdcontroller status
X
XWatchdog:
X---------
XIf enabled, this background process running on the secondary will monitor the
Xprimary controller and database, and if it detects a failure, will initiate a
Xfailover automatically.   The failure mode timings are defined in watchdog.sh.
XThe watchdog is only enabled if the file <controller root>/HA/WATCHDOG_ENABLE
Xexists. Removing the file causes the watchdog to exit.
X
Xto enable the watchdog, as root:
X	touch <controller root>/HA/WATCHDOG_ENABLE
X	chmod 777 <controller root>/HA/WATCHDOG_ENABLE
X	service appdcontroller start
X
Xrunning the replicate.sh script with the -w option at final activation will 
Xcreate the watchdog control file automatically.
X
XAssassin:
X---------
XAfter a failover, it is possible that the old primary may come online.  If this
Xoccurs, the load balancer may send load to the old primary.  To prevent this,
Xthe new primary continually polls the old primary and if it becomes accessible,
Xkills it and inhibits it from starting again.
X
XFailover:
X---------
XA manual failover can be triggered by running failover.sh on the secondary.
XThis will kill the watchdog and activate the database.  it will also try to
Xassassinate the old primary.
XThis only happens if replication is broken. if replication is good, we just
Xdeactivate the other appserver and activation this one, while leaving the db
Xup.  this case also does not fire up the assassin.
X
XLogging:
X--------
Xthe logs directory contains several status and progress logs of the various components.
X
XRemote controller monitoring
X----------------------------
XIf desired it is possible to have the controller's internal Java app agent report to 
Xanother controller. This is most often useful if two or more controllers have been
Xdeployed on-premises. Having them both report their health to a controller monitor
Xsimlifies the monitoring of them all as common health rules and notification policies are
Xmore easily re-used.
X
XAt least four pieces of information are needed to configure remote controller 
Xmonitoring:
X	- controller monitor's hostname
X	- controller monitor's port
X	- account name within controller monitor
X	- controller monitor's access key for that account
X	- [optional] application name to report under
X
XThe controller monitor's account names and access keys can be determined with:
X	cd <controller install dir>
X	echo "select access_key,name,id from account\G"| bin/controller.sh login-db
X	this has been put into a script:
X	./getaccess.sh -p password -h monitorhost:3388
X	this will output the access key.  you can specify account name.
X	see usage.
X
XYou can send a controller's app agent output to another controller with hostname
X"cmonitor", access_key "ac-ce-ss-key", account name "customer1", application name 
X'Prod HA pair' with:
X	./replicate.sh -s <secondary> -m url=http://cmonitor:8090,access_key="ac-ce-ss-key",account_name=customer1,app_name='Prod HA pair' -f
X
XMachine Agent
X-------------
XHaving a machine agent on both primary and secondary servers is a pre-requisite step 
Xto simple monitoring and warning of critical health issues affecting the stability
Xof the HA controller pair. Getting to this state involves:
X	1. downloading and installing the machine agent on both primary and
X	   secondary servers from download.appdynamics.com. For compatibility see 
X	   docs.appdynamics.com for your version of the controller.
X	   Ensure that the machine agent install directory is the *same* for both
X	   primary and secondary servers.
X	2. Ensure that the same version of the HA Toolkit is available on both
X	   primary and secondary servers. Use scp or replicate.sh -s <other> 
X	3. As root (re)run HA Toolkit install on both primary and secondary servers
X	   including '-a <agent install dir>' parameter. For example:
X		sudo ./install-init.sh -s -a /opt/appdyn/machine-agent/4.1.5.1
X	   if the machine agent was extracted into the parent of the appdynamics
X       controller, or the controller directory itself, the -a may be ommitted.
X	4. As regular AppD user (re)run replicate.sh .. -f to shutdown controller and
X	   configure all remaining files with an extra parameter referring to machine
X	   agent install directory. For example:
X	   	replicate.sh -s <secondary> -e https://proxy -a /opt/appdyn/machine-agent/3.9.0.0 -t 0 -z -f 
X
XIf a remote controller monitor has been configured, include that '-m' option in the 
Xreplicate.sh command to ensure the machine agents report there also. For example:
X		./replicate.sh -s <secondary> -m url=http://cmonitor:8090,access_key="ac-ce-ss-key",account_name=customer1,app_name='Prod HA pair' -a /opt/appdyn/machine-agent/3.9.0.0 -f
X	 5. please note that the machine agent will be run as the same user as
X        the mysql database.
X
XNUMA
X----
Xon a numa machine, it may be useful, for performance reasons,  to statically partition the machine to run mysqld on 
Xone set of nodes and the java appserver on another set of nodes.  this can be easily done by running numa-patch-controller.sh
Xfrom the HA directory, and copying the numa.settings.template to numa.settings.  edit numa.settings as needed.
X
XBest Practices:
X---------------
XIf possible, a dedicated network connection should be provisioned between the
XHA pair.  this set of interfaces should be the ones placed into the /etc/hosts
Xfiles, and used as the argument for the -s option to the replicate.sh script.
X
XBackups are best done by stopping the appdcontroller service on the secondary
Xand performing a file-level copy of the appdynamics directories.  these can
Xbe incremental or complete, depending on the reliability of your solution.
Xwhen the backup is done, simply start the service; replication will catch up
Xand guarantee the integrity of your data.
X
XA load balancer can probe http://<controller>:<port>/rest/serverstatus
Xto determine which of the two controllers is active. the active node will
Xreturn a HTTP 200.
X
Xshould it be necessary to have a hook in the failover process, for example to update 
Xa dynamics DNS service or to notify a load balancer or proxy, the failover.sh script 
Xis the place to add code.
X
XVersion and Copyright
X---------------------
X$Id: README 1.13 2016-08-04 03:09:49 cmayer Exp $
X
X Copyright 2016 AppDynamics, Inc
X
X   Licensed under the Apache License, Version 2.0 (the "License");
X   you may not use this file except in compliance with the License.
X   You may obtain a copy of the License at
X
X       http://www.apache.org/licenses/LICENSE-2.0
X
X  Unless required by applicable law or agreed to in writing, software
X  distributed under the License is distributed on an "AS IS" BASIS,
X  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X  See the License for the specific language governing permissions and
X  limitations under the License.
END-of-README
echo x - RUNBOOK
sed 's/^X//' >RUNBOOK << 'END-of-RUNBOOK'
XThe HA environment can be in several states, and it is desireable to place 
Xthe systems into the fully replicated state as soon as possible. here are
Xthe possible states, how to identify the state, and the corresponding 
Xprocedure to repair the condition.
X
X-----------
XNOT PRESENT:
X	the HA package has not been installed on the primary machine.
X
Xdiagnosis:
X	the HA directory is absent from the controller directory.
X
Xto fix:
X	cd <controller root> ; mkdir HA ; cd HA ; bash <path>/HA.shar
X	then follow the steps for UNINSTALLED
X
X-----------
XUNINSTALLED:
X	the package is present in the controller HA directory, but the
X	services have not been installed.
X
Xdiagnosis:
X	service appdcontroller status shows appdcontroller service not found
X
Xto fix:
X	cd <controller root>/HA
X	become root
X	./install-init.sh [-c | -s]
X
X------------
XNO HOSTS:
X	the secondary machine does not have a resolvable host name
X
Xdiagnosis:
X	ping <secondary> returns unknown host
X
Xto fix:
X	add the primary and secondary host name into both machines /etc/hosts files
X	
X------------
XNO SSH:
X	the appdynamics user does not have no-password ssh access between
X	machines.
X
Xdiagnosis:
X	ssh <secondary> date prompts for a password
X
Xto fix:
X	in the below, you will be prompted for passwords and confirmations
X	ssh-keygen -P "" -f ~/.ssh/id_rsa -t rsa
X	ssh <secondary> ssh-keygen -P "''" -f ~/.ssh/id_rsa -t rsa
X	scp ~/.ssh/id_rsa.pub <secondary>:.ssh/authorized_keys
X	scp <secondary>:.ssh/id_rsa.pub ~/.ssh/authorized_keys
X
X------------
XUNREPLICATED: the HA package has been installed on the primary controller,
Xbut the package has not been activated.
X
Xdiagnosis:
X	service appdcontroller-db status shows "HA not installed" 
X
Xto fix:
X	cd <controller root>/HA
X	./replicate -s <secondary>
X	<become root on secondary>
X		cd <controller root>/HA
X		./install-init [-c | -s]
X		exit
X	<back on primary>
X	./replicate -s <secondary> -e <vip>	-f
X		confirm
X
X----------
XDISCONNECTED:
XReplication communication is being blocked, HA has been installed and activated,
Xbut a firewall is preventing access to replication communications.
X
Xdiagnosis:
X	service appdcontroller-db status shows 
X		"Slave_IO_State: Connecting to master"
X		"Seconds_Behind_Master: NULL"
X
Xto fix:
X	disable the firewall for port 3388
X	brute force as root:  iptables -F
X
X----------
XREPLICATED, WATCHDOG RUNNING: 
Xthe HA package is running fully replicated, and the primary node is serving
Xagents with metric storage, and the UI is responsive.  the secondary is
Xmonitoring the primary appserver with a watchdog process.
X
Xdiagnosis:
X	service appdcontroller status on the primary reports:
X	db running as <user> - active
X	primary
X		Slave_IO_State: Waiting for master to send event
X	controller running
X
X	service appdcontroller status on the secondary reports:
X	db running as <user> - passive
X	secondary
X		Slave_IO_State: Waiting for master to send event
X	watchdog running
X
Xto fix:
X	nothing to fix
X
X----------
XREPLICATED, WATCHDOG NOT RUNNING: 
Xthe HA package is running fully replicated, and the primary node is serving
Xagents with metric storage, and the UI is responsive.  the secondary is
Xnot monitoring the primary appserver with a watchdog process.
X
Xdiagnosis:
X	service appdcontroller status on the primary reports:
X	db running as <user> - active
X	primary
X		Slave_IO_State: Waiting for master to send event
X	controller running
X
X	service appdcontroller status on the secondary reports:
X	db running as <user> - passive
X	secondary
X		Slave_IO_State: Waiting for master to send event
X	watchdog not running
X
Xto fix:
X	on the secondary
X	cd <controller root>/HA
X	touch WATCHDOG_ENABLE
X	/sbin/appdservice appdcontroller start
X
X---------
XFAILED OVER, old primary broken
XThe current active node has become active because of a failover.  the prior
Xactive node's database is inaccessible.  the assassin is running on the new
Xactive node to mark the old active node passive once it comes up.
X
Xdiagnosis:
X	service appdcontroller status on the primary reports:
X	db running as <user> - active
X	secondary
X		Slave_IO_State:
X		Seconds_Behind_Master: NULL
X	assassin running
X
Xto fix:
X	replicate from the new active node to the old active node using
X	the formula for UNREPLICATED
X
X------------
XFAILED OVER, watchdog running
XThe current active node has become active because of a failover.  the prior
Xactive node database is still intact, and replication is valid. the new
Xsecondary node has a watchdog running.  this is identical to the REPLICATED,
XWATCHDOG_RUNNING state.
X
Xdiagnosis:
X	service appdcontroller status on the original primary reports:
X	db running as <user> - passive
X		Slave_IO_State: Waiting for master to send event
X	secondary
X	watchdog running
X
X	service appdcontroller status on the original secondary reports:
X	db running as <user> - active
X	primary
X		Slave_IO_State: Waiting for master to send event
X	controller running
X
Xto-fix:
X	no need to fix anything.  should it be desired to make the original node
X	the active node:
X
X	on the original primary,
X	cd <controller root>/HA
X	./failover.sh
X
X-------------
XPASSIVE DOWN
Xthis is a state deliberately caused to perform a consistent backup of the
Xdatabase.   it is initiated on the passive node by running:
X/sbin/appdservice appdcontroller-db stop
X
Xdiagnosis:
X	/sbin/appdservice appdcontroller-db status on the passive node reports:
X	db not running
X
Xto-fix:
X	on the passive controller,
X	/sbin/appdservice appdcontroller start
X
X-------------
XERROR: bash: get_mysql_passwd: unable to get MySQL root passwd. As appdyn user run HA/save_mysql_passwd.sh interactively and try again.
X
Xdiagnosis:
X	A stored MySQL root password, obfuscated or clear has not been found. Storing the 
X	MySQL root password to disk is a requirement for the HA Toolkit running with
X	service which in turn needs privilege escalation eg /sbin/appdservice or sudo or pbrun
X
Xto-fix:
X	> on the server as the intended AppD user (here "appdyn"):
X	HA/save_mysql_passwd.sh 
X	> this will persist the password after obfuscating it
X
XVersion and Copyright:
X----------------------
X$Id: RUNBOOK 3.0 2016-08-04 03:09:49 cmayer Exp $
X
X Copyright 2016 AppDynamics, Inc
X
X   Licensed under the Apache License, Version 2.0 (the "License");
X   you may not use this file except in compliance with the License.
X   You may obtain a copy of the License at
X
X       http://www.apache.org/licenses/LICENSE-2.0
X
X   Unless required by applicable law or agreed to in writing, software
X   distributed under the License is distributed on an "AS IS" BASIS,
X   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X   See the License for the specific language governing permissions and
X   limitations under the License.
END-of-RUNBOOK
echo x - Release_Notes
sed 's/^X//' >Release_Notes << 'END-of-Release_Notes'
X
X Copyright 2016 AppDynamics, Inc
X
X   Licensed under the Apache License, Version 2.0 (the "License");
X   you may not use this file except in compliance with the License.
X   You may obtain a copy of the License at
X
X       http://www.apache.org/licenses/LICENSE-2.0
X
X  Unless required by applicable law or agreed to in writing, software
X   distributed under the License is distributed on an "AS IS" BASIS,
X   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X   See the License for the specific language governing permissions and
X   limitations under the License.
X
X--------------------------------------------
X
XRelease notes for version 3.0
X
XIn addition to bug fixes, the package has been substantially enhanced and 
Xre-written for enhanced portability, security, performance and maintainability.
X
XThe following new functionality is present:
X
X1) replicate optionally can use of non-encrypted rsync.  in environments where 
Xa VPN or a dedicated network exists between primary and secondary controllers, 
Xreplication can be noticably faster.  this is enabled by using the -U option.
X
X2) mysql replication can use SSL encryption.  a pair of signed certificates 
Xand keys is exchanged between the 2 mysql instances.  after this negotiation,
Xall communication for mysql replication is encrypted.
X
X3) mysql replication compression is enabled by default
X
X4) the secondary no longer places replicated traffic in it's bin-logs.  this
Xgreatly decreases disk usage on the secondary
X
X5) scripts and support files are added for NUMA segregation
X
X6) the machine agent is can run as non-root, and automatically is configured
Xwith additional monitors to surface custom mysql and disk metrics. also,
Xthe machine agent is automatically detected if it is in the controller root
Xdirectory or it's parent.  we use the controller JVM, so there is no need
Xto install anything other than the Java-less zip file of the machine agent.
X
X7) configuration of an external monitoring host is simplified
X
X8) support for controller versions greater than 4.2.0, which removed the
Xplaintext password file for mysql root.  we have 2 distinct solutions to
Xthis:  recreate the db/.rootpw file, or run the save_mysql_passwd.sh script
Xwhich obfuscates the password and save that, unscrambling it whenever it is
Xneeded
X
X9) more extensive logging of the replicate process
X
X10) init script configuration is now done via sysconfig files installed in
X/etc/sysconfig (for redhat) or /etc/default (for debian).
X
X11) greater compatibility with systemd.  newer linux distributions have a
Xdifferent implementation of boot time init script handling, which does not
Xsupport the clean execution of the service status verb.  this is deprecated
Xon these systems, and a new script,  HA/appdstatus.sh, is supplied to replace 
Xthis functionality.
X
XSignificant bug fixes in this release:
X
X1) files of size less than 1M are checksummed to prevent rsync missing them
Xif changes to the file did not cause it to grow
X
X2) the database health check now recovers if one of the steps timed out.
X
X3) failover can not longer oscillate between two machines
X
X4) the secondary controller now waits until the relay logs have been executed
Xbefore starting the new appserver on failover.   although this can take quite
Xsome time, it prevents database inconsistencies.
X
X------------------------------------
XRelease notes for version 3.0.1
X
Xthis is a minor bugfix and enhancement release.
X
X1) added support for fairly ugly root mysql passwords.  whitespace characters
Xare not supported, but punctuation is ok, plus $*()...
X
X2) failover is a bit smarter about breaking replication.   all things being
Xotherwise ok, if the old primary has been up at least 1 hour, we don't break
Xreplication
X
X3) in the case of a persistent replication break, if we KNOW that the database
Xis not damaged on each end, we can run replicate -E to restore the slave to
Xoperation.
X
X4) the machine agent is started with nodename set
X
X5) install_init.sh changes ownership of the machine agent to RUNUSER
X
X6) Documentation on machine agent startup additions
END-of-Release_Notes
echo x - appdservice.c
sed 's/^X//' >appdservice.c << 'END-of-appdservice.c'
X/*
X * $Id: appdservice.c 3.0 2016-08-04 12:22:17 cmayer $
X *
X *
X * Copyright 2016 AppDynamics, Inc
X *
X *   Licensed under the Apache License, Version 2.0 (the "License");
X *   you may not use this file except in compliance with the License.
X *   You may obtain a copy of the License at
X *
X *       http://www.apache.org/licenses/LICENSE-2.0
X *
X *   Unless required by applicable law or agreed to in writing, software
X *   distributed under the License is distributed on an "AS IS" BASIS,
X *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X *   See the License for the specific language governing permissions and
X *   limitations under the License.
X *
X * this program is a trampoline for the Appdynamics user to invoke
X * a controlled escalation of privilege to cause changes in the
X * installed appdynamics services via the system's service wrapper,
X * which is root-only
X *
X * security is ensured by only changing the enumerated services
X * and the enumerated funtions.  
X *
X * this file contains all the distro specific knowledge
X * it is intentionally coded in a brute-force manner to be trivially auditable
X *
X * all the source strings for the execv array are internal to this file, and
X * all the input arguments are only read using strcmp;  buffer overflows
X * are not possible.
X *
X * also, since we use execv, no path processing is done.
X */
X#include <stdlib.h>
X#include <stdio.h>
X#include <string.h>
X#include <unistd.h>
X#include <fcntl.h>
X
X/*
X * these names are intentionally not the same pointer, even though they have
X * the same value.
X * we never copy anything from the arguments to the exec arguments.
X */
Xstruct service {
X	char *name;
X	char *service_name;
X} services[] = {
X	{ "appdcontroller",		"appdcontroller" },
X	{ "appdcontroller-db",	"appdcontroller-db" },
X	{ "appdynamics-machine-agent", 	"appdynamics-machine-agent" }
X};
X#define NSRV (sizeof(services)/sizeof(services[0]))
X
X/* number of possible handlers */
X#define	NHAND	3
X
Xstruct action {
X	char *name;
X	struct handler {
X		char *prog;
X		char *verb;
X	} handlers[NHAND];
X} actions[] = {
X	{ "status", {
X		{ "service", "status" },
X		{ 0, 0 },
X		{ 0, 0 }}
X	},
X	{ "start", {
X		{ "service", "start" },
X		{ 0, 0 },
X		{ 0, 0 }}
X	},
X	{ "stop", {
X		{ "service", "stop" },
X		{ 0, 0 },
X		{ 0, 0 }}
X	},
X	{ "enable", {
X		{ "chkconfig", "on" },
X		{ "update-rc.d", "enable" },
X		{ 0, 0 }}
X	},
X	{ "disable", {
X		{ "chkconfig", "off" },
X		{ "update-rc.d", "disable" },
X		{ 0, 0 }}
X	}
X};
X#define NACT (sizeof(actions)/sizeof(actions[0]))
X
X/*
X * the complete list of directories for lookup of commands
X */
Xchar *bindirs[] = {
X	"/sbin", "/usr/sbin", 0
X};
X
Xvoid
Xusage(char *pname)
X{
X	int i, j;
X
X	fprintf(stderr, "usage: %s <service> <action>\n", pname);
X	for (i = 0; i < NSRV; i++) {
X		fprintf(stderr, "\t%s {", services[i].name);
X		for (j = 0; j < NACT; j++) {
X			fprintf(stderr, "%s", actions[j].name);
X			if (j < NACT - 1) {
X				fprintf(stderr, ",");
X			}
X		}
X		fprintf(stderr, "}\n");
X	}
X	exit (1);
X}
X
X/*
X * return zero if the program is executable in the specified directory
X */
Xint
Xexecutable_at(char *dir, char *prog)
X{
X	int dirfd;
X	int ret;
X
X	dirfd = open(dir, O_RDONLY | O_DIRECTORY);
X	ret = faccessat(dirfd, prog, AT_EACCESS, X_OK);
X	close(dirfd);
X	return (ret);
X}
X
Xchar *argvec[4];
Xchar *progpath;
X
Xint
Xmain(int argc, char**argv)
X{
X	char cmdbuf[80];
X	int svc;
X	int act;
X	int hand;
X	char *prog;
X	char *dir;
X	
X	if (argc != 3) {
X		usage(argv[0]);
X		exit (1);
X	}
X
X	/* look up service */
X	for (svc = 0; svc < NSRV; svc++) {
X		if (strcmp(services[svc].name, argv[1]) == 0) {
X			break;
X		}
X	}
X	if (svc >= NSRV) {
X		fprintf(stderr, "unknown service %s\n", argv[1]);
X		usage(argv[0]);
X	}
X
X	/* look up action */
X	for (act = 0; act < NACT; act++) {
X		if (strcmp(actions[act].name, argv[2]) == 0) {
X			break;
X		}
X	}
X	if (act >= NACT) {
X		fprintf(stderr, "unknown action %s\n", argv[2]);
X		usage(argv[0]);
X	}
X
X	/* validate that we are either the appdynamics user or root */
X	if (getuid() != APPDUSER && getuid() != 0) {
X		fprintf(stderr, "must be run as user id %d or root\n", APPDUSER);
X		exit(2);
X	}
X
X	/* validate that we are effectively root */
X	if (geteuid() != 0) {
X		fprintf(stderr, "must be run setuid root\n");
X		exit(3);
X	}
X	
X	/* definitively become root */
X	setreuid(0, 0);
X	setregid(0, 0);
X
X	/* iterate through handlers until null */
X	for (hand = 0; prog = actions[act].handlers[hand].prog; hand++) {
X
X		/* search the bindirs */
X		for (dir = bindirs[0]; dir; dir++) {
X
X			/* if we can run it, do so */
X			if (executable_at(dir, prog)) {
X
X				progpath = malloc(strlen(dir) + strlen(prog) + 2);
X				strcpy(progpath, dir);
X				strcat(progpath, "/");
X				strcat(progpath, prog);
X				argvec[0] = strdup(prog);
X				argvec[1] = strdup(services[svc].service_name);
X				argvec[2] = strdup(actions[act].handlers[hand].verb);
X				argvec[3] = 0;
X
X				execv(progpath, argvec);	
X			}
X		}
X	}
X
X	fprintf(stderr, "no valid handlers found for service %s action %s\n",
X		services[svc].name, actions[act].name);
X	exit(4);
X}
END-of-appdservice.c
echo c - lib
mkdir -p lib > /dev/null 2>&1
echo c - monitors
mkdir -p monitors > /dev/null 2>&1
echo c - monitors/DiskMonitor
mkdir -p monitors/DiskMonitor > /dev/null 2>&1
echo c - monitors/MysqlMonitor
mkdir -p monitors/MysqlMonitor > /dev/null 2>&1
echo x - monitors/DiskMonitor/monitor.xml
sed 's/^X//' >monitors/DiskMonitor/monitor.xml << 'END-of-monitors/DiskMonitor/monitor.xml'
X<monitor>
X    <name>DiskMonitor</name>
X    <type>managed</type>
X    <enabled>true</enabled>
X    <enable-override os-type="solaris">true</enable-override>
X    <enable-override os-type="sunos">true</enable-override>
X    <description>Disk Monitor
X    </description>
X    <monitor-configuration>
X    </monitor-configuration>
X    <monitor-run-task>
X        <execution-style>continuous</execution-style>
X        <name>Run</name>
X        <type>executable</type>
X        <task-arguments>
X        </task-arguments>
X        <executable-task>
X            <type>file</type>
X            <file os-type="linux">disk-stat.sh</file>
X        </executable-task>
X    </monitor-run-task>
X</monitor>
END-of-monitors/DiskMonitor/monitor.xml
echo x - monitors/DiskMonitor/disk-stat.sh
sed 's/^X//' >monitors/DiskMonitor/disk-stat.sh << 'END-of-monitors/DiskMonitor/disk-stat.sh'
X#!/bin/bash
X#
X# Monitors Disks on Linux
X#
X# version 1.3
X#
X# using only: date, awk, sleep
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X
XMOUNTS=
X# uncomment the next line to enable custom metrics for mounted filesystems
X#MOUNTS=`mount| awk '/^\/dev/ {sub("/dev/","",$1);printf("%s:%s;",$1, $3)}'`
X# uncomment the next line to enable custom metrics for swap
X#MOUNTS+=`awk '/\/dev/ {sub("/dev/","",$1);printf("%s:swap;",$1)}'< /proc/swaps`
X
X# interval between reads of network and disk numbers
XSAMPLE=10
X
XPATH=$PATH:/bin:/usr/sbin:/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
X
Xwhile [ 1 ]; do
XNEXTSECONDS=`date +%s | awk '{print $1 + 60}'`
Xiostat -x 2 2 | awk '
X	/Device:/ { state ++; next }
X	( NF == 12 && state == 2) { 
X		agg="AVERAGE";
X		dev = $1;
X		printf("name=Hardware Resources|Disk|%s|avg req size,aggregator=%s,value=%d\n", dev, agg, $8);
X		printf("name=Hardware Resources|Disk|%s|avg queue length,aggregator=%s,value=%d\n", dev, agg, $9);
X		printf("name=Hardware Resources|Disk|%s|avg wait (us),aggregator=%s,value=%d\n", dev, agg, $10*1000);
X		printf("name=Hardware Resources|Disk|%s|avg svctime (us),aggregator=%s,value=%d\n", dev, agg, $11*1000);
X		printf("name=Hardware Resources|Disk|%s|utilization (us),aggregator=%s,value=%d\n", dev, agg, $12);
X	}
X'
X
XSLEEPTIME=`date +"$NEXTSECONDS %s" | awk '{if ($1 > $2) print $1 - $2; else print 0;}'`
Xsleep $SLEEPTIME
Xdone
END-of-monitors/DiskMonitor/disk-stat.sh
echo x - monitors/MysqlMonitor/monitor.xml
sed 's/^X//' >monitors/MysqlMonitor/monitor.xml << 'END-of-monitors/MysqlMonitor/monitor.xml'
X<monitor>
X    <name>MysqlMonitor</name>
X    <type>managed</type>
X    <enabled>true</enabled>
X    <enable-override os-type="solaris">true</enable-override>
X    <enable-override os-type="sunos">true</enable-override>
X    <description>Mysql Monitor
X    </description>
X    <monitor-configuration>
X    </monitor-configuration>
X    <monitor-run-task>
X        <execution-style>continuous</execution-style>
X        <name>Run</name>
X        <type>executable</type>
X        <task-arguments>
X        </task-arguments>
X        <executable-task>
X            <type>file</type>
X            <file os-type="linux">mysql-stat.sh</file>
X        </executable-task>
X    </monitor-run-task>
X</monitor>
END-of-monitors/MysqlMonitor/monitor.xml
echo x - monitors/MysqlMonitor/mysql-stat.sh
sed 's/^X//' >monitors/MysqlMonitor/mysql-stat.sh << 'END-of-monitors/MysqlMonitor/mysql-stat.sh'
X#!/bin/bash
X#
X# Monitors INNODB
X#
X# $Id: mysql-stat.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
XPATH=$PATH:/bin:/usr/sbin:/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
X
X[ -f /etc/sysconfig/appdcontroller ] && . /etc/sysconfig/appdcontroller
X[ -f /etc/default/appdcontroller ] && . /etc/default/appdcontroller
X
Xif [ -x $APPD_ROOT/HA/mysqlclient.sh ] ; then
X	MYSQLCLIENT="$APPD_ROOT/HA/mysqlclient.sh"
Xelse
X	MYSQLCLIENT="$APPD_ROOT/bin/controller.sh login-db"
X fi 
X
Xwhile [ 1 ]; do
XNEXTSECONDS=`date +%s | awk '{print $1 + 60}'`
X
Xecho "show engine innodb status\G" | $MYSQLCLIENT | awk '
X
X	/^BUFFER POOL AND MEMORY/ { state = 1; }
X	/^Database pages/ { if (state == 1) {
X		bufcnt = $3; 
X	}}
X	/^Modified/ { if (state == 1) {
X		dirty = $4;
X	}}
X	/^Old database pages/ { if (state == 1) {
X		oldpages = $4;
X	}}
X
X	/^INDIVIDUAL BUFFER POOL INFO/ { state = 2; }
X
X	/^TRANSACTIONS/ { state = 3; }
X	/^History list length/ { if (state == 3) histlen = $4; }
X	/^---TRANSACTION.*ACTIVE/ { if (state == 3) {
X		xcount++;
X		active = $4; if (active > hiwat) {hiwat = active}
X	}}
X
X	/^FILE I/ { state = 4; }
X	/reads.*writes.*fsyncs/ { if (state == 4) {
X		reads = $1; writes = $6; syncs = $8;
X	}}
X
X	/^LOG/ { state = 5; }
X	/Log sequence number/ { if (state == 5) { logseq = $4}}
X	/Log flushed up to/ { if (state == 5) { logflushed = $5}}
X	/Last checkpoint at/ { if (state == 5) { logcheckpoint = $4}}
X	/Max checkpoint age/ { if (state == 5) { maxcheckpointage = $4}}
X	/Checkpoint age target/ { if (state == 5) { checkpointagetarget = $4}}
X	/Modified age/ { if (state == 5) { modifiedage = $3}}
X	/Checkpoint age/ { if (state == 5) { checkpointage = $3}}
X	/pending log writes,.*pending chkp writes/ { if (state == 5) { pendinglog=$1; pendingckpt=$5 }}
X	/log.*done.*log.*second/ { if (state == 5) {
X		logio = $5;
X	}}
X
X	/^ROW OPERATIONS/ { state = 6; }
X	/inserts.*updates.*deletes.*reads/ { if (state == 6) {
X		inserts = $1; updates = $3; deletes = $5; rowreads = $7;
X	}}
X
X	END { 
X		printf("name=Custom Metrics|Mysql|Buffers Used,aggregator=OBSERVATION,value=%d\n", bufcnt);
X		printf("name=Custom Metrics|Mysql|Buffers Dirty,aggregator=OBSERVATION,value=%d\n", dirty);
X		printf("name=Custom Metrics|Mysql|Buffers Old,aggregator=OBSERVATION,value=%d\n", oldpages);
X
X		printf("name=Custom Metrics|Mysql|Transaction count,aggregator=OBSERVATION,value=%d\n", xcount);
X		printf("name=Custom Metrics|Mysql|Transaction high time,aggregator=OBSERVATION,value=%d\n", hiwat);
X
X		printf("name=Custom Metrics|Mysql|File reads,aggregator=OBSERVATION,value=%d\n", reads);
X		printf("name=Custom Metrics|Mysql|File writes,aggregator=OBSERVATION,value=%d\n", writes);
X		printf("name=Custom Metrics|Mysql|File syncs,aggregator=OBSERVATION,value=%d\n", syncs);
X
X		printf("name=Custom Metrics|Mysql|Log seq number,aggregator=OBSERVATION,value=%d\n", logseq);
X		printf("name=Custom Metrics|Mysql|Log flushed,aggregator=OBSERVATION,value=%d\n", logflushed);
X		printf("name=Custom Metrics|Mysql|Log checkpoint,aggregator=OBSERVATION,value=%d\n", logcheckpoint);
X
X		printf("name=Custom Metrics|Mysql|Log dirty,aggregator=OBSERVATION,value=%d\n", logseq - logflushed);
X		printf("name=Custom Metrics|Mysql|Log used,aggregator=OBSERVATION,value=%d\n", logseq - logcheckpoint);
X
X		printf("name=Custom Metrics|Mysql|Log max checkpoint age,aggregator=OBSERVATION,value=%d\n", maxcheckpointage);
X		printf("name=Custom Metrics|Mysql|Log checkpoint age target,aggregator=OBSERVATION,value=%d\n", checkpointagetarget);
X		printf("name=Custom Metrics|Mysql|Log modified age,aggregator=OBSERVATION,value=%d\n", modifiedage);
X		printf("name=Custom Metrics|Mysql|Log checkpoint age,aggregator=OBSERVATION,value=%d\n", checkpointage);
X		printf("name=Custom Metrics|Mysql|Log pending log writes,aggregator=OBSERVATION,value=%d\n", pendinglog);
X		printf("name=Custom Metrics|Mysql|Log pending checkpoint writes,aggregator=OBSERVATION,value=%d\n", pendingckpt);
X		printf("name=Custom Metrics|Mysql|Log io,aggregator=OBSERVATION,value=%d\n", logio);
X
X		printf("name=Custom Metrics|Mysql|Row inserts,aggregator=OBSERVATION,value=%d\n", inserts);
X		printf("name=Custom Metrics|Mysql|Row updates,aggregator=OBSERVATION,value=%d\n", updates);
X		printf("name=Custom Metrics|Mysql|Row deletes,aggregator=OBSERVATION,value=%d\n", deletes);
X		printf("name=Custom Metrics|Mysql|Row reads,aggregator=OBSERVATION,value=%d\n", rowreads);
X
X	}
X'
X
Xecho "show slave status\G" | $MYSQLCLIENT | awk '
X
X	/Seconds_Behind_Master:/ { spm = $2; }
X
X	END { 
X		printf("name=Custom Metrics|Mysql|Slave Seconds Behind Master,aggregator=OBSERVATION,value=%d\n", spm);
X	}
X'
Xecho "select value from global_configuration_local where name = 'appserver.mode'\G" | $MYSQLCLIENT | awk '
X
X	/value:/ { if ($2 == "active") active = 1; else active = 0; }
X
X	END { 
X		printf("name=Custom Metrics|Mysql|Appserver Active,aggregator=OBSERVATION,value=%d\n", active);
X	}
X'
X
XSLEEPTIME=`date +"$NEXTSECONDS %s" | awk '{if ($1 > $2) print $1 - $2; else print 0;}'`
Xsleep $SLEEPTIME
Xdone
END-of-monitors/MysqlMonitor/mysql-stat.sh
echo x - monitors/DiskMonitor/README
sed 's/^X//' >monitors/DiskMonitor/README << 'END-of-monitors/DiskMonitor/README'
Xthis is a machine agent monitor that surfaces extended disk statistics
Xuseful for diagnosing controller issues
END-of-monitors/DiskMonitor/README
echo x - monitors/MysqlMonitor/README
sed 's/^X//' >monitors/MysqlMonitor/README << 'END-of-monitors/MysqlMonitor/README'
Xmachine agent monitor useful for diagnosing database issues and surfacing
XHA-related metrics
END-of-monitors/MysqlMonitor/README
echo x - assassin.sh
sed 's/^X//' >assassin.sh << 'END-of-assassin.sh'
X#!/bin/bash
X#
X# $Id: assassin.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# run on the active node after a failover, 
X# this shoots down any secondary controller to prevent two actives 
X# from showing up at the load balancer - we won't have any data integrity
X# problems, since replication is off
X# 
X
Xcd $(dirname $0)
X
XLOGNAME=assassin.log
X
X# source function libraries
X. lib/log.sh
X. lib/runuser.sh
X. lib/conf.sh
X. lib/ha.sh
X. lib/password.sh
X. lib/sql.sh
X
Xmessage "assassin log" `date`
Xcheck_sanity
X
X#
X# we must be the active node
X#
Xmode=`get_replication_mode localhost`
Xif [ "$mode" == "passive" ] ; then
X	fatal 6 "this script must be run on the active node"
Xfi
X
X#
X# if we are the 'marked primary', the assassin is not needed any more
X#
Xtype=`get_replication_type localhost`
Xif [ "$type" == "primary" ] ; then
X	message "assassin unneeded"
X	exit 0
Xfi
X
X#
X# replication must be not be enabled.  there are several markers for this:  
X# skip-slave start is set in out db.cnf
X# the slave is not running
Xif [ -z "`dbcnf_get skip-slave-start`" ] ; then
X	fatal 5 "slave not disabled"
Xfi
Xprimary=unset
Xeval `get_slave_status`
Xif [ "$slave_io" != "No" ] ; then
X	fatal 8 "slave IO running"
Xfi
Xif [ "$primary" == "unset" ] ; then
X	fatal 9 "replication not set up - primary unset"
Xfi
X	
X#
X# ok, now we know that we are a failed-over primary, and there may be an
X# old primary that may re-appear.  if it does, shoot it, and kick it hard 
X# so it stays down.
X#
X
Xmessage "assassin committed"
X
Xecho $$ >$ASSASSIN_PID
X
Xloops=0
Xwhile true ; do
X	if [ $loops -gt 0 ] ; then
X		sleep 60;
X	fi
X	(( loops ++ ))
X
X	#
X	# brutally shoot down the appserver, as we don't want to confuse the
X	# load balancer.  this cannot wait.
X	# 
X	message "killing appserver unconditionally on $primary"
X	ssh $primary pkill -9 -f "$APPD_ROOT/.*/java -cp $APPD_ROOT/.*glassfish"
X
X	#
X	# if the local database becomes primary, we don't need to run anymore.
X	#
X	type=`get_replication_type localhost`
X	if [ "$type" == "primary" ] ; then
X		message "assassin disabled"
X		exit 0
X	fi
X
X	#
X	# if we can't get through, no point doing real work for now. loop
X	#
X	if ! ssh $primary date >/dev/null 2>&1 ; then
X		continue;
X	fi
X
X	#
X	# make sure skip-slave-start is in db.cnf
X	# this is to prevent log reads from the real primary if the db is restarted
X	#
X	dbcnf_set skip-slave-start true $primary
X	if [ -z "`dbcnf_get skip-slave-start $primary`" ] ; then
X		gripe "skip-slave-start insert failed"
X		continue;
X	fi
X
X	#
X	# as replication is broken, stop the DB - no point keeping it up
X	#
X	message "stop database on $primary"
X	remservice -tq $primary appdcontroller-db stop | logonly 2>&1
X
X	#
X	# and stay down.  this prevents inadvertently starting anything.
X	# re-run replication to allow startup.
X	#
X	message "persistently disabling appserver on $primary"
X	ssh $primary mv -f $APPD_ROOT/bin/controller.sh \
X		$APPD_ROOT/bin/controller.sh-disabled | logonly 2>&1
X	ssh $primary chmod 0 $APPD_ROOT/bin/controller.sh-disabled | logonly 2>&1
X
X	# 
X	# now mark our job done
X	#
X	sql localhost "update global_configuration_local set value='primary' \
X		where name = 'ha.controller.type';"
X	message "assassin exiting - old primary killed"
X	rm -f $ASSASSIN_PID
X	exit 0
X
Xdone
END-of-assassin.sh
echo x - failover.sh
sed 's/^X//' >failover.sh << 'END-of-failover.sh'
X#!/bin/bash
X#
X# $Id: failover.sh 3.0.1 2016-08-08 13:40:17 cmayer $
X#
X# run on the passive node, activate this HA node.
X# 
X# if run with the -f option, force hard failover
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xcd $(dirname $0)
X
XLOGNAME=failover.log
X
X# source function libraries
X. lib/log.sh
X. lib/runuser.sh
X. lib/conf.sh
X. lib/ha.sh
X. lib/password.sh
X. lib/sql.sh
X
XNOTFAILED=3600
X
XWATCHDOG=$APPD_ROOT/HA/appd_watchdog.pid
X
Xfunction slave_status {
X	bounce_slave
X
X	# wait for the slave to settle
X	connect_count=0
X
X	while [ $connect_count -lt 3 ] ; do
X		eval `get_slave_status`
X		case "$slave_io" in
X		Connecting) 
X			(( connect_count++ ))
X			sleep 10
X			continue;
X			;;
X		Yes) break
X			;;
X		No) break
X			;;
X		esac
X	done
X}
X
X#
X# parse arguments
X#
Xforce=false
Xbreak_replication=false
Xprimary_up=false
X
Xwhile getopts f flag; do
X	case $flag in
X	f)
X		force=true
X		;;
X	*)
X		echo "usage: $0 <options>"
X		echo "    [ -f ] force replication break"
X		exit
X		;;
X	esac
Xdone
X
Xmessage "failover log" `date`
X
Xcheck_sanity
X
X#
X# we must be the passive node
X#
Xmessage "Verify passive node"
Xmode=`get_replication_mode localhost`
Xif [ "$mode" == "active" ] ; then
X	fatal 6 "this script must be run on the passive node"
Xfi
X
X#
X# we must be replicating in some sense
X#
Xmessage "Verify replication state"
Xslave=`get_slave_status | wc -l`
Xif [ "$slave" = 0 ] ; then
X	gripe "replication is not running"
X	if ! $force ; then
X		exit 1
X	else
X		message "  -- Force Failover even with no slave"
X		primary_up=false
X	fi
Xfi
Xif $force ; then
X	break_replication=true
Xfi
X
X#
X# replication must be moderately healthy - it's ok if the other server is down
X#
Xslave_status
Xif [ "$slave_sql" != "Yes" ] ; then
X	message "slave SQL not running - replication error"
X	if ! $force ; then
X		exit 1
X	else
X		message "Force Failover - stopped slave"
X		primary_up=false
X	fi
Xfi
X
Xcase "$slave_io" in 
X	"Yes")
X		primary_up=true
X		;;
X	"Connecting")
X		primary_up=false
X		message "Primary DB not running"
X		;;
X	*)
X		message "Unrecognized state for slave IO: $slave_io"
X		if ! $force ; then
X			exit 1
X		else
X			message "Force Failover - unknown slave state"
X			primary_up=false
X		fi
X		;;
Xesac
X
Xif ! $primary_up ; then
X	break_replication=true
Xfi
X
X#####
X#
X# at this point, we are committed to failing over
X#
X
X#
X# kill the local watchdog if it is up
X#
Xkc=0
Xwhile [ -f $WATCHDOG ] ; do
X	if [ $(($kc % 10)) -eq 0 ] ; then
X		kill `cat $WATCHDOG` >/dev/null 2>&1
X		message "Kill Watchdog"
X	fi
X	let kc++
X	sleep 1
Xdone
X
X#
X# kill the local appserver if it's running
X#
Xmessage "Kill Local Appserver"
Xservice appdcontroller stop | log 2>&1
X
X#
X# hard failover is not quite as hard as all that.
X# in a certain case, we don't break replication if all of:
X# (1) slave sql and slave io are running
X# (2) uptime is greater than some limit
X# then leave replication running
X#
Xif [ "$slave_io" == Yes -a "$slave_sql" == Yes ] ; then
X	uptime=0
X	secondary=""
X
X	secondary=`sql localhost "show slave status" | get Master_Host`
X	if [ -n "$secondary" ] ; then
X		uptime=`sql $secondary "show status like 'Uptime'\G" | get Value`
X	fi
X	if [ "$uptime" -gt $NOTFAILED ] ; then
X		break_replication=false	
X	fi
Xfi
X
X#
X# persistently break replication
X#
Xif $break_replication ; then
X	message "Disable local slave autostart"
X
X	#
X	# disable automatic start of replication slave
X	# edit the db.cnf to remove any redundant entries for skip-slave-start
X	# this is to ensure that replication does not get turned on by a reboot
X	#
X	dbcnf_unset skip-slave-start
X	dbcnf_set skip-slave-start true
X
X	#
X	# now stop the replication slave
X	#
X	message "Stop local slave"
X	sql localhost "stop slave IO_THREAD;"
Xfi
X
X#
X# if the primary is up, mark it passive, and stop the appserver
X# also, if the old primary is not reachable, ha.controller.type will be changed by the assassin when it finally makes contact.
X#
Xif [ "$primary_up" = "true" ] ; then
X	message "Stop primary appserver"
X	remservice -tq $primary appdcontroller stop
X	message "Mark primary passive + secondary"
X	if \
X		sql $primary "update global_configuration_local set value='passive' \
X			where name = 'appserver.mode';" 10 &&
X		sql $primary "update global_configuration_local set value='secondary' \
X			where name = 'ha.controller.type';" 10 ; then
X		message "Mark local primary"
X		sql localhost "update global_configuration_local set value='primary' \
X			where name = 'ha.controller.type';"
X	else
X		message "Primary DB timeout"
X		break_replication=true
X	fi
X	if $break_replication ; then
X		primary_up=false
X		message "Stop secondary database"
X		remservice -tq $primary appdcontroller-db stop
X		dbcnf_unset skip-slave-start $primary
X		dbcnf_set skip-slave-start true $primary
X	fi
Xfi
X
X#
X# the primary is now down and maybe passive; 
X#
Xmessage "Mark local active"
Xsql localhost "update global_configuration_local set value='active' \
X	where name = 'appserver.mode';"
X
X#
X# start the replication sql thread.
X#
Xsql localhost "start slave sql_thread"
X
Xwaited=false
X#
X# wait until the all the read relay logs are executed
X#
Xwhile true ; do
X	read_file=`sql localhost "show slave status" | get Master_Log_File`
X	read_pos=`sql localhost "show slave status" | get Read_Master_Log_Pos`
X	exec_file=`sql localhost "show slave status" | get Relay_Master_Log_File`
X	exec_pos=`sql localhost "show slave status" | get Exec_Master_Log_Pos`
X	if [ "$read_file" = "$exec_file" ] ; then
X		if [ "$read_pos" = "$exec_pos" ] ; then
X			break
X		fi
X	fi
X	if $waited ; then
X		message "waiting for relay logs to drain $exec_file:$exec_pos to $read_file:$read_pos"
X	fi
X	sleep 10
X	echo -n "."
X	waited=true
Xdone
Xif $waited ; then 
X	echo ""
Xfi
X
X#
X# it is now safe to mark our node active and start the appserver
X# this will start the assassin if needed.
X#
Xmessage "Starting local Controller"
Xservice appdcontroller start
X
X#
X# if the other side was ok, then we can start the service in passive mode
X#
Xif [ "$primary_up" = "true" ] ; then
X	message "start passive secondary" | tee -a $fo_log
X	remservice -nqf $primary appdcontroller start
Xfi
X
Xmessage "Failover complete at " `date`
X
Xif $break_replication ; then
X	message "replication has been persistently broken"
X	logonly << MESSAGE
XPlease review the state of each database by examining logs/database.log
Xand if everything looks good and you are confident with the health of each
Xdatabase, re-enable replication by running 
Xreplicate.sh -s $primary -E
XIf unsure, safest way to re-enable replication is to perform full 
Xreplication using replicate.sh -f option to re-establish HA
XMESSAGE
X
Xfi
Xexit 0
END-of-failover.sh
echo x - watchdog.sh
sed 's/^X//' >watchdog.sh << 'END-of-watchdog.sh'
X#!/bin/bash
X#
X# $Id: watchdog.sh 3.0.1 2016-08-08 13:40:17 cmayer $
X#
X# watchdog.sh
X# run on the passive node, fail over if we see the primary is very sick
X# if we are not capable of failing over, fall over immediately
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xcd $(dirname $0)
X
X# source function libraries
X. lib/log.sh
X. lib/runuser.sh
X. lib/conf.sh
X. lib/ha.sh
X. lib/password.sh
X. lib/sql.sh
X
X#
X# this is needed to set the output of a pipe to the first failing process
X#
Xset -o pipefail
X
X#
X# skip SSL certificate validation when doing health checks, ( useful for 
X# self-signed certificates, and certs issued by internal, corporate CAs )
X# leave empty to require certificate validation against the host's CA cert bundle
X#
XCERT_VALIDATION_MODE="-k"
X
X# get all of the ports the controller listens on and determine the accompanying
X# protocols
Xdeclare -a APP_PORT
Xdeclare -a APP_PROTO
X
XIFS=$'\n'
X
Xi=0
Xfor n in $( echo "cat /domain/configs/config[@name='server-config']/network-config/network-listeners/network-listener[@name!='admin-listener' and @name!='controller-config-listener']" | \
X	xmllint --shell $DOMAIN_XML | grep \<network-listener ) ; do
X	APP_PORT[$i]=$(echo "$n" | sed -re 's/^.*port="([0-9]+)".*$/\1/')
X	protocol_name=$(echo "$n" | sed -re 's/^.*protocol="([^"]+)".*$/\1/')
X	
X	if echo "cat /domain/configs/config[@name='server-config']/network-config/protocols/protocol[@name='$protocol_name']/attribute::security-enabled" | xmllint --shell $DOMAIN_XML | grep -q 'security-enabled="true"' ; then
X		APP_PROTO[$i]=https
X	else
X		APP_PROTO[$i]=http
X	fi
X	((i++))
Xdone
XIFS=\ 
X
X
X#
X# these are derived, but should not need editing
X#
XWATCHDOG_ERROR=$APPD_ROOT/logs/watchdog.error
XSQL_ERROR=$WATCHDOG_ERROR
X
X#
X# hack to supppress password
X#
X
Xwd_log=$APPD_ROOT/logs/watchdog.log
Xwd_tmp=/tmp/wd_curl.out.$$
X
X# 
X# These are the default timeouts, in seconds, before the watchdog will
X# initiate a failover.  If they are set to low, they can cause unexpected
X# failover events and controller downtime.  The following defaults are very
X# conservative and should be overridden with site-specific settings in
X# $APPD_ROOT/HA/watchdog.settings
X
X# Controller app server not reachable via HTTP(S):  5 Minutes
XDOWNLIMIT=300
X
X# Controller app server shutting down: 5 Minutes
XFALLINGLIMIT=300
X
X# Controller app server starting up: 60 Minutes
XRISINGLIMIT=3600
X
X# The primary database is not responding: 5 Minutes
XDBDOWNLIMIT=300
X
X# The primary database cannot create a table: 2 Minutes
XDBOPLIMIT=300
X
X# The active controller host is not responding to ICMP echo, (ping),
X# requests: 5 Minutes
XPINGLIMIT=300
X
X#
X# the length of time to wait for a sql statememt to run
XDBWAIT=10
X
X#
X# polling frequency
X#
XLOOPTIME=10
X
X#
X# Time to wait for a ping response
X#
XPINGTIME=2
X
X#
X# Time for curl to wait for a complete response from the controller
X#
XCURL_MAXTIME=2
X
X#
X# Time to wait between consecutive requests to create a dummy table on remote
X#
XDB_CREATE_DELAY=10
X
X#
X# overrides, so we don't have to edit this file
X#
Xif [ -f $WATCHDOG_SETTINGS ] ; then
X	source $WATCHDOG_SETTINGS
Xfi
X
Xlast_db_create=0
X
X#
X# remove the watchdog pid and temporary curl output file when we exit
X#
Xfunction cleanup {
X	logmsg "watchdog exit" `date`
X	rm -f $WATCHDOG_PID $wd_tmp $DELFILES
X}
X
X#
X# we do a boatload of sanity checks, and if anything is unexpected, we
X# exit with a non-zero status and complain.
X#
Xfunction sanity {
X	check_sanity
X
X	#
X	# we must be the passive node
X	#
X	mode=`get_replication_mode localhost`
X	if [ "$mode" == "active" ] ; then
X		fatal 2 "this script must be run on the passive node"
X	fi
X
X	#
X	# the replication slave must be running
X	#
X	slave=`sql localhost "show slave status" | wc -l`
X	if [ "$slave" = 0 ] ; then
X		fatal 3 "replication is not running"
X	fi
X
X	#
X	# replication must be moderately healthy - it's ok if the primary is down
X	#
X	eval `get_slave_status`
X	if [ "$slave_sql" != "Yes" ] ; then
X		fatal 4 "slave SQL not running - replication error"
X	fi
X	case "$slave_io" in 
X		"Yes")
X			primary_up=true
X			;;
X		"Connecting")
X			primary_up=false
X			message "Primary DB not running"
X			;;
X		"No")
X			primary_up=false
X			fatal 8 "Slave IO not running"
X			;;
X		*)
X			fatal 5 "Unrecognized state for slave IO: $slave_io"
X			;;
X	esac
X}
X
X#
X# code to do a rest call for status. 
X#
Xfunction serverstatus {
X	local app_proto=$1
X	local app_port=$2
X	STATUS="$app_proto://$primary:$app_port/controller/rest/serverstatus"
X	curl -m $CURL_MAXTIME -fsS $CERT_VALIDATION_MODE $STATUS > $wd_tmp 2>&1
X	curlstat=$?
X	case "$curlstat" in
X	0)
X		echo good
X		;;
X	7)
X		echo "down"
X		logmsg "curl error 7"
X		;;
X	22)
X		eval `awk '/(22)/ {printf("http_code=%d\n", $8);}' < $wd_tmp`
X		logmsg "curl error 22: $http_code"
X		cat $wd_tmp | logonly
X		case $http_code in
X		503)
X			echo "falling"
X			;;
X		500)
X			echo "rising"
X			;;
X		404)
X			echo "rising"
X			;;
X		*)
X			echo "other"
X			;;
X		esac
X		;;
X	28)
X		echo "down"
X		logmsg "curl error 28: operation timed out"
X		;;
X	35)
X		echo "down"
X		logmsg "curl error 35"
X		;;
X	52)
X		echo "no data"
X		logmsg "curl error 52"
X		;;
X	*)
X		echo "other"
X		logmsg "curl error $curlstat"
X		;;
X	esac
X}
X
X#
X# pass the variable, and limit
X#
X# warning: gnarly shell syntax and usage
X#
Xfunction expired {
X	if [ ${!1} -eq 0 ] ; then
X		eval "$1=`date +%s`"
X	fi
X	now=`date +%s`
X	limit=$((${!1} + $2))
X	left=$(($limit - $now))
X	logmsg `date` "expired $1 ${!1} $limit $left $2"
X	echo "   timer $1 start $limit left $left limit $2" > $WATCHDOG_STATUS
X	if [ `date +%s` -gt $((${!1} + $2)) ] ; then
X		return 0
X	else
X		return 1
X	fi
X}
X
X#
X# our exceptional state loop
X# 
X# here is where we test primary health and return when something happens
X# for long enough
Xfunction poll {
X	local i=0
X
X	downtime=0
X	risingtime=0
X	fallingtime=0
X	pingfail=0
X	dbfail=0
X	dbopfail=0
X
X	rm -f $WATCHDOG_STATUS
X
X	while true ; do
X		#
X		# if somebody removed the watchdog file, stop watching
X		#
X		if [ ! -f $WATCHDOG_ENABLE ] ; then
X			logmsg "watchdog newly disabled"
X			return 0
X		fi
X		
X		#
X		# first, ping the primary.  
X		# occasionally, ICMP is disabled, so PING can be disabled
X		#
X		if [ "$PINGLIMIT" = "0" ] ; then
X			pingfail=0
X		else
X			if ping -c 1 -W $PINGTIME -q $primary >/dev/null 2>&1 ; then
X				pingfail=0
X			else
X				if expired pingfail $PINGLIMIT ; then
X					logmsg `date` pingfail expired
X					return 2
X				fi
X				# we can't even ping.  Sleep for $((LOOPTIME-PINGTIME)) then try again
X				sleep $((LOOPTIME-PINGTIME))
X				continue
X			fi
X		fi
X
X		#
X		# then, is the primary database up listening
X		#
X		if $MYSQLADMIN --host=$primary "${CONNECT[@]}" ping >/dev/null 2>&1 ; then
X			dbfail=0
X		else
X			dbopfail=0
X			downtime=0
X			risingtime=0
X			fallingtime=0
X			pingfail=0
X			if expired dbfail $DBDOWNLIMIT ; then
X				logmsg `date` dbfail expired
X				return 2
X			fi
X			sleep $LOOPTIME
X			continue
X		fi
X
X		#
X		# then, is the database capable of doing some real work for us
X		# only do this every DB_CREATE_DELAY
X		#
X		if [ $(($last_db_create+$DB_CREATE_DELAY)) -le `date +%s` ] ; then
X			last_db_create=`date +%s`
X			if \
X				sql $primary "drop table if exists watchdog_test_table;" $DBWAIT &&
X				sql $primary "create table watchdog_test_table (i int);" $DBWAIT &&
X				sql $primary "insert into watchdog_test_table values (1);" $DBWAIT &&
X				sql $primary "select count(*) from watchdog_test_table;" $DBWAIT >/dev/null 2>&1 &&
X				sql $primary "drop table watchdog_test_table;" $DBWAIT ; then
X				dbopfail=0
X			else
X				dbfail=0
X				downtime=0
X				risingtime=0
X				fallingtime=0
X				pingfail=0
X				if expired dbopfail $DBOPLIMIT ; then
X					logmsg `date` dbopfail expired
X					return 2
X				fi
X				sleep $LOOPTIME
X				continue
X			fi
X		fi
X
X		#
X		# how does the appserver respond to a serverstatus REST?
X		# if down, try every port before calling expired
X		#
X		status=`serverstatus ${APP_PROTO[$i]} ${APP_PORT[$i]}`
X		case $status in
X		down)
X			if [ $i -lt $((${#APP_PROTO[@]}-1)) ] ; then
X				((i++))
X				continue
X			else
X				i=0
X			fi
X			risingtime=0
X			fallingtime=0
X			pingfail=0
X			dbfail=0
X			dbopfail=0
X			if expired downtime $DOWNLIMIT ; then
X				logmsg `date` downtime expired
X				return 2
X			fi
X			;;
X		rising)
X			# reset the other timers
X			downtime=0
X			fallingtime=0
X			pingfail=0
X			dbfail=0
X			dbopfail=0
X
X			if expired risingtime $RISINGLIMIT ; then
X				logmsg `date` risingtime expired
X				return 2
X			fi
X			;;
X		falling)
X			downtime=0
X			risingtime=0
X			pingfail=0
X			dbfail=0
X			dbopfail=0
X			if expired fallingtime $FALLINGLIMIT ; then
X				logmsg `date` fallingtime expired
X				return 2
X			fi
X			;;
X		good)
X			return 0
X			;;
X		*)
X			logmsg `date` "unknown status $status"
X			return 1
X			;;
X		esac
X		
X		sleep $LOOPTIME
X	done
X}
X
X#
X# only run one watchdog
X#
Xif [ -f "$WATCHDOG_PID" ] ; then
X	WATCHPID=`cat $WATCHDOG_PID`
X	if [ ! -z "$WATCHPID" ] ; then
X		if kill -0 $WATCHPID 2>/dev/null ; then
X			message "watchdog already running"
X			exit 1
X		fi
X	fi
Xfi
X
X#
X# we are starting to run. register
X#
Xtrap cleanup EXIT
Xrm -f $WATCHDOG_PID
Xecho $$ > $WATCHDOG_PID
X
X#
X# force first report
X#
Xlaststatus=1
X
X#
X# our main loop.  every time the controller is noted up, we start from scratch.
X#
Xwhile true ; do
X	if [ ! -f $LOGFILE ] ; then
X		logmsg "watchdog log" `date`
X		logmsg "settings: down:$DOWNLIMIT falling:$FALLINGLIMIT \
X rising:$RISINGLIMIT dbdown:$DBDOWNLIMIT dbop:$DBOPLIMIT ping:$PINGLIMIT loop:$LOOPTIME"
X	fi
X
X	#
X	# the watchdog enable file must exist.
X	#
X	if [ ! -f $WATCHDOG_ENABLE ] ; then
X		fatal 1 "watchdog disabled"
X	fi
X
X	sanity
X
X	poll
X	pollstatus=$?
X	case $pollstatus in
X	0)
X		# don't report consecutive good to minimize noise
X		if [ $laststatus != '0' ] ; then
X			logmsg "watchdog good" `date`
X		fi
X		;;
X	2)
X		logmsg "failover invoked" `date`
X		$APPD_ROOT/HA/failover.sh -f &
X		exit 0
X		;;
X	1|*)
X		logmsg "watchdog abort poll status = $pollstatus" `date`
X		exit 1
X		;;
X	esac
X	sleep $LOOPTIME
X	laststatus=$pollstatus
Xdone
X
X#
X# script end
X#
END-of-watchdog.sh
echo x - watchdog.settings.template
sed 's/^X//' >watchdog.settings.template << 'END-of-watchdog.settings.template'
X# $Id: watchdog.settings.template 3.0 2015-12-23 00:36:28 cmayer $
X#
X# watchdog.settings
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X# These are the default timeouts, in seconds, before the watchdog will
X# initiate a failover.  If they are set to low, they can cause unexpected
X# failover events and controller downtime.  The following defaults are very
X# conservative and should be overridden with site-specific settings by
X# copying this file to $APPD_ROOT/HA/watchdog.settings and editing
X# it appropriately.
X
X# Controller app server not reachable via HTTP(S):  5 Minutes
XDOWNLIMIT=300
X
X# Controller app server shutting down: 5 Minutes
XFALLINGLIMIT=300
X
X# Controller app server starting up: 60 Minutes
XRISINGLIMIT=3600
X
X# The primary database is not responding: 5 Minutes
XDBDOWNLIMIT=300
X
X# The active controller host is not responding to ICMP echo, (ping),
X# requests: 5 Minutes
X# if ICMP is disabled, PING can be disabled by setting PINGLIMIT to 0
XPINGLIMIT=300
X
X# The primary database cannot create a table: 5 Minutes
XDBOPLIMIT=300
X
X#
X# the length of time to wait for a sql statememt to run
XDBWAIT=60
X
X
END-of-watchdog.settings.template
echo x - replicate.sh
sed 's/^X//' >replicate.sh << 'END-of-replicate.sh'
X#!/bin/bash
X#
X# $Id: replicate.sh 3.0.1 2016-08-08 13:40:17 cmayer $
X#
X# install HA to a controller pair
X#
X# this must be run on the primary, and ssh and rsync must be set up 
X# on both machines.
X#
X# if replication isn't broken before you run this, it certainly will be
X# during.
X#
X# this has very limited sanity checking, so please be very careful.
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xcd $(dirname $0)
X
XLOGNAME=replicate.log
X
X# source function libraries
X. lib/log.sh
X. lib/runuser.sh
X. lib/conf.sh
X. lib/ha.sh
X. lib/password.sh
X. lib/sql.sh
X
X#
X# place to put certs for ssl replication
X#
XCERTS=$APPD_ROOT/ssl_certs
X
X#
X# the services in this list must appear in the order in which they should be
X# stopped
X#
Xappdynamics_service_list=( appdcontroller appdcontroller-db )
X
X#
X# a place to scribble
X#
Xtmpdir=/tmp/ha.$$
X
X#
X# global variables that are to be changed by command line args
X#
Xprimary=`hostname`
Xinternal_vip=
Xexternal_vip=
Xmonitor=
Xsecondary=
Xdatadir=
Xinnodb_logdir=
Xdebug=false
Xappserver_only_sync=false
Xupgrade=false
Xfinal=false
Xunencrypted=false
Xstart_appserver=true
Xwatchdog_enable=false
Xssl_replication=false
Xma_ssl_enabled=false
Xssl_enabled=false
Xwildcard=false
Xunbreak=false
Xrsync_throttle="--bwlimit=20000"
Xrsync_compression=""
Xrsync_opts="-PavpW --del --inplace --exclude=ibdata1 --exclude=ib_logfile\*"
Xfinal_rsync_opts="-PavpW --del --inplace"
Xmachine_agent=""
Xma_conf=""
X
X#
X# make sure that we are running as the appdynamics user in db.cnf
X# if this is root, then we don't need a privilege escalation method
X#
Xif [ `id -u` -eq 0 ] ; then
X	if [ $db_user != root ] ; then
X		fatal 1 "replicate must run as $db_user"
X	fi
X	running_as_root=true
Xelse
X	running_as_root=false
Xfi
X
X# wrapping bag of portable checks for installed service
Xfunction check_installed_service {
X   	(( $# == 1 )) || abend "check_installed_service: needs 1 arg"
X	
X   	local svc_name=$1
X   	local chkconfig=$(which /sbin/chkconfig 2>/dev/null)		# returns path if exists
X   	local lservice=$service_bin
X
X   	[[ -f /etc/init.d/$svc_name ]] || return 1
X	
X   	if [[ -n "$chkconfig" ]] ; then
X		return $($chkconfig --list $svc_name >/dev/null 2>&1)
X   	fi
X
X   	return $($lservice --status-all 2>/dev/null| grep -q '\b'$svc_name'\b')
X}
X
X# wrapping bag of portable checks for installed remote service
Xfunction remote_check_installed_service {
X   	(( $# == 2 )) || abend "check_installed_service: needs 2 args"
X
X   	local host=$1
X   	local svc_name=$2
X   	local chkconfig=$(ssh -q $host "which /sbin/chkconfig" 2>/dev/null)
X   	local lservice=$service_bin
X
X   	ssh -q $host "bash -c '[[ -f /etc/init.d/$svc_name ]]'" || return 1
X
X   	if [[ -n "$chkconfig" ]] ; then
X      		return $(ssh -q $host "$chkconfig --list $svc_name >/dev/null 2>&1")
X   	fi
X
X   	return $(ssh -q $host "$lservice --status-all 2>/dev/null" | grep -qw "$svc_name")
X}
X
X# verify that a required executable / package is installed
X# complain and return 1 if not
X# local and remote
Xfunction require() {
X	ret=0
X	# args: executable "redhat package" "debian package" 
X	if ! [[  -x `which $1 2>/dev/null` ]] ; then
X		echo "Unable to find $1 in $PATH"
X		echo "Please install with:"
X		if [[ -x `which apt-get 2>/dev/null` ]] ; then
X			echo "apt-get update && apt-get install $3"
X		elif [[ -x `which yum 2>/dev/null` ]] ; then
X			echo "yum install $2"
X		fi
X		ret=1
X	fi
X	if ! ssh -q $secondary which $1 2>&1 >/dev/null ; then
X		echo "Unable to find $1 in $PATH on $secondary"
X		echo "Please install with:"
X		if ssh $secondary which apt-get 2>&1 >/dev/null ; then
X			echo "apt-get update && apt-get install $3"
X		elif ssh $secondary which yum 2>&1 >/dev/null ; then
X			echo "yum install $2"
X		fi
X		ret=1
X	fi
X	return $ret
X}
X
Xfunction stop_appdynamics_services()
X{
X	local host=$1
X	local errors=0
X	for s in ${appdynamics_service_list[@]}
X	do 
X		if [ -z "$host" ] ; then
X			service $s stop || ((errors++))
X		else
X			remservice -q $host $s stop || ((errors++))
X		fi
X	done
X	return $errors;
X}
X
Xfunction verify_init_scripts()
X{
X	local host=$1
X	local ssh=`[ -n "$host" ] && echo "ssh -q"`
X	local errors=0
X	local NEWMD5=
X	for s in ${appdynamics_service_list[@]}
X	do 
X		NEWMD5=$(md5sum $APPD_ROOT/HA/$s.sh | cut -d " " -f 1)
X		if [[ "$NEWMD5" != `$ssh $host md5sum /etc/init.d/$s|cut -d " " -f 1` ]] ; then
X			((errors++))
X		fi
X	done
X	if [ $errors -gt 0 ] ; then
X		if [ -z $host ] ; then
X			echo "\
XOne or more AppDynamics init scripts are not installed or are out of date.
XPlease run $APPD_ROOT/HA/install-init.sh as root before proceeding."
X		else
X			echo "\
XOne or more AppDynamics init scripts are not installed or are out of date on
X$host. Please run $APPD_ROOT/HA/install-init.sh as root on $host
Xbefore proceeding."
X		fi
X	fi
X	return $errors;
X}
X
Xfunction get_privilege_escalation(){
X	local host=$1
X	local ssh=`[ -n "$host" ] && echo "ssh -q"`
X	local escalation_type=
X	local errors=0
X	for s in ${appdynamics_service_list[@]}
X	do 
X		if $ssh $host test -x /sbin/appdservice ; then
X			if dd if=/sbin/appdservice bs=11 count=1 2>/dev/null \
X				| grep -q '^#!/bin/bash' ; then
X				escalation_type="pbrun"
X			else
X				escalation_type="setuid"
X			fi
X		else
X			$ssh $host sudo -nl $service_bin $s start > /dev/null 2>&1 || ((errors++))
X			$ssh $host sudo -nl $service_bin $s stop > /dev/null 2>&1 || ((errors++))
X			if  [ $errors -lt 1 ] ; then
X				escalation_type="sudo"
X			else
X				escalation_type="unknown"
X			fi
X		fi
X	done
X	echo $escalation_type
X	return $errors
X}
X
Xfunction verify_privilege_escalation(){
X	local host=$1
X	local errors=0
X	local local_priv_escalation=
X	local remote_priv_escalation=
X
X	local_priv_escalation=$(get_privilege_escalation)
X	if [ $? -gt 0 ] ; then
X		echo "\
XUser $dbuser is unable to start and stop appdynamics services
XPlease ensure that $APPD_ROOT/HA/install-init.sh has been run."
X		((errors++))
X	fi
X
X	remote_priv_escalation=$(get_privilege_escalation $host)
X	if [ $? -gt 0 ] ; then
X		echo "\
XUser $dbuser is unable to start and stop appdynamics services on $host.
XPlease ensure that $APPD_ROOT/HA/install-init.sh has been run on $host."
X		((errors++))
X	fi
X	
X	if [ $errors -lt 1 ] && [ "$local_priv_escalation" != "$remote_priv_escalation" ] ; then
X		echo "\
XThe primary and secondary hosts are not using the same privilege escalation
Xwrapper.
X
XPrimary:   $local_priv_escalation
XSecondary: $remote_priv_escalation
X
XPlease re-run install-init.sh on one or both hosts with the same options."
X		((errors++))
X	fi
X	return $errors
X}
X
Xfunction usage()
X{
X	if [ $# -gt 0 ] ; then
X		echo "$*"
X	fi
X	echo "usage: $0 <options>"
X	echo "    -s <secondary hostname>"
X#	echo "    [ -j ] Synchronize controller app server configurations and related binaries"
X#	echo "           if secondary database is running, leave it running."
X	echo "    [ -e [protocol://]<external vip>[:port] ]"
X	echo "    [ -i [protocol://]<internal vip>[:port] ]"
X	echo "    [ -m url=[protocol://]<controller_monitor>[:port],access_key=\"1-2-3-4\"[,app_name=\"ABC controller\"][,account_name=someaccount] ]"
X	echo "    [ -a <machine agent install directory> ]"
X	echo "    [ -f ]       do final install and activation"
X	echo "    [ -t [rsync speed limit]]" if unspecified or 0, unlimited
X	echo "    [ -U ] unencrypted rsync"
X	echo "    [ -z ] enable rsync compression"
X#	echo "    [ -u ] upgrade fixup"
X	echo "    [ -E ] unbreak replication"
X	echo "    [ -n ] no appserver start"
X	echo "    [ -S ] enable SSL for replication traffic"
X	echo "    [ -w ] enable watchdog on secondary"
X	echo "    [ -W ] use wildcard host in grant"
X	echo "    [ -h ] print help"
X	exit 1
X}
X
X#
X# given a name and url, crack the url and set the 3 variables:
X# $name_host, $name_port, $name_protocol
X#
Xfunction parse_vip()
X{
X	local vip_name=$1
X	local vip_def=$2
X
X	[[ -z "$vip_def" ]] && return
X
X	echo $vip_def | awk -F: -v vip_name=$vip_name '
X		BEGIN { 
X			host=""; 
X			protocol="http";
X			port="8090"; 
X		}
X		/http[s]*:/ {protocol=$1; host=$2; port=$3;next}
X		/:/ {host=$1; port=$2;next}
X		{host=$1}
X		END {
X			if (port == "") {
X				port = (protocol=="https")?443:8090;
X			}
X			gsub("^//","",host);
X			gsub("[^0-9]*$","",port);
X			printf("%s_host=%s\n", vip_name, host);
X			printf("%s_port=%s\n", vip_name, port);
X			printf("%s_protocol=%s\n", vip_name, protocol);
X		}
X	'
X}
X
Xlog_rename
X
X#
X# log versions and arguments
X#
Xmessage "replication log " `date`
Xmessage "version: " `grep '$Id' $0 | head -1`
Xmessage "command line options: " "$@"
Xmessage "hostname: " `hostname`
Xmessage "appd root: $APPD_ROOT"
Xmessage "appdynamics run user: $dbuser"
X
Xwhile getopts :s:e:m:a:i:dfhjut:nwzEFHWUS flag; do
X	case $flag in
X	d)
X		debug=true
X		;;
X	s)
X		secondary=$OPTARG
X		;;
X	e)
X		external_vip=$OPTARG
X		;;
X	U)
X		unencrypted=true
X		;;
X	i)
X		internal_vip=$OPTARG
X		;;
X	m)
X		# parse a controller monitor definition.
X		# this takes the form:
X		# url=[protocol://]<controller_monitor>[:port],
X		# access_key=\"1-2-3-4\"
X		# [,app_name=\"ABC controller\"]
X		# [,account_name=someaccount]
X		#
X		controller_monitor_args=$OPTARG
X		declare -a vals A
X		declare -A cmargs
X		# vals array gets comma delimited settings
X		IFS=, read -a vals <<< "$controller_monitor_args"
X		for i in ${!vals[*]} ; do 
X			# then, split the key, value pairs by equals sign
X			IFS="=" read -a A <<< "${vals[$i]}"
X			# remove any leading/trailing quotes
X			noquote=$(sed -e 's/^["'\'']//' -e 's/["'\'']$//' <<< "${A[1]}")
X			# assign associative array cmargs
X			cmargs[${A[0]}]=${noquote}
X		done
X		;;
X	j)
X		appserver_only_sync=true
X	    	;;
X	n)
X		start_appserver=false
X		;;
X	w)
X		watchdog_enable=true
X		;;
X	S)
X		ssl_replication=true
X		;;
X	u)
X		upgrade=true
X		echo "upgrade currently unsupported"
X		exit 8
X		;;
X	:)
X		# optional arguments are handled here
X		if [ $OPTARG = 't' ] ; then
X			rsync_throttle=""
X		else
X			echo "option '$OPTARG' requires a value" 1>&2
X			usage
X		fi
X		;;
X	t)
X		if echo $OPTARG | grep -q '^-' ; then
X			((OPTIND--))
X			OPTARG=0
X		fi
X		if [ $OPTARG -eq 0 ] ; then
X			rsync_throttle=""
X		else
X			rsync_throttle="--bwlimit=$OPTARG"
X		fi
X		;;
X	z)
X		rsync_compression="-z"
X		;;
X	a)
X		machine_agent=$OPTARG
X		[[ -f $machine_agent/machineagent.jar ]] || fatal 1 "-a directory $machine_agent is not a machine agent install directory"
X		;;
X	F)
X		final=true
X		;;
X	W)
X		wildcard=true
X		;;
X	E)
X		echo "type 'confirm' to re-enable replication"
X		read confirm
X		if [ "$confirm" != confirm ] ; then
X			exit 2;
X		fi
X		unbreak=true
X		;;	
X	f)
X		echo "type 'confirm' to stop appserver and install HA"
X		read confirm
X		if [ "$confirm" != confirm ] ; then
X			exit 2;
X		fi
X		final=true
X		;;
X	h)
X		if [ -f README ] ; then
X			if [ -z "$PAGER" ] ; then
X				PAGER=cat
X			fi
X			$PAGER README
X		fi
X		usage
X		;;
X	H|*)
X		if [ $flag != H ] ; then
X			echo "unknown option flag $OPTARG"
X		fi
X		usage
X		;;
X	esac
Xdone
X
Xif [ -z "$secondary" ] ; then
X	usage "secondary hostname must be set"
Xfi
X
X#
X# search for a machine agent in a few likely places
X#
Xif [ -z "$machine_agent" ] ; then
X	for ma in ../* ../../* ; do
X		if [ -f $ma/machineagent.jar ] ; then
X			machine_agent=$ma
X			break;
X		fi
X	done
Xfi
Xif [ -n "$machine_agent" ] ; then
X	machine_agent=`cd $machine_agent ; pwd -P`
X	ma_conf=$machine_agent/conf
X	message "found machine agent in $machine_agent"
X	message "copying monitors"
X	cp -r monitors/* $machine_agent/monitors
X	chmod +x $machine_agent/monitors/*/*.sh
Xfi
X
Xif [ -z "$internal_vip" ] ; then
X	internal_vip=$external_vip
Xfi
X
Xmonitor="${cmargs['url']}"
Xif [ -z "$monitor" ] ; then
X	monitor=$internal_vip
Xfi
X
Xeval `parse_vip external_vip $external_vip`
Xeval `parse_vip internal_vip $internal_vip`
Xeval `parse_vip monitor $monitor`
X
X#
X# set the monitoring up to reasonable defaults if any portion is not set
X#
Xmonitor_access_key=${cmargs['access_key']}
Xmonitor_account=${cmargs['account_name']}
Xmonitor_application=${cmargs['app_name']}
X
Xif [ -z "$monitor_account" ] ; then
X	if [ "$monitor" = "$internal_vip" ] ; then
X		monitor_account=system
X	else
X		monitor_account=customer1
X	fi
Xfi
Xif [ -z "$monitor_application" ] ; then
X	pair=`echo -e "$primary\n$secondary" | sort | tr '\n' '-' | sed 's/-$//'`
X	monitor_application="HA pair $pair"
Xfi
Xif [ -z "$monitor_access_key" ] ; then
X	if [ "$monitor" != "$internal_vip" ] ; then
X		fatal 10 "monitoring access key must be specified for external host"
X	fi
Xfi
X
X# sanity check - verify that the appd_user and the directory owner are the same
Xif [ `ls -ld .. | awk '{print $3}'` != `id -un` ] ; then
X	echo "Controller root directory not owned by current user"
X	exit 1
Xfi
X
Xif $appserver_only_sync && $final ; then
X	fatal 1 "\
X		App-server-only and final sync modes are mutually exclusive.  \
X		Please run with -j or -f, not both."
Xfi
X
Xrequire "ex" "vim-minimal" "vim-tiny" || exit 1
Xrequire "rsync" "rsync" "rsync" || exit 1
X
Xif $debug ; then
X	require "parallel" "moreutils-parallel" "parallel" || exit 1
Xfi
X
X#
X# kill a remote rsyncd if we have one
X#
Xfunction kill_rsyncd() {
X	rsyncd_pid=`ssh $secondary cat /tmp/replicate.rsync.pid 2>/dev/null`
X	if [ ! -z "$rsyncd_pid" ] ; then
X		ssh $secondary kill -9 $rsyncd_pid
X	fi
X	ssh $secondary rm -f /tmp/replicate.rsync.pid
X}
X
Xfunction cleanup() {
X	rm -rf $tmpdir
X	kill_rsyncd
X}
X
Xtrap cleanup EXIT
Xcleanup
Xmkdir -p $tmpdir
X
Xfunction handle_interrupt(){
X	echo "Caught interrupt."
X	if [[ -n `jobs -p` ]] ; then
X		echo "Killing child processes."
X		kill $(jobs -p) 2>/dev/null
X	fi
X	echo "Exiting"
X	exit
X}
X
X#
X# helper function to wrap running a command and dying if it fails
X#
Xfunction runcmd {
X	local cmd="$*"
X	if ! $cmd ; then
X		fatal 1 "\"$cmd\" command failed"
X	fi
X}
X
Xfunction logcmd {
X	local cmd=($*)
X	# declare -p cmd
X	echo "${cmd[*]}" | logonly
X	${cmd[*]} | logonly 2>&1
X}
X
Xtrap handle_interrupt INT
X
X#
X# make sure we are running as the right user
X#
Xif [ -z "$dbuser" ] ; then
X	fatal 1 user not set in $APPD_ROOT/db/db.cnf
Xfi
X
X#
X# verify no-password ssh is set up
X#
Xmessage "assert no password ssh"
Xif ! ssh -o PasswordAuthentication=no -o StrictHostKeyChecking=no $secondary true ; then
X	fatal 4 "no-password ssh not set up"
Xfi
X
X#
X# find a compatible cipher - important for speed
X#
Xfor ssh_crypto in aes128-gcm@openssh.com aes128-ctr aes128-cbc arcfour128 3des-cbc lose ; do
X	if ssh -c $ssh_crypto $secondary true >/dev/null 2>&1 ; then
X		break;
X	fi
Xdone
Xif [ "$ssh_crypto" = "lose" ] ; then
X	message "default crypto"
X	export RSYNC_RSH=ssh
Xelse
X	message "using $ssh_crypto crypto"
X	export RSYNC_RSH="ssh -c $ssh_crypto"
Xfi
X
X#
X# make sure we aren't replicating to ourselves!
X#
Xmyhostname=`hostname`
Xthemhostname=`ssh $secondary hostname 2>/dev/null`
X
Xif [ "$myhostname" = "$themhostname" ] ; then
X	fatal 14 "self-replication meaningless"
Xfi
X
X#
X# unbreak replication: only if both sides are kinda happy
X#
Xif $unbreak ; then
X	dbcnf_unset skip-slave-start
X	dbcnf_unset skip-slave-start $secondary
X	sql $primary "start slave"
X	sql $secondary "start slave"
X	./appdstatus.sh
X	exit 0
Xfi
X
Xdatadir=`grep ^datadir $APPD_ROOT/db/db.cnf | cut -d = -f 2`
Xinnodb_logdir=`grep ^innodb_log_group_home_dir $APPD_ROOT/db/db.cnf | cut -d = -f 2`
Xif [ -z "$innodb_logdir" ] ; then
X	innodb_logdir="$datadir"
Xfi
X
Xif $unencrypted ; then
X	export RSYNC_RSH=ssh
X	RSYNC_PORT=10000
X	while echo "" | nc $secondary $RSYNC_PORT >/dev/null 2>&1 ; do
X		RSYNC_PORT=$((RSYNC_PORT+1))
X	done
X	ROOTDEST=rsync://$secondary:$RSYNC_PORT/default$APPD_ROOT
X	DATADEST=rsync://$secondary:$RSYNC_PORT/default$datadir
X	MADEST=rsync://$secondary:$RSYNC_PORT/default$machine_agent
X	kill_rsyncd
X	ssh $secondary mkdir -p $APPD_ROOT/HA
X	scp -q $APPD_ROOT/HA/rsyncd.conf $secondary:$APPD_ROOT/HA/rsyncd.conf
X	ssh $secondary rm -f /tmp/rsyncd.log
X	ssh $secondary rsync --daemon --config=$APPD_ROOT/HA/rsyncd.conf \
X		--port=$RSYNC_PORT
Xelse
X	ROOTDEST=$secondary:$APPD_ROOT
X	DATADEST=$secondary:$datadir
X	MADEST=$secondary:$machine_agent
Xfi
X
Xif ! $appserver_only_sync ; then
X
X	#
X	# sanity check: make sure we don't have the controller.sh interlock active.
X	# if there's no controller.sh file, we are the target of an incremental!
X	message "assert non-incremental"
X	if ! [ -x $APPD_ROOT/bin/controller.sh ] ; then
X		fatal 15 "copying from disabled controller - BOGUS!"
X	fi
X
X	#
X	# make sure that the primary database is up.  if not, start it
X	#
X	if echo "exit" | $APPD_ROOT/HA/mysqlclient.sh 2>&1 | grep -q "ERROR 2003" ; then
X		message "starting primary database"
X		$APPD_ROOT/bin/controller.sh start-db | logonly 2>&1
X	fi
X
X	#
X	# make sure replication has stopped
X	#
X	message "stopping replication"
X	sql localhost "STOP SLAVE;RESET SLAVE ALL;RESET MASTER;"
X
X	#
X	# sanity check: make sure we are not the passive side. replicating the
X	# broken half of an HA will be a disaster!
X	message "assert active side"
X	if [ "`get_replication_mode localhost`" = passive ] ; then
X		fatal 3 "copying from passive controller - BOGUS!"
X	fi
X
X	#
X	# force the ha.controller.type to primary, 
X	# this should kill the assassin if it running.
X	#
X	message "force primary"
X	sql localhost "update global_configuration_local set value='primary' \
X		where name = 'ha.controller.type';"
X
X	#
X	# flush tables on the primary
X	# this is to force mtimes to sync up with reality on an imperfect copy
X	#
X	message "flush tables"
X	sql localhost "flush tables;"
X
X	# stop the secondary database (and anything else)
X	# this may fail totally
X	#
X	message "stopping secondary db if present"
X	( stop_appdynamics_services $secondary || ssh $secondary $APPD_ROOT/bin/controller.sh stop ) | logonly 2>&1
X
X	#
X	# the secondary loses controller.sh until we are ready
X	# this inhibits starting an incomplete controller
X	#
X	message "inhibit running of secondary and delete mysql/innodb logfiles"
X	ssh $secondary rm -f $APPD_ROOT/bin/controller.sh \
X		"$innodb_logdir/ib_logfile*"
X		"$datadir/*log*" \
X		$datadir/ibdata1 | logonly 2>&1
X	
X	#
X	# disable automatic start of replication slave
X	#
X	dbcnf_set skip-slave-start true
Xfi
X
X#
X# if final, make sure the latest init scripts are installed and stop the primary database
X#
Xif $final ; then
X
X	# make sure the latest init scripts are installed on both hosts
X	if $running_as_root ; then
X		$APPD_ROOT/HA/install-init.sh
X		ssh $secondary $APPD_ROOT/HA/install-init.sh
X	else
X		if ! verify_init_scripts; then
X			missing_init="true" 
X		fi
X		if ! verify_init_scripts $secondary ; then
X			missing_init="true"
X		fi
X		if [ "$missing_init" = "true" ] ; then
X			fatal 7 "Cannot proceed"
X		fi
X		# verify that we can cause service state changes
X		if ! verify_privilege_escalation $secondary ; then
X			bad_privilege_escalation="true"
X		fi
X		if [ "$bad_privilege_escalation" = "true" ] ; then
X			fatal 9 "Cannot proceed"
X		fi
X	fi
X
X	message "stopping primary"
X	rsync_opts=$final_rsync_opts
X	rsync_throttle=""
X	( stop_appdynamics_services || $APPD_ROOT/bin/controller.sh stop ) | logonly 2>&1
Xfi
X
X#
X# make sure the db.cnf is HA-enabled.  if the string ^server-id is not there,
X# then the primary has not been installed as an HA.
X#
Xmessage "checking HA installation"
Xif grep -q ^server-id $APPD_ROOT/db/db.cnf ; then
X	message "server-id present"
Xelse
X	message "server-id not present"
X	cat <<- 'ADDITIONS' >> $APPD_ROOT/db/db.cnf
X	# Replication -- MASTER MASTER (for HA installs) -- Should be appended 
X	# to the end of the db.cnf file for the PRIMARY controller.
X	binlog_cache_size=1M
X	max_binlog_cache_size=10240M
X	log_bin=bin-log
X	log_bin_index=bin-log.index 
X	relay_log=relay-log
X	relay_log_index=relay-log.index
X	innodb_support_xa=1
X	sync_binlog=0
X	log-slow-slave-statements
X	# avoid bin-log writes on secondary
X	log_slave_updates=0
X	# set compression off if cpu is tight
X	slave_compressed_protocol=1
X	server-id=666  #  this needs to be unique server ID !!!
X	replicate-same-server-id=0
X	auto_increment_increment=10
X	auto_increment_offset=1
X	expire_logs_days=8
X	binlog_format=MIXED
X	replicate_ignore_table=controller.ejb__timer__tbl
X	replicate_ignore_table=controller.connection_validation
X	replicate_ignore_table=controller.global_configuration_local
X	replicate_wild_ignore_table=controller.mq%
X	replicate_wild_ignore_table=mysql.%
X	slave-skip-errors=1507,1517,1062,1032,1451
X	# added to speed up startup
X	innodb_stats_sample_pages=1
X	ADDITIONS
Xfi
X
X#
X# force server id - for failback
X#
Xdbcnf_set server-id 666
X
X#
X# make an empty directory on the secondary if needed
X#
Xmessage "mkdir if needed"
Xruncmd ssh $secondary mkdir -p $APPD_ROOT
Xruncmd ssh $secondary mkdir -p $datadir
X
X#
X# do a permissive chmod on the entire destination
X#
Xmessage "chmod destination"
Xruncmd ssh $secondary "find $APPD_ROOT -type f -exec chmod +wr {} +"
X
X#
X# check date on both nodes.  rsync is sensitive to skew
X#
Xmessage "checking clocks"
Xmessage "primary date: " `date`
Xmessage "secondary date: " `ssh $secondary date`
Xrmdate=`ssh $secondary date +%s`
Xlodate=`date +%s`
Xskew=$((rmdate-lodate))
Xif [ $skew -gt 60 ] || [ $skew -lt -60 ]; then
X	fatal 6 unacceptable clock skew: $rmdate $lodate $skew
Xfi
Xmessage "clock skew: $skew"
X
Xif $appserver_only_sync ; then
X	message "Rsync'ing controller app server only: $APPD_ROOT"
X	rsync $rsync_opts $rsync_throttle $rsync_compression               \
X	    --exclude=app_agent_operation_logs/\*                          \
X		--exclude=db/\*                                                \
X		--exclude=logs/\*                                              \
X		--exclude=tmp\*                                                \
X		$APPD_ROOT/ $ROOTDEST
X		message "Rsyncs complete"
X		message "App server only sync done"
X		exit 0
Xelse
X	#
X	# clean out the old relay and bin-logs
X	#
X	message "Removing old replication logs"
X	runcmd rm -f $datadir/bin-log* $datadir/relay-log* $datadir/master.info
X	runcmd ssh $secondary "find $datadir -print | grep bin-log | xargs rm  -f"
X	runcmd ssh $secondary "find $datadir -print | grep relay-log | xargs rm  -f"
X	runcmd ssh $secondary rm -f $datadir/master.info
X
X	#
X	# maximum paranoia:  build space ID maps of each of the innodb data files and 
X	# prune differences
X	# caution: gnarly quoting
X	#
X	# also, for files <= 1M, checksum the whole thing, not just the first block
X	#
X	message "Building innodb file maps"
X	rm -f $tmpdir/ibdlist.local $tmpdir/ibdlist.remote
X
X	find $datadir/controller \
X		-name \*.ibd \
X		\( -size -1M -o -size 1M \) \
X		-exec sh -c 'echo -n "{} " ; cat {} | md5sum' \; | \
X		sort > $tmpdir/ibdlist.small.local
X
X	find $datadir/controller \
X		-name \*.ibd \
X		-size +1M \
X		-exec sh -c 'echo -n "{} " ; od -N 150 -t x4 -A none {} | md5sum' \; | \
X		sort > $tmpdir/ibdlist.large.local
X
X	ssh $secondary "find $datadir/controller \
X		-name \*.ibd \( -size -1M -o -size 1M \) \
X		-exec sh -c 'echo -n \"{} \" ; cat {} | md5sum' \;" | \
X		sort > $tmpdir/ibdlist.small.remote
X	ssh $secondary "find $datadir/controller \
X		-name \*.ibd -size +1M \
X		-exec sh -c 'echo -n \"{} \" ; od -N 150 -t x4 -A none {} | md5sum' \;" | \
X		sort > $tmpdir/ibdlist.large.remote
X
X	diff $tmpdir/ibdlist.small.local $tmpdir/ibdlist.small.remote | \
X		awk '/^>/ {print $2}' > $tmpdir/worklist
X	diff $tmpdir/ibdlist.large.local $tmpdir/ibdlist.large.remote | \
X		awk '/^>/ {print $2}' >> $tmpdir/worklist
X	
X	discrepancies=`wc -w $tmpdir/worklist | awk '{print $1}'`
X	if [ $discrepancies -gt 0 ] ; then
X		message "found $discrepancies discrepancies"
X		cat $tmpdir/worklist | logonly
X		scp -q $tmpdir/worklist $secondary:/tmp/replicate-prune-worklist
X		ssh $secondary "cat /tmp/replicate-prune-worklist | xargs rm -f"
X	else
X		message "no discrepancies\n"
X	fi
X
X	#
X	# copy the controller + data to the secondary
X	#
X
X	message "Rsync'ing Controller: $APPD_ROOT"
X	logcmd rsync $rsync_opts \
X		$rsync_throttle $rsync_compression \
X		--exclude=lost+found \
X	    --exclude=bin/controller.sh \
X	    --exclude=license.lic \
X		--exclude=logs/\* \
X		--exclude=db/data \
X		--exclude=db/bin/.status \
X		--exclude=app_agent_operation_logs \
X		--exclude=appserver/glassfish/domains/domain1/appagent/logs/\* \
X		--exclude=tmp \
X		$APPD_ROOT/ $ROOTDEST
X
X	if [ -n "$machine_agent" ] ; then
X		message "Rsync'ing Machine Agent: $machine_agent"
X		logcmd rsync $rsync_opts \
X			$rsync_throttle $rsync_compression \
X			$machine_agent/ $MADEST
X	fi
X
X	message "Rsync'ing Data: $datadir"
X	logcmd rsync $rsync_opts \
X		$rsync_throttle $rsync_compression \
X		--exclude=lost+found \
X	    --exclude=bin-log\* \
X	    --exclude=relay-log\* \
X	    --exclude=\*.log \
X	    --exclude=master.info \
X	    --exclude=\*.pid \
X	    $datadir/ $DATADEST
X	message "Rsyncs complete"
Xfi
X
Xif $final ; then
X
X	if $running_as_root ; then
X		ssh $secondary $APPD_ROOT/HA/install-init.sh
X	fi
X
Xfi
X
X#
X# edit the secondary to change the server id
X#
Xmessage "changing secondary server id"
Xdbcnf_set server-id 555 $secondary
X
X#
X# if we're only do incremental, then no need to stop primary
X#
Xif ! $final ; then
X	#
X	# validate init scripts and sudo config
X	# and warn user if they need to be updated before final
X	#
X	if ! $running_as_root ; then
X		errors=0
X		verify_init_scripts || ((errors++))
X		verify_init_scripts $secondary || ((errors++))
X		if [ $errors -lt 1 ] ; then
X			verify_privilege_escalation $secondary
X		fi
X	fi
X	message "incremental sync done"
X	exit 0
Xfi
X
X#
X# restart the primary db
X#
Xmessage "starting primary database"
X# Do not proceed unless the primary starts cleanly or we could end up with
X#  unexpected failovers.
Xif ! service appdcontroller-db start | logonly 2>&1 ; then
X	fatal 1 "failed to start primary database.  Exiting..."
Xfi
X
Xif [ -z "$monitor_access_key" ] ; then
X	monitor_access_key=`sql localhost "select access_key from account where name = '$monitor_account'" | get access_key`
X	if [ -z "$monitor_access_key" ] ; then
X		fatal 11 "could not fetch access key for $monitor_account"
X	fi
Xfi
X
X#
X# worst case defaults
X#
Xmonitor_host=${monitor_host:-localhost}
Xmonitor_protocol=${monitor_protocol:-http}
Xmonitor_port=${monitor_port:-8090}
X
Xmessage "monitoring host: $monitor_host"
Xmessage "monitoring protocol: $monitor_protocol"
Xmessage "monitoring port: $monitor_port"
Xmessage "monitoring account: $monitor_account"
Xmessage "monitoring access key: $monitor_access_key"
Xmessage "monitoring application: $monitor_application"
X
X#
X# plug the various communications endpoints into domain.xml
X#
Xif [ -n "$external_vip" ] ; then
X	message "edit domain.xml deeplink"
X	domain_set_jvm_option appdynamics.controller.ui.deeplink.url \
X		"$external_vip_protocol://$external_vip_host:$external_vip_port"
Xfi
X
Xif [ -n "$monitor_host" ] ; then
X	message "edit domain.xml controller monitoring"
X	domain_set_jvm_option appdynamics.controller.hostName $monitor_host
X	domain_set_jvm_option appdynamics.controller.port $monitor_port
Xfi
X
Xif [ "$monitor_protocol" == "https" ] ; then
X	message "set controller monitoring ssl"
X	domain_set_jvm_option appdynamics.controller.ssl.enabled true
Xfi
X
Xif [ -n "$internal_vip_host" ] ; then
X	message "set services host and port"
X	domain_set_jvm_option appdynamics.controller.services.hostName $internal_vip_host
X	domain_set_jvm_option appdynamics.controller.services.port $internal_vip_port
Xfi
X
Xif [ -n "$monitor_account" ] ; then
X	message "set controller monitoring account"
X	domain_set_jvm_option appdynamics.agent.accountName "$monitor_account"
Xfi
X
Xif [ -n "$monitor_access_key" ] ; then
X	message "set controller monitoring account key"
X	domain_set_jvm_option appdynamics.agent.accountAccessKey "$monitor_access_key"
Xfi
X
Xif [ -n "$monitor_application" ] ; then
X	message "set controller monitoring app name"
X	domain_set_jvm_option appdynamics.agent.applicationName "$monitor_application"
Xfi
X
X#
X# make sure all controller-info.xml's are set up properly
X# this means the machine agent as well as the appagent
X#
Xcontroller_infos=(`find $ma_conf \
X	$APPD_ROOT/appserver/glassfish/domains/domain1/appagent -name controller-info.xml -print`)
X
Xfor info in ${controller_infos[*]} ; do
X	if [ -f $info ] ; then
X		ex -s $info <<- SETMACHINE
X			%s/\(<controller-host>\)[^<]*/\1$monitor_host/
X			%s/\(<controller-port>\)[^<]*/\1$monitor_port/
X			%s/\(<application-name>\)[^<]*/\1$monitor_application/
X			%s/\(<account-name>\)[^<]*/\1$monitor_account/
X			%s/\(<account-access-key>\)[^<]*/\1$monitor_access_key/
X			wq
X		SETMACHINE
X	fi
X	scp -q $info $secondary:$info
Xdone
X
X#
X# send the edited domain.xml
X#
Xmessage "copy domain.xml to secondary"
Xruncmd scp -q -p $APPD_ROOT/appserver/glassfish/domains/domain1/config/domain.xml $secondary:$APPD_ROOT/appserver/glassfish/domains/domain1/config/domain.xml
X
X#
X# write the primary hostname into the node-name property
X#
Xecho "setting up controller agent on primary"
Xfor ci in $APPD_ROOT/appserver/glassfish/domains/domain1/appagent/conf/controller-info.xml \
X	$APPD_ROOT/appserver/glassfish/domains/domain1/appagent/ver*/conf/controller-info.xml ; do
X	ex -s $ci <<- SETNODE1
X		%s/\(<node-name>\)[^<]*/\1$primary/
X		wq
X	SETNODE1
Xdone
X
X#
X# write the secondary hostname into the node-name property
X#
Xmessage "setting up controller agent on secondary"
Xfor ci in $APPD_ROOT/appserver/glassfish/domains/domain1/appagent/conf/controller-info.xml \
X	$APPD_ROOT/appserver/glassfish/domains/domain1/appagent/ver*/conf/controller-info.xml ; do
X	ssh $secondary ex -s $ci <<- SETNODE2
X		%s/\(<node-name>\)[^<]*/\1$secondary/
X		wq
X	SETNODE2
Xdone
X
Xif $debug ; then
X	message "building file lists"
X	ls -1 $datadir/controller/* | parallel md5sum | sort -k 2 --buffer-size=10M > $APPD_ROOT/logs/filelist.primary &
X	ssh $secondary 'ls -1 '$datadir'/controller/* | parallel md5sum' | sort -k 2 --buffer-size=10M > $APPD_ROOT/logs/filelist.secondary &
X	wait
Xfi
X
Xif [ -z $wildcard ] ; then
X	#
X	# let's probe the canonical hostnames from the local database
X	#
X	message "canonicalize hostnames"
X	primary1=`$APPD_ROOT/db/bin/mysql --host=$primary --port=$dbport --protocol=TCP --user=impossible 2>&1 | awk '
X		/ERROR 1045/ { gsub("^.*@",""); print $1;}
X		/ERROR 1130/ { gsub("^.*Host ",""); print $1;}' | tr -d \'`
X
X	secondary1=`ssh $secondary $APPD_ROOT/db/bin/mysql --host=$primary --port=$dbport --protocol=TCP --user=impossible 2>&1 | awk '
X		/ERROR 1045/ { gsub("^.*@",""); print $1;}
X		/ERROR 1130/ { gsub("^.*Host ",""); print $1;}' | tr -d \'`
X
X	#
X	# print the canonical hostnames
X	#
X	if [ "$primary1" = 'ERROR' -o "$secondary1" = 'ERROR' -o -z "$primary1" -o -z "$secondary1" ] ; then
X		gripe "cannot establish communications between mysql instances"
X		gripe "check firewall rules"
X		gripe "primary: $primary1"
X		gripe "secondary: $secondary1"
X		$APPD_ROOT/db/bin/mysql --host=$primary --port=$dbport --protocol=TCP --user=impossible 2>&1 | log
X		ssh $secondary $APPD_ROOT/db/bin/mysql --host=$primary --port=$dbport --protocol=TCP --user=impossible 2>&1 | log
X		fatal 5
X	fi
X
X	[[ $primary1 != localhost ]] && primary=$primary1	# avoid issues with 127.0.0.1 having been set to hostname in /etc/hosts
X	[[ $secondary1 != localhost ]] && secondary=$secondary1	# avoid issues with 127.0.0.1 having been set to hostname in /etc/hosts
X	grant_primary=$primary
X	grant_secondary=$secondary
Xelse
X	grant_primary='%'
X	grant_secondary='%'
Xfi
X
Xmessage "primary: $primary"
Xmessage "secondary: $secondary"
X
X#
X# do all the setup needed for ssl; db.cnf and cert creation
X#
Xdbcnf_md5=`md5sum $APPD_ROOT/db/db.cnf | cut  -d " " -f 1`
X
X#
X# ssl replication
X# start from scratch
X#
Xrm -rf $CERTS
Xmkdir -p $CERTS
Xssh $secondary rm -rf $CERTS
X
Xdbcnf_unset ssl
Xdbcnf_unset ssl-ca
Xdbcnf_unset ssl-key
Xdbcnf_unset ssl-cert
Xdbcnf_unset ssl-cipher
X
Xdbcnf_unset ssl $secondary
Xdbcnf_unset ssl-ca $secondary
Xdbcnf_unset ssl-key $secondary
Xdbcnf_unset ssl-cert $secondary
Xdbcnf_unset ssl-cipher $secondary
X
Xif $ssl_replication ; then
X
X	#
X	# make a CA
X	#
X	openssl genrsa 2048 > $CERTS/ca-key.pem 2>/dev/null
X	openssl req -new -x509 -nodes -days 3650 \
X		-key $CERTS/ca-key.pem -out $CERTS/ca-cert.pem -subj "/CN=ca" >/dev/null 2>&1
X
X	#
X	# make a pair of host key pairs
X	#
X	for cn in $primary $secondary ; do
X		base=$CERTS/$cn
X		echo "making host $cn keypair"
X		openssl req -newkey rsa:2048 \
X			-subj "/CN=$cn" -nodes -days 3650 \
X			-keyout $base-private.pem -out $base-public.pem >/dev/null 2>&1
X		openssl rsa -in $base-private.pem -out $base-private.pem >/dev/null 2>&1
X		openssl x509 -req -days 3560 -set_serial 01 \
X			-in $base-public.pem -out $base-cert.pem \
X			-CA $CERTS/ca-cert.pem -CAkey $CERTS/ca-key.pem >/dev/null 2>&1
X	done
X
X	scp -q -r $CERTS $secondary:$CERTS
X
X	message "checking SSL configuration in db.cnf"
X
X	dbcnf_set ssl "" 	
X	dbcnf_set ssl-ca "$CERTS/ca-cert.pem"
X	dbcnf_set ssl-key "$CERTS/$primary-private.pem"
X	dbcnf_set ssl-cert "$CERTS/$primary-cert.pem"
X	#dbcnf_set ssl-cipher "AES256-SHA:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA"
X
X	dbcnf_set ssl "" $secondary
X	dbcnf_set ssl-ca "$CERTS/ca-cert.pem" $secondary
X	dbcnf_set ssl-key "$CERTS/$secondary-private.pem" $secondary
X	dbcnf_set ssl-cert "$CERTS/$secondary-cert.pem" $secondary
X	#dbcnf_set ssl-cipher "AES256-SHA:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA" $secondary
X
X	USE_SSL="REQUIRE SSL"
X	PRIMARY_SSL=",MASTER_SSL_CAPATH='$CERTS', MASTER_SSL_CA='$CERTS/ca-cert.pem',MASTER_SSL_KEY='$CERTS/$primary-private.pem',MASTER_SSL_CERT='$CERTS/$primary-cert.pem',MASTER_SSL=1"
X	SECONDARY_SSL=",MASTER_SSL_CAPATH='$CERTS', MASTER_SSL_CA='$CERTS/ca-cert.pem',MASTER_SSL_KEY='$CERTS/$secondary-private.pem',MASTER_SSL_CERT='$CERTS/$secondary-cert.pem',MASTER_SSL=1"
Xelse
X	#
X	# delete all the ssl properties in db.cnf
X	#
X	sed -i '/^[[:space:]]*ssl.*$/d' $APPD_ROOT/db/db.cnf >/dev/null
X	USE_SSL=""
X	PRIMARY_SSL=""
X	SECONDARY_SSL=""
Xfi
X
X#
X# if our db.cnf changed, we need to bounce the local db
X#
Xif [ "$dbcnf_md5" != `md5sum $APPD_ROOT/db/db.cnf | cut  -d " " -f 1` ] ; then
X	message "bouncing database"
X	if ! service appdcontroller-db stop ; then
X		fatal 1 "-- failed to start primary database.  Exiting..."
X	fi
X	if ! service appdcontroller-db start ; then
X		fatal 1 "-- failed to start primary database.  Exiting..."
X	fi
Xfi
X
X#
X# build the scripts
X#
Xcat >$tmpdir/ha.primary <<- PRIMARY
XSTOP SLAVE;
XRESET SLAVE ALL;
XRESET MASTER;
XDELETE FROM mysql.user where user='controller_repl';
XFLUSH PRIVILEGES;
XGRANT ALL ON *.* TO 'controller_repl'@'$grant_secondary' IDENTIFIED BY 'controller_repl' $USE_SSL;
XCHANGE MASTER TO MASTER_HOST='$secondary', MASTER_USER='controller_repl', MASTER_PASSWORD='controller_repl', MASTER_PORT=$dbport $PRIMARY_SSL;
Xupdate global_configuration_local set value = 'active' where name = 'appserver.mode';
Xupdate global_configuration_local set value = 'primary' where name = 'ha.controller.type';
Xtruncate ejb__timer__tbl;
XPRIMARY
X
Xcat > $tmpdir/ha.secondary <<- SECONDARY
XSTOP SLAVE;
XRESET SLAVE ALL;
XRESET MASTER;
XDELETE FROM mysql.user where user='controller_repl';
XFLUSH PRIVILEGES;
XGRANT ALL ON *.* TO 'controller_repl'@'$grant_primary' IDENTIFIED BY 'controller_repl' $USE_SSL;
XCHANGE MASTER TO MASTER_HOST='$primary', MASTER_USER='controller_repl', MASTER_PASSWORD='controller_repl', MASTER_PORT=$dbport $SECONDARY_SSL;
Xupdate global_configuration_local set value = 'passive' where name = 'appserver.mode';
Xupdate global_configuration_local set value = 'secondary' where name = 'ha.controller.type';
Xtruncate ejb__timer__tbl;
XSECONDARY
X
X#
X# make all the changes on the primary to force master
X#
Xmessage "setting up primary slave"
Xcat $tmpdir/ha.primary | $APPD_ROOT/HA/mysqlclient.sh | logonly
X
X#
X# now we need a secondary controller.sh
X#
Xmessage "copy controller.sh to secondary"
Xruncmd scp -q -p $APPD_ROOT/bin/controller.sh $secondary:$APPD_ROOT/bin
X
X#
X# but disable the appserver
X#
Xmessage "disable secondary appserver"
Xruncmd ssh $secondary touch $APPD_ROOT/HA/APPSERVER_DISABLE
X
X#
X# make sure the master.info is not going to start replication yet, since it will be
X# a stale log position
X#
Xmessage "remove master.info"
Xruncmd ssh $secondary rm -f $datadir/master.info
X
X#
X# start the secondary database
X#
Xmessage "start secondary database"
Xif ! remservice -t $secondary appdcontroller-db start | logonly 2>&1 ; then
X	fatal 10 "could not start secondary database"
Xfi
X
X#
X# ugly hack here - there seems to be a small timing problem
X#
Xmessage "wait for secondary to start"
Xuntil sql $secondary "show databases" | grep -q "information_schema" ; do
X	message "waiting for mysql to start using $secondary" `date`
X	sleep 2
Xdone
X
X#
X# make all the changes on the secondary
X#
Xmessage "setting up secondary slave"
Xcat $tmpdir/ha.secondary | ssh $secondary $APPD_ROOT/HA/mysqlclient.sh
X
Xmessage "removing skip-slave-start from primary"
Xdbcnf_unset skip-slave-start
X
Xmessage "removing skip-slave-start from secondary"
Xdbcnf_unset skip-slave-start $secondary
X
X#
X# start the replication slaves
X#
Xmessage "start primary slave"
Xsql localhost "START SLAVE;"
X
Xmessage "start secondary slave"
Xsql $secondary "START SLAVE;"
X
X#
X# slave status on both ends
X#
Xmessage "primary slave status"
Xsql localhost "SHOW SLAVE STATUS" | awk \
X	'/Slave_IO_State/ {print}
X	 /Seconds_Behind_Master/ {print} 
X	 /Master_Server_Id/ {print}
X	 /Master_Host/ {print}' | log
Xsql localhost "SHOW SLAVE STATUS" | awk \
X	 '/Master_SSL_Allowed/ { 
X		if ($2 == "Yes") {
X			print "Using SSL Replication" 
X		}
X	 }' | log
X
Xmessage "secondary slave status"
Xsql $secondary "SHOW SLAVE STATUS" | awk \
X	'/Slave_IO_State/ {print}
X	 /Seconds_Behind_Master/ {print} 
X	 /Master_Server_Id/ {print}
X	 /Master_Host/ {print} ' | log
Xsql localhost "SHOW SLAVE STATUS" | awk \
X	 '/Master_SSL_Allowed/ { 
X		if ($2 == "Yes") {
X			print "Using SSL Replication" 
X		}
X	 }' | log
X
X#
X# enable the watchdog, or not.
X#
Xif [ $watchdog_enable = "true" ] ; then
X	touch $WATCHDOG_ENABLE
X	ssh $secondary touch $WATCHDOG_ENABLE
Xelse
X	rm -f $WATCHDOG_ENABLE
X	ssh $secondary rm -f $WATCHDOG_ENABLE
Xfi
X
X#
X# handle license files - compare creation times, and use latest one
X# grab the one over there if newer
X#
Xremote_lic=0
Xlocal_lic=0
Xif ssh $secondary test -f $APPD_ROOT/license.lic ; then
X	remote_lic=`ssh $secondary grep creationDate $APPD_ROOT/license.lic | \
X		 awk -F= '{print $2}'`
Xfi
Xif [ -f $APPD_ROOT/license.lic.$secondary ] ; then
X	local_lic=`grep creationDate $APPD_ROOT/license.lic.$secondary | \
X		awk -F= '{print $2}'`
Xfi
X
Xif [ $local_lic -lt $remote_lic ] ; then
X	message "copying license file from secondary"
X	scp -q $secondary:$APPD_ROOT/license.lic $APPD_ROOT/license.lic.$secondary 
Xelif [ $local_lic -ne 0 ] ; then
X	message "copying license file to  secondary"
X	scp -q $APPD_ROOT/license.lic.$secondary $secondary:$APPD_ROOT/license.lic
Xelse
X	message "secondary license file required"
Xfi
X
X#
X# handle odd case - license.lic.$primary is newer
X#
Xcopy_lic=0
Xlic=0
Xif [ -f $APPD_ROOT/license.lic ] ; then
X	lic=`grep creationDate $APPD_ROOT/license.lic | awk -F= '{print $2}'`
Xfi
Xif [ -f $APPD_ROOT/license.lic.$primary ] ; then
X	copy_lic=`grep creationDate $APPD_ROOT/license.lic.$primary | \
X		awk -F= '{print $2}'`
Xfi
X
Xif [ $lic -lt $copy_lic ] ; then
X	message "using newer $license.lic.$primary"
X	cp $APPD_ROOT/license.lic.$primary $APPD_ROOT/license.lic
Xelif [ $lic -ne 0 ] ; then
X	message "saving license to $license.lic.$primary"
X	cp $APPD_ROOT/license.lic $APPD_ROOT/license.lic.$primary
Xelse
X	message "no primary license file"
Xfi
X
Xmessage "sending primary license file"
Xscp -q $APPD_ROOT/license.lic.$primary $secondary:$APPD_ROOT
X
X#
X# now enable the secondary appserver
X#
Xmessage "enable secondary appserver"
Xssh $secondary rm -f $APPD_ROOT/HA/APPSERVER_DISABLE
X
X#
X# make sure host keys are properly set to prevent ssh from hanging
X#
Xmessage "checking for ssh access issues"
Xsechost=`sql localhost "show slave status" | get Master_Host`
Xprihost=`sql $secondary "show slave status" | get Master_Host`
Xif [ -z "$sechost" -o -z "$prihost" ] ; then
X	fatal 21 "prihost: $prihost sechost: $sechost setting failed"
Xfi
X
Xruncmd ssh -o StrictHostKeyChecking=no $sechost ssh -o StrictHostKeyChecking=no $prihost /bin/true
X
X#
X# restart the appserver
X#
Xif [ $start_appserver = "true" ] ; then
X	message "start primary appserver"
X	if ! service appdcontroller start | logonly 2>&1 ; then
X		fatal 12 "could not start primary appdcontroller service"
X	fi
X
X	message "secondary service start"
X	# issues with the command actually starting the watchdog on the secondary.
X	# further troubleshooting needed
X	if ! remservice -t $secondary appdcontroller start | logonly 2>&1 ; then
X		fatal 11 "could not start secondary appdcontroller service"
X	fi
X
X	if [ -n "$machine_agent" ] ; then
X
X		message "restart local machine agent"
X		service appdynamics-machine-agent stop
X		service appdynamics-machine-agent start
X
X		message "restart remote machine agent"
X		remservice -t $secondary appdynamics-machine-agent stop
X		remservice -t $secondary appdynamics-machine-agent start
X	fi
X	message "HA setup complete."
Xfi
X
Xcleanup
X
END-of-replicate.sh
echo x - install-init.sh
sed 's/^X//' >install-init.sh << 'END-of-install-init.sh'
X#!/bin/bash
X#
X# $Id: install-init.sh 3.0.1 2016-08-08 14:52:22 cmayer $
X#
X# install init scripts, including the machine agent.
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xfunction usage {
X	echo "$0 [-options] where:"
X	echo "   -c  # use setuid c wrapper"
X	echo "   -s  # use sudo"
X	echo "   -p  # use pbrun wrapper"
X	echo "   -x  # use user privilege wrapper"
X	echo "   -a  <Machine Agent install directory>"
X	exit 1
X}
X
Xcd $(dirname $0)
XAPPD_ROOT=`cd .. ; pwd -P`			# ignore sym links
XPBRUN=`grep PBRUN= appdservice-pbrun.sh | awk -F= '{print $2}'`
X
Xif ! [ -d $APPD_ROOT/bin ] ; then
X	APPD_ROOT=/opt/AppDynamics/Controller
X	echo using default path $APPD_ROOT
Xfi
XDOMAIN_XML=$APPD_ROOT/appserver/glassfish/domains/domain1/config/domain.xml
X
X# source function library
X. $APPD_ROOT/HA/lib/ha.sh
X
Xmachine_agent_service=""
Xmachine_agent=""
Xuse_pbrun=0
Xuse_cwrapper=0
Xuse_sudo=0
Xuse_root=0
Xuse_xuser=0
X
Xwhile getopts ":csprxa:" flag; do
X	case $flag in
X	x)
X		use_xuser=1
X		;;
X	c)
X		use_cwrapper=1
X		;;
X	s)
X		use_sudo=1
X		;;
X	p)
X		if [ -x $PBRUN ] ; then
X			use_pbrun=1
X		else
X			echo $PBRUN not found
X			exit 1
X		fi
X		;;
X	a)	
X		machine_agent=$OPTARG
X		if ! [ -f $machine_agent/machineagent.jar ] ; then
X			echo "$machine_agent is not a machine agent install directory"
X			exit 1
X		fi
X		;;
X	:)	
X		echo "option '$OPTARG' requires a value" 1>&2
X		usage
X		;;
X	*)
X		usage
X		;;
X	esac
Xdone
X
X#
X# search for a machine agent in a few likely places
X#
Xif [ -z "$machine_agent" ] ; then
X	for ma in ../* ../../* ; do
X		if [ -f $ma/machineagent.jar ] ; then
X			machine_agent=`cd $ma ; pwd -P`
X			break;
X		fi
X	done
Xfi
Xif [ -n "$machine_agent" ] ; then
X	machine_agent_service=appdynamics-machine-agent
X	echo "found machine agent in $machine_agent"
Xfi
X
Xif [ `id -u` != 0 ] ; then
X	echo $0 must be run as root
X	exit 0
Xfi
X
XSCRIPTNAME=$(basename $(readlink -e $0))
X
Xexport PATH=/sbin:/usr/sbin:$PATH
X
X# list of AppDynamics services in start order
XAPPDYNAMICS_SERVICE_LIST=( appdcontroller-db appdcontroller $machine_agent_service)
X
XVENDOR=`lsb_release -i 2>/dev/null | awk '{print $3}'`
X
Xif echo $VENDOR | grep -iq ubuntu ; then
X	#
X	# Define explicit start and stop order lists for Ubuntu and other distros
X	# were update-rc.d ignores the LSB dependency headers
X	#
X	APPDYNAMICS_SERVICE_START=( 90 91 92 )
X	APPDYNAMICS_SERVICE_STOP=( 90 89 08 )
Xfi
X
XAPPDSERVICE=/sbin/appdservice
X
XROOTOWNER=`ls -ld $APPD_ROOT | awk '{print $3}'`
XRUNUSER=`su -s /bin/bash -c "awk -F= '/^[\t ]*user=/ {print \\$2}' $APPD_ROOT/db/db.cnf" $ROOTOWNER`
Xif [[ `id -u $RUNUSER` != "0" ]] ; then
X	if [ `expr $use_cwrapper + $use_sudo + $use_pbrun + $use_xuser` == 0 ] ; then
X		echo non-root MySQL usage requires at least one privilege escalation method
X		usage
X	fi
X	if [ `expr $use_cwrapper + $use_pbrun + $use_xuser` -gt 1 ] ; then
X		echo cwrapper, xuser and pbrun are mutually exclusive
X		usage
X	fi
Xelse
X	use_root=1
Xfi
X
XCHKCONFIG=`which chkconfig 2>/dev/null`
XUPDATE_RC_D=`which update-rc.d 2>/dev/null`
XSERVICE=`which service 2>/dev/null`
X
Xfunction require {
X	# args: executable "redhat package" "debian package" [ force|advise ] ["<reason package is required>"]
X	local errors=0
X	if ! [[  -x `which $1 2>/dev/null` ]] || [ "$4" == "force" ] ; then
X		if [[ -x `which apt-get 2>/dev/null` ]] ; then
X			if [ "$4" == "advise" ] ; then
X				echo "Package $3 not installed."
X				echo "$3 is required $5"
X				return 1
X			else
X				if ! apt-get -qq -y install $3 && [ "$4" == "force" ] ; then
X					errors=1
X				fi
X			fi
X		elif [[ -x `which yum 2>/dev/null` ]] ; then
X			if [ "$4" == "advise" ] ; then
X				echo "Package $2 not installed."
X				echo "$2 is required $5"
X				return 1
X			else
X				if ! yum --quiet -y install $2 >/dev/null && [ "$4" == "force" ] ; then
X					errors=1
X				fi
X			fi
X		fi
X		if ! [[  -x `which $1 2>/dev/null` ]] || [ "$errors" -gt 0 ] ; then
X			echo "Unable to install package containing $1"
X			return 1
X		fi
X	fi
X}
X
X#
X# install the init function and ancillary config files for service $1
X# with start priority $2 and stop priority $3
X#
Xfunction install_init {
X	local service=$1
X	local start_pri=$2
X	local stop_pri=$3
X
X	echo "installing /etc/init.d/$service"
X	cp ./$service${EXTN}.sh /etc/init.d/$service
X	chmod 0755 /etc/init.d/$service
X
X	if [ -x "$CHKCONFIG" ] ; then
X		chkconfig --add $service
X		SYS_CONFIG_DIR=/etc/sysconfig
X	elif [ -x "$UPDATE_RC_D" ] ; then
X		update-rc.d -f $service remove 
X		update-rc.d $service defaults $start_pri $stop_pri
X		SYS_CONFIG_DIR=/etc/default
X	else
X		echo "unsupported linux distribution: chkconfig or update-rc.d required"
X		exit 1
X	fi
X
X	echo "installing $SYS_CONFIG_DIR/$1"
X	if [[ -f ./$service${EXTN}.sysconfig ]] ; then
X		sed < ./$service${EXTN}.sysconfig > $SYS_CONFIG_DIR/$1 \
X			-e "/^RUNUSER=/s,=.*,=$RUNUSER," \
X			-e "/^APPD_ROOT=/s,=.*,=$APPD_ROOT," \
X			-e "/^MACHINE_AGENT_HOME=/s,=.*,=$machine_agent,"
X		chmod 644 $SYS_CONFIG_DIR/$service
X	fi
X}
X
X#
X# make sure we have xmllint, bc, and the right version of ping installed
X#
Xmissing_dependencies=0
Xrequire xmllint libxml2 libxml2-utils || ((missing_dependencies++))
Xrequire bc bc bc || ((missing_dependecies++))
Xrequire ex vim-minimal vim-tiny || ((missing_dependecies++))
Xrequire curl curl curl || ((missing_dependencies++))
Xif ! ping -q -W 1 -c 1 localhost >/dev/null ; then
X	require ping iputils iputils-ping force || ((missing_dependencies++))
Xfi
Xif [ "$missing_dependencies" -gt 0 ] ; then
X	exit 1
Xfi
X
X#
X# since our RUNUSER isn't root, we want to make it so that sudo works
X# for our selected commands.   
X# this is not a security hole, it is a controlled privilege escalation, really.
X#
Xif [[ `id -u $RUNUSER` != "0" ]] ; then
X
X	if [ $use_sudo == 1 ] ; then
X		# Clean up C / pbrun wrappers if they were previously installed
X		rm -f $APPDSERVICE 2>/dev/null
X		require sudo sudo sudo || exit 1
X		[ -d /etc/sudoers.d ] || mkdir /etc/sudoers.d && chmod 0750 /etc/sudoers.d
X		grep -Eq "^#includedir[\t ]+/etc/sudoers.d[\t ]*$" /etc/sudoers || \
X		grep -Eq "^#include[\t ]+/etc/sudoers.d/appdynamics[\t ]*$" /etc/sudoers || \
X		echo "#include /etc/sudoers.d/appdynamics" >> /etc/sudoers
X		if [ -x "$CHKCONFIG" ] ; then
X			COMMA=
X			for s in ${APPDYNAMICS_SERVICE_LIST[@]} ; do
X				CMND_ALIAS_LIST="$CMND_ALIAS_LIST $COMMA \\
X				$SERVICE $s *, \\
X				$CHKCONFIG $s on, \\
X				$CHKCONFIG $s off"
X				COMMA=","
X			done
X		elif [ -x "$UPDATE_RC_D" ] ; then
X			COMMA=
X			for s in ${APPDYNAMICS_SERVICE_LIST[@]} ; do
X				CMND_ALIAS_LIST="$CMND_ALIAS_LIST$COMMA \\
X				$SERVICE $s *, \\
X				$UPDATE_RC_D $s enable, \\
X				$UPDATE_RC_D $s disable"
X				COMMA=","
X			done
X		fi
X		cat > /etc/sudoers.d/appdynamics <<- SUDOERS
X		# allow appdynamics user to:
X		#    start, stop, and query status of appdynamics via init scripts
X		#    to enable and disable those init scripts
X		Defaults:$RUNUSER !requiretty
X		Cmnd_Alias APPD = $CMND_ALIAS_LIST
X			$RUNUSER ALL=(root) NOPASSWD: APPD
X		SUDOERS
X		chmod 0440 /etc/sudoers.d/appdynamics
X		echo "installed /etc/sudoers.d/appdynamics"
X	fi
X
X	if [ $use_cwrapper == 1 ] ; then
X		if require cc gcc gcc advise "to build $APPDSERVICE privilege escalation wrapper" ; then
X			# Clean up sudo privilege escalation if it was previously installed
X			rm -f /etc/sudoers.d/appdynamics 2>/dev/null
X			# compile wrapper, chown and chmod with setuid
X			cc -D_GNU_SOURCE -DAPPDUSER=`id -u $RUNUSER` -o $APPDSERVICE appdservice.c
X			if [ -x $APPDSERVICE ] ; then
X				chown root:root $APPDSERVICE
X				chmod 4755 $APPDSERVICE
X				echo "installed setuid root wrapper as $APPDSERVICE"
X			else
X				echo "installation of $APPDSERVICE failed"
X			fi
X		else
X			echo "Exiting..."
X			exit 1
X		fi
X	fi
X
X	if [ $use_pbrun == 1 ] ; then
X		# Clean up sudo privilege escalation if it was previously installed
X		rm -f /etc/sudoers.d/appdynamics 2>/dev/null
X		# Install the pbrun privilege escalation wrapper
X		cp appdservice-pbrun.sh $APPDSERVICE
X		chmod 755 $APPDSERVICE
X		echo "installed pbrun wrapper as $APPDSERVICE"
X	fi
X
X	if [ $use_xuser == 1 ] ; then
X		# Clean up sudo privilege escalation if it was previously installed
X		rm -f /etc/sudoers.d/appdynamics 2>/dev/null
X		# Install the xuser privilege escalation wrapper
X		cp appdservice-xuser.sh $APPDSERVICE
X		chmod 755 $APPDSERVICE
X		echo "installed xuser wrapper as $APPDSERVICE"
X	fi
X
X	if [ $use_root == 1 ] ; then
X		# Clean up sudo privilege escalation if it was previously installed
X		rm -f /etc/sudoers.d/appdynamics 2>/dev/null
X		cp appdservice-root.sh $APPDSERVICE
X		chmod 755 $APPDSERVICE
X		echo "installed root wrapper as $APPDSERVICE"
X	fi
X
X	if [[ `echo "cat //*[@port<1024]" | xmllint --shell $DOMAIN_XML | wc -l` -gt 1 ]] && \
X		! require setcap libcap libcap2-bin; then
X		echo "\
XERROR: AppDynamics is configured to bind to at least one port < 1024 as an
Xunprivileged user, but the setcap utility is not available on this host.
XAppDynamics will not run in the configuration."
X		exit 1
X	fi
Xfi
X
X#
X# install all
X#
Xi=0
Xfor s in ${APPDYNAMICS_SERVICE_LIST[@]} ; do
X	install_init $s ${APPDYNAMICS_SERVICE_START[$i]} ${APPDYNAMICS_SERVICE_STOP[$i]}
X	((i++))
Xdone
X
X#
X# ensure the machine agent directory is owned by RUNUSER
X#
Xif [ -d $machine_agent ] ; then
X	chown -R $RUNUSER $machine_agent
Xfi
END-of-install-init.sh
echo x - uninstall-init.sh
sed 's/^X//' >uninstall-init.sh << 'END-of-uninstall-init.sh'
X#!/bin/bash
X#
X# $Id: uninstall-init.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# uninstall init script
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xexport PATH=/sbin:/usr/sbin:$PATH
X
Xfunction remove {
X	if rpm -qi --quiet $1 2>/dev/null; then return; fi	# skip if rpm package installed
X
X	if [ ! -f /etc/init.d/$1 ] ; then
X		return
X	fi
X	if [[ -x `which chkconfig 2>/dev/null` ]] ; then
X		chkconfig --del $1
X		rm -f /etc/sysconfig/$1
X	elif [[ -x `which update-rc.d 2>/dev/null` ]] ; then
X		update-rc.d -f $1 remove
X		rm -f /etc/default/$1
X	else
X		echo "Failed to remove $1: chkconfig or update-rc.d required"
X		exit 1
X	fi
X
X	echo removing $1 service
X	rm -f /etc/init.d/$1
X}
X
Xremove appdcontroller
Xremove appdcontroller-db
Xremove appdynamics-machine-agent
X
Xif [ -f /sbin/appdservice ] ; then
X	echo removing appdservice wrapper
X	rm -f /sbin/appdservice
Xfi
X
Xif [ -f /etc/sudoers.d/appdynamics ] ; then
X	echo removing appdynamics specific sudoers file
X	rm -f /etc/sudoers.d/appdynamics
X
X	if grep -Eq "^#include[\t ]+/etc/sudoers.d/appdynamics[\t ]*$" /etc/sudoers ; then
X		echo removing sudoers additions
X		ex -s /etc/sudoers <<- RMAPPD
X			g/^#include[\t ][\t ]*\/etc\/sudoers.d\/appdynamics/d
X			wq
X		RMAPPD
X	fi
Xfi
END-of-uninstall-init.sh
echo x - appdservice-pbrun.sh
sed 's/^X//' >appdservice-pbrun.sh << 'END-of-appdservice-pbrun.sh'
X#!/bin/bash
X#
X# $Id: appdservice-pbrun.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# shell wrapper around pbrun for appdynamics service changes
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
XPBRUN=/usr/local/bin/pbrun
X
Xfunction usage {
X	echo usage: "$0 [appdcontroller|appdcontroller-db|appdynamics-machine-agent start|stop|status]"
X	exit 1
X}
X
Xif [ ! -x $PBRUN ] ; then
X	echo $0: pbrun not found at $PBRUN
X	exit 2
Xfi
X
Xif [ $# -ne 2 ] ; then
X	usage
Xfi
X
Xcase $1 in
X	appdcontroller|appdcontroller-db|appdynamics-machine-agent)
X		service=$1
X		;;
X	*)
X		usage
X		;;
Xesac
X
Xcase $2 in
X	start|stop|status)
X		action=$2
X		;;
X	*)
X		usage
X		;;
Xesac
X
X$PBRUN -p -b /sbin/service $service $action
Xexit 0
END-of-appdservice-pbrun.sh
echo x - appdservice-root.sh
sed 's/^X//' >appdservice-root.sh << 'END-of-appdservice-root.sh'
X#!/bin/bash
X#
X# $Id: appdservice-root.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# shell wrapper around service for service changes - designed to run as root
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xfunction usage {
X	echo usage: "$0 [appdcontroller|appdcontroller-db|appdynamics-machine-agent start|stop|status]"
X	exit 1
X}
X
Xif [ $# -ne 2 ] ; then
X	usage
Xfi
X
Xcase $1 in
X	appdcontroller|appdcontroller-db|appdynamics-machine-agent)
X		service=$1
X		;;
X	*)
X		usage
X		;;
Xesac
X
Xcase $2 in
X	start|stop|status)
X		action=$2
X		;;
X	*)
X		usage
X		;;
Xesac
X
X/sbin/service $service $action
Xexit 0
END-of-appdservice-root.sh
echo x - appdservice-xuser.sh
sed 's/^X//' >appdservice-xuser.sh << 'END-of-appdservice-xuser.sh'
X#!/bin/bash
X#
X# $Id: appdservice-xuser.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# user defined shell wrapper for appdynamics service changes
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X
Xfunction usage {
X	echo usage: "$0 [appdcontroller appdcontroller-db] [start stop status]"
X	exit 1
X}
X
Xif [ $# -ne 2 ] ; then
X	usage
Xfi
X
Xcase $1 in
X	appdcontroller|appdcontroller-db)
X		service=$1
X		;;
X	*)
X		usage
X		;;
Xesac
X
Xcase $2 in
X	start|stop|status)
X		action=$2
X		;;
X	*)
X		usage
X		;;
Xesac
X
X#
X# insert user state change handler code
X# use $service and $action
X#
Xexit 0
END-of-appdservice-xuser.sh
echo x - appdstatus.sh
sed 's/^X//' >appdstatus.sh << 'END-of-appdstatus.sh'
X#!/bin/bash
X#
X# print out the status of the appdynamics controller on this node
X#
X# $Id: appdstatus.sh 3.0 2016-06-29 12:58:56 cmayer $
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X
Xcd $(dirname $0)
X
XLOGNAME=status.log
X
X. lib/log.sh
X. lib/runuser.sh
X. lib/password.sh
X. lib/conf.sh
X. lib/sql.sh
X
XASSASSIN=$APPD_ROOT/HA/appd_assassin.pid
X
XWATCHDOG_ENABLE="$APPD_ROOT/HA/WATCHDOG_ENABLE"
XWATCHDOG_STATUS=$APPD_ROOT/logs/watchdog.status
XWATCHDOG=$APPD_ROOT/HA/appd_watchdog.pid
XAPPSERVER_DISABLE="$APPD_ROOT/HA/APPSERVER_DISABLE"
X
XDB_PID_FILE=`dbcnf_get pid-file`
XDB_DATA_DIR=`dbcnf_get datadir`
XDB_SKIP_SLAVE_START=`dbcnf_get skip-slave-start`
X
Xfunction watchdog_running {
X	if [ -f "$WATCHDOG" ] ; then
X		WATCHPID=`cat $WATCHDOG`
X		if [ ! -z "$WATCHPID" ] ; then
X			if [ -d /proc/$WATCHPID ] ; then
X				return 0
X			fi
X		fi
X	fi
X	return 1
X}
X
Xfunction assassin_running {
X	if [ -f "$ASSASSIN" ] ; then
X		ASSASSINPID=`cat $ASSASSIN`
X		if [ ! -z "$ASSASSINPID" ] ; then
X			if [ -d /proc/$ASSASSINPID ] ; then
X				return 0
X			fi
X		fi
X	fi
X	return 1
X}
X
Xfunction db_running {
X	local DB_PID=
X
X	if [ -z "$DB_PID_FILE" ] ; then
X		DB_PID_FILE="$DB_DATA_DIR/$(hostname).pid"
X	fi
X	if [ -z "$DB_PID_FILE" ] ; then
X		return 1
X	fi
X	if [ -f $DB_PID_FILE ] ; then
X		DB_PID=`cat $DB_PID_FILE`
X	fi
X	if [ -z "$DB_PID" ] ; then
X		return 1
X	fi
X	if [ -d /proc/$DB_PID ] ; then
X		return 0;
X	fi
X	return 1	
X}
X
Xfunction replication_disabled {
X	if [ -n "$DB_SKIP_SLAVE_START" ] ; then
X		return 0
X	else
X		return 1
X	fi
X}
X
X#
X# this is a check for the controller running
X# 0: controller running
X# 1: controller started
X# 2: controller process around, but domain doesn't report up
X# 3: nothing visible
X# 
Xfunction controllerrunning {
X        if pgrep -f -u $dbuser "$APPD_ROOT/jre/bin/java -jar ./../modules/admin-cli.jar" >/dev/null ; then
X                return 1
X        fi
X        if $APPD_ROOT/appserver/glassfish/bin/asadmin list-domains | \
X                grep -q "domain1 running" ; then
X                return 0
X        fi
X        if pgrep -f -u $dbuser "$APPD_ROOT/appserver/glassfish/domains/domain1" >/dev/null ; then
X                return 2
X        fi
X        return 3
X}
X
Xfunction events_running {
X	if ps -f -u $dbuser | grep "$APPD_ROOT/jre/bin/java" | grep "$APPD_ROOT/events_service" >/dev/null ; then
X		return 0
X	fi
X	return 1
X}
X
Xfunction reporting_running {
X	if pgrep -f -u $dbuser "$APPD_ROOT/reporting_service/nodejs/bin/node" >/dev/null ; then
X		return 0
X	fi
X	return 1
X}
X
Xfunction machine_agent_running {
X	if pgrep -f -u $dbuser machineagent.jar > /dev/null; then
X		return 0
X	else
X		return 1
X	fi
X}
X
Xif [ ! -f $APPD_ROOT/db/db.cnf ] ; then
X	echo appd controller not installed in $APPD_ROOT
X	exit 1
Xfi
X
Xif db_running ; then
X	controllerversion=`sql localhost "select value from global_configuration_cluster where name='schema.version'" | get value`
X	if [ ! -z "$controllerversion" ] ; then
X		echo version: $controllerversion
X	fi
X	echo -n "db running as $dbuser - "
X	if [ "`get_replication_mode localhost`" == "active" ] ; then
X		echo "active"
X	else
X		echo "passive"
X	fi
X
X	case `sql localhost "select value from global_configuration_local where name='ha.controller.type'" | get value` in
X	primary) 
X		echo primary
X		;;
X	secondary)
X		echo secondary
X		;;
X	notapplicable)
X		echo HA not installed
X		;;
X	*)
X		echo unknown HA type
X		;;
X	esac
X		
X	sql localhost "SHOW SLAVE STATUS" | awk \
X			'/Slave_IO_State/ {print}
X			/Seconds_Behind_Master/ {print} 
X			/Master_Server_Id/ {print}
X			/Master_Host/ {print}'
X	sql localhost "SHOW SLAVE STATUS" | awk '
X			/Master_SSL_Allowed/ { if ($2 == "Yes") {print "Using SSL Replication" }}'
Xelse
X	echo "db not running"
Xfi
X
Xif [ -n "`dbcnf_get skip-slave-start`" ] ; then
X	echo "replication persistently broken"
Xfi
X
Xif watchdog_running ; then
X	echo watchdog running
X	if [ -f $WATCHDOG_STATUS ] ; then
X		cat $WATCHDOG_STATUS
X	fi
Xelse
X	echo watchdog not running
Xfi
X
Xif assassin_running ; then
X	echo assassin running
Xelse
X	echo assassin not running
Xfi
X
Xcontrollerrunning
Xcase $? in
X0)
X	echo "controller running"
X	;;
X1)
X	echo "controller started - not up"
X	;;
X2)
X	echo "controller zombie"
X	;;
X*)
X	echo "controller not running"
X	;;
Xesac
X
Xevents_running
Xcase $? in
X0)
X	echo "events service running"
X	;;
X*)
X	echo "events service not running"
X	;;
Xesac
X
Xreporting_running
Xcase $? in
X0)
X	echo "reporting service running"
X	;;
X*)
X	echo "reporting service not running"
X	;;
Xesac
X
Xmachine_agent_running
Xcase $? in
X0)
X	echo "machine-agent service running"
X	;;
X*)
X	echo "machine-agent service not running"
X	;;
Xesac
X
Xexit 0 
END-of-appdstatus.sh
echo x - appdynamics-machine-agent.sh
sed 's/^X//' >appdynamics-machine-agent.sh << 'END-of-appdynamics-machine-agent.sh'
X#!/bin/bash
X#
X# $Id: appdynamics-machine-agent.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# /etc/init.d/appdynamics-machine-agent
X#
X# This file describes the machine agent service. Copy it or place it in 
X# /etc/init.d to ensure the machine agent is started as a service. 
X# If you installed the machine agent via an RPM or DEB package, it should
X# already be placed there.
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X### BEGIN INIT INFO
X# Provides:          appdynamics-machine-agent
X# Default-Start:     2 3 4 5
X# Default-Stop:      0 1 6
X# Required-Start:
X# Required-Stop:
X# Short-Description: AppDynamics Machine Agent
X# Description:       Enable AppDynamics Machine Agent service provided by daemon.
X### END INIT INFO
X
X# Setting PATH to just a few trusted directories is an **important security** requirement
XPATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xprog="appdynamics-machine-agent"
Xpidfile="/var/run/appdynamics/$prog"
Xlockfile="/var/lock/subsys/$prog"
X
X# Defaults. Do not edit these. They will be overwritten in updates.
X# Override in /etc/sysconfig/appdynamics-machine-agent
XAPPD_ROOT=/opt/AppDybnamics/Controller
XMACHINE_AGENT_HOME=/opt/appdynamics/machine-agent
XRUNUSER=root
XJAVA_OPTS=""
X
X# source script config
X[ -f /etc/sysconfig/appdynamics-machine-agent ] && . /etc/sysconfig/appdynamics-machine-agent
X[ -f /etc/default/appdynamics-machine-agent ] && . /etc/default/appdynamics-machine-agent
X
XJAVA=$APPD_ROOT/jre/bin/java
X
X# For security reasons, locally embed/include function library at HA.shar build time
X
X###################### Start of embedded file: lib/init.sh
X#!/bin/bash
X#
X# $Id: lib/init.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# init.sh
X# contains functions to change user and run processes
X# 
X# also, common code for the init scripts.
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X# RUNUSER must be defined before here
Xif [ -z "$RUNUSER" ] ; then
X	echo "RUNUSER variable must be defined in /etc/sysconfig/appdcontroller"
X	exit 1
Xfi
X
X#
X# runuser quoting is a definite PITA.  the way to stay sane is to note
X# exactly when you want $ to be expanded and make that explicit, passing
X# escaped $ signs when you want the expansion deferred
X#
X# finally, the bb_runuser function should return the pid
X#
Xif [ `id -un` == "$RUNUSER" ] ; then
X	function bg_runuser {
X		bash -c "nohup $* >/dev/null 2>&1 & echo \$!" &
X	}
X	function runuser {
X		"$@"
X	}
Xelse
X	function bg_runuser {
X		su -m -s /bin/bash -c "nohup $* >/dev/null 2>&1 & echo \$!" $RUNUSER
X	}
X	function runuser {
X		su -m -s /bin/bash -c "$*" $RUNUSER
X	}
Xfi
Xexport -f runuser bg_runuser
X
X# enable Debian systems to work also
Xfunction service {
X    if [[ -z "$service_bin" ]] ; then
X        if [[ -f /sbin/service ]] ; then
X                service_bin=/sbin/service
X        elif [[ -f /usr/sbin/service ]] ; then
X                service_bin=/usr/sbin/service
X        else
X            echo service not found in /sbin or /usr/sbin - exiting
X            exit 13
X        fi
X        $service_bin "$@"
X    else
X        $service_bin "$@"
X    fi
X}
X
Xfunction require_root {
X    if [ `id -un` != "root" ] ; then
X        echo "service changes must be run as root"
X        exit 1
X    fi
X}
X
X#
X# trivial sanity check
X#
Xfunction check_sanity {
X	if runuser [ ! -f $APPD_ROOT/db/db.cnf ] ; then
X		echo appd controller not installed in $APPD_ROOT
X		exit 1
X	fi
X	if runuser [ ! -x $APPD_ROOT/bin/controller.sh ] ; then
X		echo controller disabled on this host
X		exit 1
X	fi
X}
X
X###################### End of embedded file: lib/init.sh
X
X
Xfunction start() {
X    require_root
X
X    mkdir -p /var/run/appdynamics
X    chown $RUNUSER /var/run/appdynamics
X    mkdir -p /var/lock/subsys
X	rm -f $pidfile
X
X	pid=`bg_runuser $JAVA $JAVA_OPTS -jar $MACHINE_AGENT_HOME/machineagent.jar`
X	echo $pid > $pidfile
X    touch $lockfile
X}
X
Xfunction stop() {
X    require_root
X
X	if [ -f $pidfile ] ; then
X		pid=`cat $pidfile`
X		if [ -d /proc/$pid ] ; then
X			kill -9 $pid
X		fi
X		rm -f $pidfile
X	fi
X    rm -f $lockfile
X}
X
Xcase "$1" in
X    start)
X        start
X        ;;
X    stop)
X        stop
X        ;;
X    restart)
X        if [ -f /var/lock/subsys/$prog ] ; then
X            stop
X            # avoid race
X            sleep 3
X            start
X        fi
X        ;;
X    status)
X		if [ -f $pidfile ] ; then
X			pid=`cat $pidfile`
X			if [ -d /proc/$pid ] ; then
X				exit 0
X			fi
X			rm -f $pidfile
X		fi
X		exit 1
X        ;;
X    *)  
X        echo $"Usage: $0 {start|stop|restart|status}"
X        exit 1
Xesac
Xexit 0
END-of-appdynamics-machine-agent.sh
echo x - appdynamics-machine-agent.sysconfig
sed 's/^X//' >appdynamics-machine-agent.sysconfig << 'END-of-appdynamics-machine-agent.sysconfig'
X#
X# $Id: appdynamics-machine-agent.sysconfig 3.0.1 2016-08-08 13:40:17 cmayer $
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
XAPPD_ROOT=/opt/AppDynamics/Controller
XMACHINE_AGENT_HOME=/opt/appdynamics/machine-agent
XRUNUSER=root
XJAVA_OPTS="-Xmx512m -Xms512m -Dappdynamics.agent.nodeName=`hostname`"
END-of-appdynamics-machine-agent.sysconfig
echo x - mysqlclient.sh
sed 's/^X//' >mysqlclient.sh << 'END-of-mysqlclient.sh'
X#!/bin/bash
X#
X# $Id: mysqlclient.sh 3.0.1 2016-08-08 13:40:17 cmayer $
X#
X# trivial command that executes sql for us.  this is intended
X# to be invoked from an init script via runuser, so we can log
X# output the rows as key-value pairs
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xcd $(dirname $0)
X
XLOGNAME=mysqlclient.log
X
X# source function libraries
X. lib/log.sh
X. lib/runuser.sh
X. lib/conf.sh
X. lib/ha.sh
X. lib/password.sh
X. lib/sql.sh
X
Xif [ -t 0 ] ; then
X	$MYSQL --host=localhost "${CONNECT[@]}" controller
X	exit 0
Xfi
X
XSQL=/tmp/mysqlclient.$$.sql
XRESULT=/tmp/mysqlclient.$$.result
X
Xcat > $SQL
X$MYSQL -EB --host=localhost "${CONNECT[@]}" controller 2>> $LOGFILE 1> $RESULT < $SQL
X
Xif [ -f $APPD_ROOT/HA/LOG_SQL ] ; then
X	echo "mysqlclient: " `date` >> $LOGFILE
X	cat $SQLFILE >> $LOGFILE
X	echo "result:" >> $LOGFILE
X	cat $RESULT >> $LOGFILE
Xfi
X
Xcat $RESULT
X
Xrm -f $RESULT $SQL
END-of-mysqlclient.sh
echo x - getaccess.sh
sed 's/^X//' >getaccess.sh << 'END-of-getaccess.sh'
X#!/bin/bash
X#
X# $Id: getaccess.sh 3.0 2016-08-03 19:23:30 cmayer $
X# helper script to get the access key from an account table
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xcd $(dirname $0)
X
XAPPD_ROOT=`cd .. ; pwd -P`
Xaccount=system
Xhost=localhost
Xdbpasswd=
Xdbport=3388
Xdbuser=root
X
Xfunction usage {
X	echo "$0 [options]"
X	echo " [-c <appdynamics root dir> default: $APPD_ROOT]"
X	echo " [-a <account name>]"
X	echo " [-p <password>]"
X	echo " [-h <host>[:port]]"
X	exit 1
X}
X
Xwhile getopts :c:a:p:h: flag; do
X	case $flag in
X	c)
X		APPD_ROOT=$OPTARG
X		;;
X	a)
X		account=$OPTARG
X		;;
X	p)
X		dbpasswd=$OPTARG
X		;;
X	h)
X		host=$OPTARG
X		if echo $host | grep -s : ; then
X			host=`echo $host | awk -F: '{print $1}'`
X			dbport=`echo $host | awk -F: '{print $2}'`
X		fi
X		;;
X	*)
X		usage
X		;;	
X	esac
Xdone
X
X. lib/log.sh
X. lib/runuser.sh
X. lib/conf.sh
X. lib/password.sh
X. lib/sql.sh
X
Xsql $host "select access_key from account where name = '$account'" | get access_key
END-of-getaccess.sh
echo x - appdcontroller.sh
sed 's/^X//' >appdcontroller.sh << 'END-of-appdcontroller.sh'
X#!/bin/bash
X### BEGIN INIT INFO
X# Provides:          appdcontroller
X# Required-Start:    $remote_fs $syslog appdcontroller-db
X# Required-Stop:     $remote_fs $syslog appdcontroller-db
X# Default-Start:     2 3 4 5
X# Default-Stop:      0 1 6
X# Short-Description: AppDynamics Controller
X# Description:       This script starts and stops the AppDynamics Controller
X#                    Database, appserver, and HA components.
X### END INIT INFO
X#
X# $Id: appdcontroller.sh 3.0 2016-08-04 03:09:03 cmayer $
X# 
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# HA Aware Init file for AppDynamics Controller 
X# 
X# chkconfig: 2345 60 25 
X# description: Controller for AppDynamics
X#
X# assumes that the appdynamics controller and database run as the user 
X# specified in the db.cnf file
X#
X# edit this manually if it hasn't been automatically set by the install-init.sh
X# script
X#
X
X# Setting PATH to just a few trusted directories is an **important security** requirement
XPATH=/bin:/usr/bin:/sbin:/usr/sbin
X
XNAME=$(basename $(readlink -e $0))
X
XAPPD_ROOT=/opt/AppDynamics/Controller
XRUNUSER=root
X
X# source script config
X[ -f /etc/sysconfig/appdcontroller ] && . /etc/sysconfig/appdcontroller
X[ -f /etc/default/appdcontroller ] && . /etc/default/appdcontroller
X
XOPEN_FD_LIMIT=65536
X
XAPPD_BIN="$APPD_ROOT/bin"
Xlockfile=/var/lock/subsys/$NAME
XWATCHDOG=$APPD_ROOT/HA/appd_watchdog.pid
XASSASSIN=$APPD_ROOT/HA/appd_assassin.pid
XWATCHDOG_ENABLE="$APPD_ROOT/HA/WATCHDOG_ENABLE"
XWATCHDOG_STATUS=$APPD_ROOT/logs/watchdog.status
XAPPSERVER_DISABLE="$APPD_ROOT/HA/APPSERVER_DISABLE"
X
X# For security reasons, locally embed/include function library at HA.shar build time
X
X###################### Start of embedded file: lib/password.sh
X#!/bin/bash
X#
X# $Id: lib/password.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# passwordfunctions.sh
X# contains common code used by the HA toolkit
X#
X# policy:
X# intended to be minimalized for inclusion into the init functions
X# 
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# Collection of routines to deal with MySQL root password
X#
X
Xif [ "`uname`" == "Linux" ] ; then
X	BASE64_NO_WRAP="-w 0"
Xelse
X	BASE64_NO_WRAP=""
Xfi
X
X#
X# prerequisites - die immediately if not present
X#
Xwhich tr >& /dev/null || fatal 2 "needs \'tr\'"
Xwhich base64 >& /dev/null || fatal 3 "needs \'base64\'"
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  ofa1 <obfuscated value of input parameter>
X#
X# Call as:
X#  obf_ofa1 <data>
Xfunction obf_ofa1 {
X	local thisfn=${FUNCNAME[0]} step1 obf
X	(( $# == 1 )) || abend "Usage: $thisfn <clear_data>"
X
X	step1=$(tr '\!-~' 'P-~\!-O' < <(echo -n $1)) || exit 1
X	[[ -n "$step1" ]] || fatal 2 "produced empty step1 obfuscation"
X	obf=$(base64 $BASE64_NO_WRAP < <(echo -n $step1)) || exit 1
X	[[ -n "$obf" ]] || fatal 3 "produced empty obfuscation"
X
X	# use part of function name after last '_' as obfuscator type
X	echo "${thisfn##*_} "$obf
X}
Xexport -f obf_ofa1
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  <deobfuscated value of input parameter>\n
X# Call as:
X#  deobf_ofa1 <data>
Xfunction deobf_ofa1 {
X	local step1 clear
X	(( $# == 1 )) || abend "Usage: ${FUNCNAME[0]} <obf_data>"
X
X	step1=$(base64 --decode $BASE64_NO_WRAP < <(echo -n $1)) || exit 1
X	[[ -n "$step1" ]] || fatal 2 "produced empty step1 deobfuscation"
X	clear=$(tr '\!-~' 'P-~\!-O' < <(echo -n $step1)) || exit 1
X	[[ -n "$clear" ]] || fatal 3 "produced empty cleartext"
X
X	echo $clear
X}
Xexport deobf_ofa1
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  ofa2 <obfuscated value of input parameter>
X#
X# Call as:
X#  obf_ofa2 <data>
Xfunction obf_ofa2 {
X	local thisfn=${FUNCNAME[0]} step1 otype obf
X	(( $# == 1 )) || abend "Usage: $thisfn <clear_data>"
X
X	obf=$(tr 'A-Za-z' 'N-ZA-Mn-za-m' < <(echo -n $1)) || exit 1
X	[[ -n "$obf" ]] || fatal 2 "produced empty obfuscation"
X
X	# use part of function name after last '_' as obfuscator type
X	echo "${thisfn##*_} "$obf
X}
Xexport -f obf_ofa2
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  <deobfuscated value of input parameter>\n
X# Call as:
X#  deobf_ofa2 <data>
Xfunction deobf_ofa2 {
X	local step1 clear
X	(( $# == 1 )) || abend "Usage: ${FUNCNAME[0]} <obf_data>"
X
X	clear=$(tr 'A-Za-z' 'N-ZA-Mn-za-m' < <(echo -n $1)) || exit 1
X	[[ -n "$clear" ]] || fatal 2 "produced empty cleartext"
X
X	echo $clear
X}
Xexport -f deobf_ofa2
X
X# overall wrapper function for obfuscation 
X# Call as
X#  obfuscate <obf type> <data>
X# or
X#  obfuscate <data>
Xfunction obfuscate {
X	local data otype
X	(( $# == 1 || $# == 2 )) || abend "Usage: ${FUNCNAME[0]} [<obf type>] <data>"
X
X	if (( $# == 2 )) ; then
X		otype=$1
X		data=$2
X	else
X		otype=''
X		data=$1
X	fi
X	case $otype in
X		ofa1 | '' )	obf_ofa1 $data ;;	# default case
X		ofa2)		obf_ofa2 $data ;;
X		*)		abend "unknown obfuscation type \"$otype\"" ;;
X	esac
X}
Xexport -f obfuscate
X
X# overall wrapper for various de-obfuscator functions
X# Call as:
X#  deobfuscate <otype> <obf_data>
Xfunction deobfuscate {
X	local otype=$1 data=$2
X	(( $# == 2 )) || abend "Usage: ${FUNCNAME[0]} <obf type> <obf_data>"
X
X	case $otype in
X		ofa1)	deobf_ofa1 "$data" ;;
X		ofa2)	deobf_ofa2 "$data" ;;
X		*)	abend "unknown obfuscation type \"$otype\"" ;;
X	esac
X}
Xexport -f deobfuscate
X
X###
X# get MySQL root password in a variety of ways.
X# 1. respect MYSQL_ROOT_PASSWD if present; please pass down to sub-scripts. 
X#    Do NOT persist to disk.
X# 2. respect $APPD_ROOT/db/.rootpw if present
X# 3. respect $APPD_ROOT/db/.rootpw.obf if present
X# 4. gripe, letting them know how to persist a password
X#
X# Call as:
X#  dbpasswd=`get_mysql_passwd`
Xfunction get_mysql_passwd {
X	local clear obf otype inpw2=' '
X	local rootpw="$APPD_ROOT/db/.rootpw" rootpw_obf="$APPD_ROOT/db/.rootpw.obf"
X
X	if [[ -n "$MYSQL_ROOT_PASSWD" ]] ; then
X		echo $MYSQL_ROOT_PASSWD
X	elif [[ -s $rootpw && -r $rootpw ]] ; then 
X		echo $(<$rootpw)
X	elif [[ -s $rootpw_obf ]] ; then
X		IFS=$' ' read -r otype obf < $rootpw_obf
X		[[ -n "$otype" && -n "$obf" ]] || \
X			fatal 1 "unable to read obfuscated passwd from $rootpw_obf"
X		clear=$(deobfuscate $otype $obf)
X		[[ -n "$clear" ]] || \
X			fatal 2 "unable to deobfuscate passwd from $rootpw_obf"
X		echo $clear
X	else
X		fatal 3 "no password in db/.rootpw, db/.rootpw.obf or MYSQL_ROOT_PASSWORD"
X	fi
X}
Xexport -f get_mysql_passwd
X###################### End of embedded file: lib/password.sh
X
X
X###################### Start of embedded file: lib/init.sh
X#!/bin/bash
X#
X# $Id: lib/init.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# init.sh
X# contains functions to change user and run processes
X# 
X# also, common code for the init scripts.
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X# RUNUSER must be defined before here
Xif [ -z "$RUNUSER" ] ; then
X	echo "RUNUSER variable must be defined in /etc/sysconfig/appdcontroller"
X	exit 1
Xfi
X
X#
X# runuser quoting is a definite PITA.  the way to stay sane is to note
X# exactly when you want $ to be expanded and make that explicit, passing
X# escaped $ signs when you want the expansion deferred
X#
X# finally, the bb_runuser function should return the pid
X#
Xif [ `id -un` == "$RUNUSER" ] ; then
X	function bg_runuser {
X		bash -c "nohup $* >/dev/null 2>&1 & echo \$!" &
X	}
X	function runuser {
X		"$@"
X	}
Xelse
X	function bg_runuser {
X		su -m -s /bin/bash -c "nohup $* >/dev/null 2>&1 & echo \$!" $RUNUSER
X	}
X	function runuser {
X		su -m -s /bin/bash -c "$*" $RUNUSER
X	}
Xfi
Xexport -f runuser bg_runuser
X
X# enable Debian systems to work also
Xfunction service {
X    if [[ -z "$service_bin" ]] ; then
X        if [[ -f /sbin/service ]] ; then
X                service_bin=/sbin/service
X        elif [[ -f /usr/sbin/service ]] ; then
X                service_bin=/usr/sbin/service
X        else
X            echo service not found in /sbin or /usr/sbin - exiting
X            exit 13
X        fi
X        $service_bin "$@"
X    else
X        $service_bin "$@"
X    fi
X}
X
Xfunction require_root {
X    if [ `id -un` != "root" ] ; then
X        echo "service changes must be run as root"
X        exit 1
X    fi
X}
X
X#
X# trivial sanity check
X#
Xfunction check_sanity {
X	if runuser [ ! -f $APPD_ROOT/db/db.cnf ] ; then
X		echo appd controller not installed in $APPD_ROOT
X		exit 1
X	fi
X	if runuser [ ! -x $APPD_ROOT/bin/controller.sh ] ; then
X		echo controller disabled on this host
X		exit 1
X	fi
X}
X
X###################### End of embedded file: lib/init.sh
X
X
X###################### Start of embedded file: lib/conf.sh
X#!/bin/bash
X#
X# $Id: lib/conf.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# contains common code used to extract and set information in the
X# config files.
X#
X# there is some hair here having to do with permissions,
X# and we invoke runuser to do file access as the appropriate user
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X# filenames
X#
XDOMAIN_XML=$APPD_ROOT/appserver/glassfish/domains/domain1/config/domain.xml
XDB_CONF=$APPD_ROOT/db/db.cnf
X
X#
X# simplifies processing jvm options from domain.xml
X#
X# different types of jvm_options are settable, unsettable, and gettable
X# they are denoted by a prefix character
X# -Xmx		prefix character X
X# -XX:+foo	prefix character +|-	we can ask for either sense
X# -XX:-foo
X# -Dfoo		no prefix
X
X#
X# domain_set_jvm_option <property> [<value>]
X#
Xfunction domain_set_jvm_option {
X	local property=$1
X	local value="$2"
X	local valueset=""
X
X	case $property in
X	X*)
X		if [ -n "$value" ] ; then
X			valueset="$value"
X		fi
X		selector="-X$property"
X		setter="/appdynamics.controller.port.*\$/a<jvm-options>-$property$valueset</jvm-options>"
X		changer="s,\($property\)[=]*[^<]*,\1$valueset,"
X		;;
X	+*|-*)
X		base=${property:1}
X		selector="XX:[+-]$base"
X		setter="/appdynamics.controller.port.*\$/a<jvm-options>-XX:$property</jvm-options>"
X		changer="s,-XX:$base,-XX:$property,"
X		;;
X	*)
X		if [ -n "$value" ] ; then
X			valueset="=$value"
X		fi
X		selector=-D$property
X		setter="/appdynamics.controller.port.*\$/a<jvm-options>-D$property$valueset</jvm-options>"
X		changer="s,\(-D$property\)[=]*[^<]*,\1$valueset,"
X		;;
X	esac
X
X	if runuser xmllint --xpath '/domain/configs/config[1]/java-config/*' $DOMAIN_XML | \
X		grep -q -e "$selector" ; then
X		# if property already present
X		runuser sed -i "$changer" $DOMAIN_XML
X	else
X		# property needs to be added
X		runuser sed -i "$setter" $DOMAIN_XML
X	fi
X} 
X
X#
X# extract a specific jvm option value from a stream
X#
X# get_jvm_option <property>
X#
Xfunction get_jvm_option
X{
X	local property=$1
X
X	awk -F= "/^-XX:$property=/ { print \$2 }
X		/^-XX:\+$property/ { print \"+\" }
X		/^-XX:-$property/ { print \"-\" }
X		/^-D$property=/ { print \$2 }
X		/^-$property/ { sub(\"-$property\",\"\"); print }"
X}
X
X#
X# read a jvm_option from the domain.xml
X#
X# domain_get_jvm_option
Xfunction domain_get_jvm_option {
X	local property=$1
X
X	runuser xmllint --xpath '/domain/configs/config[1]/java-config/*' $DOMAIN_XML | \
X		sed -e 's/<[^>]*>/\n/g' -e 's/\n\n/\n/g' | \
X		get_jvm_option $property
X}
X
X#
X# function to unset a domain.xml property
X#
Xfunction domain_unset_jvm_option {
X	local property=$1
X
X	case $property in
X	X*)
X		selector="-$property"
X		;;
X	+*|-*)
X		base=${property:1}
X		selector="XX:[+-]$base"
X		;;
X	*)
X		selector=-D$property
X		;;
X	esac
X
X	runuser sed -i "/$selector/d" $DOMAIN_XML
X}
X
X# set a property into the db.cnf file
X# if the property is already there, edit it, else append it
X# if remotehost clear, do it locally
Xfunction dbcnf_set {
X	local property=$1
X	local value="$2"
X	local remotehost=$3
X	local IN=/tmp/db.cnf.in.$$
X	local OUT=/tmp/db.cnf.out.$$
X	
X	rm -f $IN $OUT
X
X	if [ -z "$remotehost" ] ; then
X		DBCNF=$DB_CONF
X		CP="cp"
X	else
X		DBCNF=$remotehost:$DB_CONF
X		CP="scp -q"
X	fi
X	runuser $CP $DBCNF $IN
X	cp $IN $OUT
X
X	if grep -q "^[[:space:]]*$property\(=\|$\)" $IN ; then
X		if ! [ -z "$value" ] ; then
X			sed -i "s,\(^[[:space:]]*$property=\).*$,\1$value," $OUT >/dev/null
X		fi
X	else
X		if [ -z "$value" ] ; then
X			echo "$property" >> $OUT
X		else
X			echo "$property=$value" >> $OUT
X		fi
X	fi
X
X	if ! cmp -s $IN $OUT ; then
X		runuser $CP $OUT $DBCNF
X	fi
X	rm -f $IN $OUT
X}
X
X#
X# remove a property setting from the db.cnf file
X#
Xfunction dbcnf_unset {
X	local property=$1
X	local remotehost=$2
X	local IN=/tmp/db.cnf.in.$$
X	local OUT=/tmp/db.cnf.out.$$
X
X	rm -f $IN $OUT
X
X	if [ -z "$remotehost" ] ; then
X		DBCNF=$DB_CONF
X		CP=cp
X	else
X		DBCNF=$remotehost:$DB_CONF
X		CP="scp -q"
X	fi
X	runuser $CP $DBCNF $IN
X	cp $IN $OUT
X
X	sed -i "/^[[:space:]]*$property\b/d" $OUT >/dev/null
X
X	if ! cmp -s $IN $OUT ; then
X		$CP $OUT $DBCNF
X	fi
X	rm -f $IN $OUT
X}
X
X#
X# read the db.cnf file and extract an attribute
X#
Xfunction dbcnf_get {
X	local property=$1
X
X	val=`runuser grep "^[[:space:]]*$property=" $DB_CONF | awk -F= '{print $2}'`
X	if [ -n "$val" ] ; then
X		echo $val
X	elif runuser grep -q "^[[:space:]]*\b$property\b" $DB_CONF ; then
X		echo $property
X	else
X		echo ""
X	fi
X}
X
X#
X# look in the domain.xml to see if any privileged ports are in use
X# return success if they are
X#
Xfunction use_privileged_ports {
X	runuser xmllint --xpath '//*[@port<1024]' $DOMAIN_XML >/dev/null 2>&1
X}
X
X#
X# scale a size by a suffix [KkMmGg] if present
X# also, add some fluff if specified
X#
X# input on stdin
Xfunction scale {
X	local fluff=1
X	if [ $# = 1 ] ; then fluff=$1 ; fi
X
X	awk "{
X		if(sub(/[Kk]/,\"\",\$1) == 1){
X			BYTES=\$1*1024
X		}
X		else if(sub(/[Mm]/,\"\",\$1)==1){
X			BYTES=\$1*1048576
X		}
X		else if(sub(/[Gg]/,\"\",\$1)==1){
X			BYTES=\$1*1073741824
X		} else {
X			gsub(/[^0-9]/,\"\",\$1)
X			BYTES=\$1
X		}
X		printf(\"%.0f\n\", BYTES * $fluff)
X		exit;
X	}"
X}
X###################### End of embedded file: lib/conf.sh
X
X
Xcheck_sanity
X
XDB_PID_FILE=`dbcnf_get pid-file`
XDB_DATA_DIR=`dbcnf_get datadir`
XDB_SKIP_SLAVE_START=`dbcnf_get skip-slave-start`
X
XMYSQLCLIENT="$APPD_ROOT/HA/mysqlclient.sh"
X
Xif [ -f $APPD_ROOT/HA/LARGE_PAGES_ENABLE ] ; then
X	ENABLE_HUGE_PAGES="true"
Xfi
X
Xfunction enable_pam_limits {
X	if [ -f /etc/pam.d/common-session ] && ! grep  -Eq "^\s*session\s+required\s+pam_limits\.so" /etc/pam.d/common-session
X		then
X		echo "session required	pam_limits.so" >> /etc/pam.d/common-session
X	elif [ -f /etc/pam.d/system-auth ] && ! grep  -Eq "^\s*session\s+required\s+pam_limits\.so" /etc/pam.d/system-auth
X		then
X		echo "session required	pam_limits.so" >> /etc/pam.d/system-auth
X	fi
X}
X
X# always make sure this gets called before any other functions that modify
X# /etc/security/limits.d/appdynamics.com, i.e. set_unlimited_memlock
Xfunction set_open_fd_limits {
X	if [ "$RUNUSER" == "root" ] && [[ `ulimit -S -n` -lt $OPEN_FD_LIMIT ]]
X		then
X		ulimit -n $OPEN_FD_LIMIT
X	elif [[ `su -s /bin/bash -c "ulimit -S -n" $RUNUSER` -lt "$OPEN_FD_LIMIT" ]]
X		then
X		echo "$RUNUSER  soft  nofile $OPEN_FD_LIMIT" > /etc/security/limits.d/appdynamics.conf
X		echo "$RUNUSER  hard  nofile $OPEN_FD_LIMIT" >> /etc/security/limits.d/appdynamics.conf
X		enable_pam_limits
X	fi
X}
X
Xfunction set_unlimited_memlock {
X	if [ "$ENABLE_HUGE_PAGES" == "true" ] ; then
X		if [[ $RUNUSER == "root" ]]
X			then
X			ulimit -l unlimited
X		else
X			if [[ $(su -s /bin/bash -c "ulimit -l" $RUNUSER) != "unlimited" ]]
X				then
X				echo "$RUNUSER  soft  memlock  unlimited" >> /etc/security/limits.d/appdynamics.conf
X				echo "$RUNUSER  hard  memlock  unlimited" >> /etc/security/limits.d/appdynamics.conf
X				enable_pam_limits
X			fi
X		fi
X	fi
X}
X
Xfunction watchdog_running {
X	if runuser [ -f "$WATCHDOG" ] ; then
X		WATCHPID=`runuser cat $WATCHDOG`
X		if [ ! -z "$WATCHPID" ] ; then
X			if [ -d /proc/$WATCHPID ] ; then
X				return 0
X			fi
X		fi
X	fi
X	return 1
X}
X
Xfunction assassin_running {
X	if runuser [ -f "$ASSASSIN" ] ; then
X		ASSASSINPID=`runuser cat $ASSASSIN`
X		if [ ! -z "$ASSASSINPID" ] ; then
X			if [ -d /proc/$ASSASSINPID ] ; then
X				return 0
X			fi
X		fi
X	fi
X	return 1
X}
X
Xfunction db_running {
X	local DB_PID=
X
X	if [ -z "$DB_PID_FILE" ] ; then
X		DB_PID_FILE="$DB_DATA_DIR/$(hostname).pid"
X	fi
X	if [ -z "$DB_PID_FILE" ] ; then
X		return 1
X	fi
X	if runuser [ -f $DB_PID_FILE ] ; then
X		DB_PID=`runuser cat $DB_PID_FILE`
X	fi
X	if [ -z "$DB_PID" ] ; then
X		return 1
X	fi
X	if [ -d /proc/$DB_PID ] ; then
X		return 0;
X	fi
X	return 1	
X}
X
Xfunction replication_disabled {
X
X	if [ -n "$DB_SKIP_SLAVE_START" ] ; then
X		return 0
X	else
X		return 1
X	fi
X}
X
Xfunction get {
X	local key
X	awk "/$key:/ {print \$2}"
X}
X
Xfunction controller_mode {
X	echo "select value from global_configuration_local \
X		where name='appserver.mode'" | runuser $MYSQLCLIENT | get value
X}
X
X#
X# this is a check for the controller running
X# 0: controller running
X# 1: controller started
X# 2: controller process around, but domain doesn't report up
X# 3: nothing visible
X# 
Xfunction controllerrunning {
X	if pgrep -f -u $RUNUSER "$APPD_ROOT/jre/bin/java -jar ./../modules/admin-cli.jar" >/dev/null ; then
X		return 1
X	fi
X	if runuser $APPD_ROOT/appserver/glassfish/bin/asadmin list-domains | \
X		grep -q "domain1 running" ; then
X		return 0
X	fi
X	if pgrep -f -u $RUNUSER "$APPD_ROOT/appserver/glassfish/domains/domain1" >/dev/null ; then
X		return 2
X	fi
X	return 3
X}
X
Xfunction events_running {
X	if ps -f -u $RUNUSER | grep "$APPD_ROOT/jre/bin/java" | grep "$APPD_ROOT/events_service" >/dev/null ; then
X		return 0
X	fi
X	return 1
X}
X
Xfunction reporting_running {
X	if pgrep -f -u $RUNUSER "$APPD_ROOT/reporting_service/nodejs/bin/node" >/dev/null ; then
X		return 0
X	fi
X	return 1
X}
X
Xfunction machine_agent_running {
X	if service appdynamics-machine-agent status &> /dev/null; then
X		return 0
X	else
X		return 1
X	fi
X}
X
Xcase "$1" in
Xstart)  
X	require_root
X	if runuser [ -f $APPSERVER_DISABLE ] ; then
X		echo appdcontroller disabled - incomplete replica:w
X		exit 1
X	fi
X	service appdcontroller-db start
X	set_open_fd_limits
X	set_unlimited_memlock
X	if [[ `id -u $RUNUSER` != "0" ]] && use_privileged_ports ; then
X		#trying to bind java to a privilged port as an unpriviliged user
X		setcap cap_net_bind_service=+ep $APPD_ROOT/jre/bin/java
X		echo "$APPD_ROOT/jre/lib/$(uname -m | sed -e 's/x86_64/amd64/')/jli" > \
X			/etc/ld.so.conf.d/appdynamics.conf
X		ldconfig            
X	fi
X	if [ "`controller_mode`" == "active" ] ; then
X		bg_runuser $APPD_BIN/controller.sh start-appserver >/dev/null
X		if replication_disabled ; then
X			if assassin_running ; then
X				echo assassin already running
X			else
X				echo starting assassin 
X				bg_runuser $APPD_ROOT/HA/assassin.sh
X			fi
X		fi
X		if runuser [ -d $APPD_ROOT/events_service ] ; then
X			bg_runuser $APPD_BIN/controller.sh start-events-service >/dev/null
X		fi
X		if runuser [ -d $APPD_ROOT/reporting_service ] ; then
X			bg_runuser $APPD_BIN/controller.sh start-reporting-service >/dev/null
X		fi
X	else
X		if replication_disabled ; then
X			echo passive node - appd replication disabled
X			exit 1
X		fi
X		echo skipping appserver start - HA passive
X		if runuser [ -f $WATCHDOG_ENABLE ] ; then
X			if watchdog_running ; then
X				echo appd watchdog already running 
X			else
X				echo starting appd watchdog
X				bg_runuser $APPD_ROOT/HA/watchdog.sh >/dev/null
X			fi
X		else
X			echo watchdog disabled
X		fi
X	fi
X	rm -f $lockfile	
X	touch $lockfile	
X;;  
X  
Xstop)
X	require_root
X	if watchdog_running ; then
X		kill -9 $WATCHPID && ( echo appd watchdog killed; \
X		runuser "echo `date` appd watchdog killed >> $APPD_ROOT/logs/watchdog.log" )
X	fi
X	runuser rm -f $WATCHDOG
X	if assassin_running ; then
X		kill -9 $ASSASSINPID && ( echo appd assassin killed; \
X		runuser "echo `date` appd assassin killed >> $APPD_ROOT/logs/assassin.log" )		
X	fi
X	runuser rm -f $ASSASSIN
X	# TODO: stop automatically starting and stopping the local events service since
X	#   an HA controller pair should be talking to a separate events service cluster.
X	if runuser [ -d $APPD_ROOT/events_service ] ; then
X		runuser $APPD_BIN/controller.sh stop-events-service
X	fi
X	if runuser [ -d $APPD_ROOT/reporting_service ] ; then
X		runuser $APPD_BIN/controller.sh stop-reporting-service
X	fi
X	# The default controller shutdown timeout is 45 minutes 
X	# That is a long time to be stuck with a hung appserver on the way down.
X	# Thankfully, we can set an environment variable to override that:
X	export AD_SHUTDOWN_TIMEOUT_IN_MIN=10
X    runuser $APPD_BIN/controller.sh stop-appserver
X	controllerrunning
X	if [ $? -lt 3 ] ; then
X		echo "forcibly killing appserver"
X		pkill -9 -f "$APPD_ROOT/appserver/glassfish/domains/domain1"
X		echo "truncate ejb__timer__tbl;" | runuser $MYSQLCLIENT 
X	fi
X
X	if [ -e $APPD_ROOT/logs/server.log.lck ] ; then
X		runuser rm -f $APPD_ROOT/logs/server.log.lck
X	fi
X	rm -f $lockfile
X;;
X
Xrestart)  
X	$0 stop  
X	$0 start  
X;;  
X  
Xstatus)  
X	retcode=0
X	service appdcontroller-db status
X	if watchdog_running ; then
X		echo watchdog running
X		if [ -f $WATCHDOG_STATUS ] ; then
X			cat $WATCHDOG_STATUS
X		fi
X	else
X		echo watchdog not running
X	fi
X	if assassin_running ; then
X		echo assassin running
X	else
X		echo assassin not running
X	fi
X	controllerrunning
X	case $? in
X	0)
X		echo "controller running"
X		;;
X	1)
X		echo "controller started - not up"
X		retcode=1
X		;;
X	*)
X		echo "controller not running"
X		retcode=1
X		;;
X	esac
X	events_running
X	case $? in
X	0)
X		echo "events service running"
X		;;
X	*)
X		echo "events service not running"
X		;;
X	esac
X	reporting_running
X	case $? in
X	0)
X		echo "reporting service running"
X		;;
X	*)
X		echo "reporting service not running"
X		;;
X	esac
X	machine_agent_running
X	case $? in
X	0)
X		echo "machine-agent service running"
X		;;
X	*)
X		echo "machine-agent service not running"
X		;;
X	esac
X	exit $retcode
X;;
X
X*)  
X        echo "Usage: $0 {start|stop|restart|status}"  
X        exit 1  
Xesac
Xexit 0 
END-of-appdcontroller.sh
echo x - appdcontroller-db.sh
sed 's/^X//' >appdcontroller-db.sh << 'END-of-appdcontroller-db.sh'
X#!/bin/bash
X### BEGIN INIT INFO
X# Provides:          appdcontroller-db
X# Required-Start:    $remote_fs $syslog
X# Required-Stop:     $remote_fs $syslog
X# Should-Start:      zfs
X# Should-Stop:       zfs
X# Default-Start:     2 3 4 5
X# Default-Stop:      0 1 6
X# Short-Description: AppDynamics Controller
X# Description:       This script starts and stops the AppDynamics Controller
X#                    Database, appserver, and HA components.
X### END INIT INFO
X#
X# $Id: appdcontroller-db.sh 3.0 2016-08-04 03:09:03 cmayer $
X# 
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# HA Aware Init file for AppDynamics Controller 
X# 
X# chkconfig: 2345 60 25 
X# description: Controller for AppDynamics
X#
X# assumes that the appdynamics controller and database run as the user 
X# specified in the db.cnf file
X#
X# edit this manually if it hasn't been automatically set by the install-init.sh
X# script
X#
X# Setting PATH to just a few trusted directories is an **important security** requirement
XPATH=/bin:/usr/bin:/sbin:/usr/sbin
X
XNAME=$(basename $(readlink -e $0))
X
XAPPD_ROOT=/opt/AppDynamics/Controller
XRUNUSER=root
X
X# source script config
X[ -f /etc/sysconfig/appdcontroller-db ] && . /etc/sysconfig/appdcontroller-db
X[ -f /etc/default/appdcontroller-db ] && . /etc/default/appdcontroller-db
X
XAPPD_BIN="$APPD_ROOT/bin"
XDOMAIN_XML=$APPD_ROOT/appserver/glassfish/domains/domain1/config/domain.xml
XEVENTS_VMOPTIONS_FILE=$APPD_ROOT/events_service/conf/events-service.vmoptions
X[[ -r $EVENTS_VMOPTIONS_FILE ]] || EVENTS_VMOPTIONS_FILE=$APPD_ROOT/events_service/analytics-processor/conf/analytics-processor.vmoptions
X
X# For security reasons, locally embed/include function library at HA.shar build time
X
X###################### Start of embedded file: lib/password.sh
X#!/bin/bash
X#
X# $Id: lib/password.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# passwordfunctions.sh
X# contains common code used by the HA toolkit
X#
X# policy:
X# intended to be minimalized for inclusion into the init functions
X# 
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# Collection of routines to deal with MySQL root password
X#
X
Xif [ "`uname`" == "Linux" ] ; then
X	BASE64_NO_WRAP="-w 0"
Xelse
X	BASE64_NO_WRAP=""
Xfi
X
X#
X# prerequisites - die immediately if not present
X#
Xwhich tr >& /dev/null || fatal 2 "needs \'tr\'"
Xwhich base64 >& /dev/null || fatal 3 "needs \'base64\'"
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  ofa1 <obfuscated value of input parameter>
X#
X# Call as:
X#  obf_ofa1 <data>
Xfunction obf_ofa1 {
X	local thisfn=${FUNCNAME[0]} step1 obf
X	(( $# == 1 )) || abend "Usage: $thisfn <clear_data>"
X
X	step1=$(tr '\!-~' 'P-~\!-O' < <(echo -n $1)) || exit 1
X	[[ -n "$step1" ]] || fatal 2 "produced empty step1 obfuscation"
X	obf=$(base64 $BASE64_NO_WRAP < <(echo -n $step1)) || exit 1
X	[[ -n "$obf" ]] || fatal 3 "produced empty obfuscation"
X
X	# use part of function name after last '_' as obfuscator type
X	echo "${thisfn##*_} "$obf
X}
Xexport -f obf_ofa1
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  <deobfuscated value of input parameter>\n
X# Call as:
X#  deobf_ofa1 <data>
Xfunction deobf_ofa1 {
X	local step1 clear
X	(( $# == 1 )) || abend "Usage: ${FUNCNAME[0]} <obf_data>"
X
X	step1=$(base64 --decode $BASE64_NO_WRAP < <(echo -n $1)) || exit 1
X	[[ -n "$step1" ]] || fatal 2 "produced empty step1 deobfuscation"
X	clear=$(tr '\!-~' 'P-~\!-O' < <(echo -n $step1)) || exit 1
X	[[ -n "$clear" ]] || fatal 3 "produced empty cleartext"
X
X	echo $clear
X}
Xexport deobf_ofa1
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  ofa2 <obfuscated value of input parameter>
X#
X# Call as:
X#  obf_ofa2 <data>
Xfunction obf_ofa2 {
X	local thisfn=${FUNCNAME[0]} step1 otype obf
X	(( $# == 1 )) || abend "Usage: $thisfn <clear_data>"
X
X	obf=$(tr 'A-Za-z' 'N-ZA-Mn-za-m' < <(echo -n $1)) || exit 1
X	[[ -n "$obf" ]] || fatal 2 "produced empty obfuscation"
X
X	# use part of function name after last '_' as obfuscator type
X	echo "${thisfn##*_} "$obf
X}
Xexport -f obf_ofa2
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  <deobfuscated value of input parameter>\n
X# Call as:
X#  deobf_ofa2 <data>
Xfunction deobf_ofa2 {
X	local step1 clear
X	(( $# == 1 )) || abend "Usage: ${FUNCNAME[0]} <obf_data>"
X
X	clear=$(tr 'A-Za-z' 'N-ZA-Mn-za-m' < <(echo -n $1)) || exit 1
X	[[ -n "$clear" ]] || fatal 2 "produced empty cleartext"
X
X	echo $clear
X}
Xexport -f deobf_ofa2
X
X# overall wrapper function for obfuscation 
X# Call as
X#  obfuscate <obf type> <data>
X# or
X#  obfuscate <data>
Xfunction obfuscate {
X	local data otype
X	(( $# == 1 || $# == 2 )) || abend "Usage: ${FUNCNAME[0]} [<obf type>] <data>"
X
X	if (( $# == 2 )) ; then
X		otype=$1
X		data=$2
X	else
X		otype=''
X		data=$1
X	fi
X	case $otype in
X		ofa1 | '' )	obf_ofa1 $data ;;	# default case
X		ofa2)		obf_ofa2 $data ;;
X		*)		abend "unknown obfuscation type \"$otype\"" ;;
X	esac
X}
Xexport -f obfuscate
X
X# overall wrapper for various de-obfuscator functions
X# Call as:
X#  deobfuscate <otype> <obf_data>
Xfunction deobfuscate {
X	local otype=$1 data=$2
X	(( $# == 2 )) || abend "Usage: ${FUNCNAME[0]} <obf type> <obf_data>"
X
X	case $otype in
X		ofa1)	deobf_ofa1 "$data" ;;
X		ofa2)	deobf_ofa2 "$data" ;;
X		*)	abend "unknown obfuscation type \"$otype\"" ;;
X	esac
X}
Xexport -f deobfuscate
X
X###
X# get MySQL root password in a variety of ways.
X# 1. respect MYSQL_ROOT_PASSWD if present; please pass down to sub-scripts. 
X#    Do NOT persist to disk.
X# 2. respect $APPD_ROOT/db/.rootpw if present
X# 3. respect $APPD_ROOT/db/.rootpw.obf if present
X# 4. gripe, letting them know how to persist a password
X#
X# Call as:
X#  dbpasswd=`get_mysql_passwd`
Xfunction get_mysql_passwd {
X	local clear obf otype inpw2=' '
X	local rootpw="$APPD_ROOT/db/.rootpw" rootpw_obf="$APPD_ROOT/db/.rootpw.obf"
X
X	if [[ -n "$MYSQL_ROOT_PASSWD" ]] ; then
X		echo $MYSQL_ROOT_PASSWD
X	elif [[ -s $rootpw && -r $rootpw ]] ; then 
X		echo $(<$rootpw)
X	elif [[ -s $rootpw_obf ]] ; then
X		IFS=$' ' read -r otype obf < $rootpw_obf
X		[[ -n "$otype" && -n "$obf" ]] || \
X			fatal 1 "unable to read obfuscated passwd from $rootpw_obf"
X		clear=$(deobfuscate $otype $obf)
X		[[ -n "$clear" ]] || \
X			fatal 2 "unable to deobfuscate passwd from $rootpw_obf"
X		echo $clear
X	else
X		fatal 3 "no password in db/.rootpw, db/.rootpw.obf or MYSQL_ROOT_PASSWORD"
X	fi
X}
Xexport -f get_mysql_passwd
X###################### End of embedded file: lib/password.sh
X
X
X###################### Start of embedded file: lib/init.sh
X#!/bin/bash
X#
X# $Id: lib/init.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# init.sh
X# contains functions to change user and run processes
X# 
X# also, common code for the init scripts.
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X# RUNUSER must be defined before here
Xif [ -z "$RUNUSER" ] ; then
X	echo "RUNUSER variable must be defined in /etc/sysconfig/appdcontroller"
X	exit 1
Xfi
X
X#
X# runuser quoting is a definite PITA.  the way to stay sane is to note
X# exactly when you want $ to be expanded and make that explicit, passing
X# escaped $ signs when you want the expansion deferred
X#
X# finally, the bb_runuser function should return the pid
X#
Xif [ `id -un` == "$RUNUSER" ] ; then
X	function bg_runuser {
X		bash -c "nohup $* >/dev/null 2>&1 & echo \$!" &
X	}
X	function runuser {
X		"$@"
X	}
Xelse
X	function bg_runuser {
X		su -m -s /bin/bash -c "nohup $* >/dev/null 2>&1 & echo \$!" $RUNUSER
X	}
X	function runuser {
X		su -m -s /bin/bash -c "$*" $RUNUSER
X	}
Xfi
Xexport -f runuser bg_runuser
X
X# enable Debian systems to work also
Xfunction service {
X    if [[ -z "$service_bin" ]] ; then
X        if [[ -f /sbin/service ]] ; then
X                service_bin=/sbin/service
X        elif [[ -f /usr/sbin/service ]] ; then
X                service_bin=/usr/sbin/service
X        else
X            echo service not found in /sbin or /usr/sbin - exiting
X            exit 13
X        fi
X        $service_bin "$@"
X    else
X        $service_bin "$@"
X    fi
X}
X
Xfunction require_root {
X    if [ `id -un` != "root" ] ; then
X        echo "service changes must be run as root"
X        exit 1
X    fi
X}
X
X#
X# trivial sanity check
X#
Xfunction check_sanity {
X	if runuser [ ! -f $APPD_ROOT/db/db.cnf ] ; then
X		echo appd controller not installed in $APPD_ROOT
X		exit 1
X	fi
X	if runuser [ ! -x $APPD_ROOT/bin/controller.sh ] ; then
X		echo controller disabled on this host
X		exit 1
X	fi
X}
X
X###################### End of embedded file: lib/init.sh
X
X
X###################### Start of embedded file: lib/conf.sh
X#!/bin/bash
X#
X# $Id: lib/conf.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# contains common code used to extract and set information in the
X# config files.
X#
X# there is some hair here having to do with permissions,
X# and we invoke runuser to do file access as the appropriate user
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X# filenames
X#
XDOMAIN_XML=$APPD_ROOT/appserver/glassfish/domains/domain1/config/domain.xml
XDB_CONF=$APPD_ROOT/db/db.cnf
X
X#
X# simplifies processing jvm options from domain.xml
X#
X# different types of jvm_options are settable, unsettable, and gettable
X# they are denoted by a prefix character
X# -Xmx		prefix character X
X# -XX:+foo	prefix character +|-	we can ask for either sense
X# -XX:-foo
X# -Dfoo		no prefix
X
X#
X# domain_set_jvm_option <property> [<value>]
X#
Xfunction domain_set_jvm_option {
X	local property=$1
X	local value="$2"
X	local valueset=""
X
X	case $property in
X	X*)
X		if [ -n "$value" ] ; then
X			valueset="$value"
X		fi
X		selector="-X$property"
X		setter="/appdynamics.controller.port.*\$/a<jvm-options>-$property$valueset</jvm-options>"
X		changer="s,\($property\)[=]*[^<]*,\1$valueset,"
X		;;
X	+*|-*)
X		base=${property:1}
X		selector="XX:[+-]$base"
X		setter="/appdynamics.controller.port.*\$/a<jvm-options>-XX:$property</jvm-options>"
X		changer="s,-XX:$base,-XX:$property,"
X		;;
X	*)
X		if [ -n "$value" ] ; then
X			valueset="=$value"
X		fi
X		selector=-D$property
X		setter="/appdynamics.controller.port.*\$/a<jvm-options>-D$property$valueset</jvm-options>"
X		changer="s,\(-D$property\)[=]*[^<]*,\1$valueset,"
X		;;
X	esac
X
X	if runuser xmllint --xpath '/domain/configs/config[1]/java-config/*' $DOMAIN_XML | \
X		grep -q -e "$selector" ; then
X		# if property already present
X		runuser sed -i "$changer" $DOMAIN_XML
X	else
X		# property needs to be added
X		runuser sed -i "$setter" $DOMAIN_XML
X	fi
X} 
X
X#
X# extract a specific jvm option value from a stream
X#
X# get_jvm_option <property>
X#
Xfunction get_jvm_option
X{
X	local property=$1
X
X	awk -F= "/^-XX:$property=/ { print \$2 }
X		/^-XX:\+$property/ { print \"+\" }
X		/^-XX:-$property/ { print \"-\" }
X		/^-D$property=/ { print \$2 }
X		/^-$property/ { sub(\"-$property\",\"\"); print }"
X}
X
X#
X# read a jvm_option from the domain.xml
X#
X# domain_get_jvm_option
Xfunction domain_get_jvm_option {
X	local property=$1
X
X	runuser xmllint --xpath '/domain/configs/config[1]/java-config/*' $DOMAIN_XML | \
X		sed -e 's/<[^>]*>/\n/g' -e 's/\n\n/\n/g' | \
X		get_jvm_option $property
X}
X
X#
X# function to unset a domain.xml property
X#
Xfunction domain_unset_jvm_option {
X	local property=$1
X
X	case $property in
X	X*)
X		selector="-$property"
X		;;
X	+*|-*)
X		base=${property:1}
X		selector="XX:[+-]$base"
X		;;
X	*)
X		selector=-D$property
X		;;
X	esac
X
X	runuser sed -i "/$selector/d" $DOMAIN_XML
X}
X
X# set a property into the db.cnf file
X# if the property is already there, edit it, else append it
X# if remotehost clear, do it locally
Xfunction dbcnf_set {
X	local property=$1
X	local value="$2"
X	local remotehost=$3
X	local IN=/tmp/db.cnf.in.$$
X	local OUT=/tmp/db.cnf.out.$$
X	
X	rm -f $IN $OUT
X
X	if [ -z "$remotehost" ] ; then
X		DBCNF=$DB_CONF
X		CP="cp"
X	else
X		DBCNF=$remotehost:$DB_CONF
X		CP="scp -q"
X	fi
X	runuser $CP $DBCNF $IN
X	cp $IN $OUT
X
X	if grep -q "^[[:space:]]*$property\(=\|$\)" $IN ; then
X		if ! [ -z "$value" ] ; then
X			sed -i "s,\(^[[:space:]]*$property=\).*$,\1$value," $OUT >/dev/null
X		fi
X	else
X		if [ -z "$value" ] ; then
X			echo "$property" >> $OUT
X		else
X			echo "$property=$value" >> $OUT
X		fi
X	fi
X
X	if ! cmp -s $IN $OUT ; then
X		runuser $CP $OUT $DBCNF
X	fi
X	rm -f $IN $OUT
X}
X
X#
X# remove a property setting from the db.cnf file
X#
Xfunction dbcnf_unset {
X	local property=$1
X	local remotehost=$2
X	local IN=/tmp/db.cnf.in.$$
X	local OUT=/tmp/db.cnf.out.$$
X
X	rm -f $IN $OUT
X
X	if [ -z "$remotehost" ] ; then
X		DBCNF=$DB_CONF
X		CP=cp
X	else
X		DBCNF=$remotehost:$DB_CONF
X		CP="scp -q"
X	fi
X	runuser $CP $DBCNF $IN
X	cp $IN $OUT
X
X	sed -i "/^[[:space:]]*$property\b/d" $OUT >/dev/null
X
X	if ! cmp -s $IN $OUT ; then
X		$CP $OUT $DBCNF
X	fi
X	rm -f $IN $OUT
X}
X
X#
X# read the db.cnf file and extract an attribute
X#
Xfunction dbcnf_get {
X	local property=$1
X
X	val=`runuser grep "^[[:space:]]*$property=" $DB_CONF | awk -F= '{print $2}'`
X	if [ -n "$val" ] ; then
X		echo $val
X	elif runuser grep -q "^[[:space:]]*\b$property\b" $DB_CONF ; then
X		echo $property
X	else
X		echo ""
X	fi
X}
X
X#
X# look in the domain.xml to see if any privileged ports are in use
X# return success if they are
X#
Xfunction use_privileged_ports {
X	runuser xmllint --xpath '//*[@port<1024]' $DOMAIN_XML >/dev/null 2>&1
X}
X
X#
X# scale a size by a suffix [KkMmGg] if present
X# also, add some fluff if specified
X#
X# input on stdin
Xfunction scale {
X	local fluff=1
X	if [ $# = 1 ] ; then fluff=$1 ; fi
X
X	awk "{
X		if(sub(/[Kk]/,\"\",\$1) == 1){
X			BYTES=\$1*1024
X		}
X		else if(sub(/[Mm]/,\"\",\$1)==1){
X			BYTES=\$1*1048576
X		}
X		else if(sub(/[Gg]/,\"\",\$1)==1){
X			BYTES=\$1*1073741824
X		} else {
X			gsub(/[^0-9]/,\"\",\$1)
X			BYTES=\$1
X		}
X		printf(\"%.0f\n\", BYTES * $fluff)
X		exit;
X	}"
X}
X###################### End of embedded file: lib/conf.sh
X
X
Xcheck_sanity
X
XDB_PID_FILE=`dbcnf_get pid-file`
XDB_DATA_DIR=`dbcnf_get datadir`
XDB_SKIP_SLAVE_START=`dbcnf_get skip-slave-start`
X
XMYSQLCLIENT="$APPD_ROOT/HA/mysqlclient.sh"
X
Xif runuser [ ! -f $APPD_ROOT/db/db.cnf ] ; then
X	echo appd controller not installed in $APPD_ROOT
X	exit 1
Xfi
X
XOPEN_FD_LIMIT=`dbcnf_get open_files_limit`
Xif [ "$OPEN_FD_LIMIT" -lt 65536 ]; then
X	OPEN_FD_LIMIT=65536
Xfi
X
X#
X# Create (touch) a file called LARGE_PAGES_ENABLE in $APPD_ROOT/HA
X# to enable explicit huge pages support for mysqld and java.
X#
X# If other programs on this system are also using huge pages,
X# Please add the appdynamics runtime user to the group specified by
X# /proc/sys/vm/hugetlb_shm_group
X#
X# If AppDynamics is the only application on this host using huge pages,
X# /proc/sys/vm/hugetlb_shm_group will be updated automatically.
X# See https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt
X# for more information.
X#
XENABLE_HUGE_PAGES="false"
XHUGE_PAGE_SIZE_BYTES=`awk '/Hugepagesize:/{print $2*1024}' /proc/meminfo`
X
Xif [ -f $APPD_ROOT/HA/LARGE_PAGES_ENABLE ] ; then
X	ENABLE_HUGE_PAGES="true"
Xfi
X
Xlockfile=/var/lock/subsys/$NAME
X[ -d /var/lock/subsys ] || mkdir /var/lock/subsys
X
X
Xfunction enable_pam_limits {
X	if [ -f /etc/pam.d/common-session ] && \
X		! grep  -Eq "^[\t ]*session[\t ]+required[\t ]+pam_limits\.so" /etc/pam.d/common-session ; then
X		echo "session required	pam_limits.so" >> /etc/pam.d/common-session
X	elif [ -f /etc/pam.d/system-auth ] && \
X		! grep  -Eq "^[\t ]*session[\t ]+required[\t ]+pam_limits\.so" /etc/pam.d/system-auth ; then
X		echo "session required	pam_limits.so" >> /etc/pam.d/system-auth
X	fi
X}
X
X# always make sure this gets called before any other functions that modify
X# /etc/security/limits.d/appdynamics.com, i.e. reserve_memory
Xfunction set_open_fd_limits {
X	if [ "$RUNUSER" == "root" ] && [[ `ulimit -S -n` -lt $OPEN_FD_LIMIT ]]
X		then
X		ulimit -n $OPEN_FD_LIMIT
X	elif [[ `su -s /bin/bash -c "ulimit -S -n" $RUNUSER` -lt "$OPEN_FD_LIMIT" ]]
X		then
X		echo "$RUNUSER  soft  nofile $OPEN_FD_LIMIT" > /etc/security/limits.d/appdynamics.conf
X		echo "$RUNUSER  hard  nofile $OPEN_FD_LIMIT" >> /etc/security/limits.d/appdynamics.conf
X		enable_pam_limits
X	fi
X}
X
Xfunction db_running {
X	if [ -z "$DB_PID_FILE" ] ; then
X		DB_PID_FILE="$DB_DATA_DIR/$(hostname).pid"
X	fi
X	if [ -z "$DB_PID_FILE" ] ; then
X		return 1
X	fi
X	DB_PID=`runuser cat $DB_PID_FILE 2>/dev/null`
X	if [ -z "$DB_PID" ] ; then
X		return 1
X	fi
X	if [ -d /proc/$DB_PID ] ; then
X		return 0;
X	fi
X	return 1	
X}
X
Xfunction get {
X	local key=$1
X	awk "/$key:/ {print \$2}"
X}
X
Xfunction controller_mode {
X	echo select value from global_configuration_local \
X			where "name='appserver.mode'" | runuser $MYSQLCLIENT | get value
X}
X
Xfunction host_crash {
X	local lockfile_age=$(($(date +%s)-$(ls -l --time-style=+%s $lockfile | cut -d \  -f 6)))
X	local uptime=$(printf '%.0f\n' $(cat /proc/uptime | cut -d \  -f 1))
X	[ "$lockfile_age" -gt "$uptime" ]
X}
X
Xfunction calculate_memory {
X	# multiply by 1.05 and round to account for extra 2% allocation overhead +
X	#  headroom
X	CONTROLLER_HEAP=`domain_get_jvm_option Xmx | scale 1.04`
X		
X	#Parse controller JVM OPTIONS to get MaxPermSize
X	CONTROLLER_MAXPERMSIZE=`domain_get_jvm_option MaxPermSize | scale`
X
X	# multiplying by 1.1 and rounding in awk to account for the extra
X	# memory MySQL allocates arround the InnoDB buffer pool.
X	INNODB_BUFFER_POOL=`dbcnf_get innodb_buffer_pool_size | scale 1.1`
X	INNODB_ADDITIONAL_MEM=`dbcnf_get innodb_additional_mem_pool_size | scale`
X	
X	# multiply by 1.05 and round to account for extra 2% allocation overhead +
X	#  headroom
X	EVENTS_HEAP=`runuser \
X		awk -F= "'/^\s*EVENTS_HEAP_SETTINGS=/{ print \$2 }'" \
X			$APPD_ROOT/bin/controller.sh | \
X		sed -e 's/ /\n/g' | get_jvm_option Xmx | scale 1.05`
X	
X	if [ -z "$EVENTS_HEAP" ] ; then
X		EVENTS_HEAP=`runuser cat $EVENTS_VMOPTIONS_FILE \
X			| get_jvm_option Xmx | scale 1.05`
X	fi
X
X	if [ -z "$EVENTS_HEAP" ] ; then
X		EVENTS_HEAP=0
X	fi
X		
X	# Parse events service JVM options for MaxPermSize.  
X	# Default to 64M if not set
X	EVENTS_MAXPERMSIZE=`runuser cat $EVENTS_VMOPTIONS_FILE | \
X		get_jvm_option MaxPermSize | scale 1.05`
X		
X	if [ -n "$EVENTS_MAXPERMSIZE" ] && [ "$EVENTS_MAXPERMSIZE" -lt 1 ] ; then
X		# Java permsize defaults to 64MiB
X		EVENTS_MAXPERMSIZE=67108864
X	fi
X	
X	((APPD_TOTAL_RESERVED_BYTES=\
XCONTROLLER_HEAP+\
XCONTROLLER_MAXPERMSIZE+\
XINNODB_BUFFER_POOL+\
XINNODB_ADDITIONAL_MEM+\
XEVENTS_HEAP+\
XEVENTS_MAXPERMSIZE))
X	
X	((APPD_HUGE_PAGES=APPD_TOTAL_RESERVED_BYTES/HUGE_PAGE_SIZE_BYTES))
X	if [ $((APPD_TOTAL_RESERVED_BYTES%HUGE_PAGE_SIZE_BYTES)) -gt 0 ]
X		then
X		# Round up
X		((APPD_HUGE_PAGES++))
X	fi
X	
X	PAGE_SIZE_BYTES=`getconf PAGE_SIZE`
X}
X
X#
X# Explicitly reserve memory for major controller components
X#
Xfunction reserve_memory {
X	# set swappiness to 1 after (CORE-68175):
X	# https://www.percona.com/blog/2014/04/28/oom-relation-vm-swappiness0-new-kernel/
X	# and
X	# https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Performance_Tuning_Guide/s-memory-tunables.html
X	echo 1 > /proc/sys/vm/swappiness
X	
X	calculate_memory
X
X	#
X	# If zfs is running on this host
X	# Carve room for controller heap, innodb_buffer_pool_size and
X	# innodb_additional_mem_pool_size.  Leave 20% system RAM uncommitted.
X	#
X
X	TOTAL_RESERVABLE_MEM=`free -b | awk '/Mem:/{RESERVABLE_MEM=$2*0.8; printf("%.0f\n", RESERVABLE_MEM)}'`
X	(( REQ_ZFS_ARC_MAX=TOTAL_RESERVABLE_MEM-APPD_TOTAL_RESERVED_BYTES ))
X	# warn if heap plus innodb_buffer_pool_size is greater than available RAM
X	if [ "$REQ_ZFS_ARC_MAX" -lt "0" ] ; then
X		echo "\
X$NAME: Warning!  Controller Heap + innodb_buffer_pool_size
X+ innodb_additional_mem_pool_size, ($APPD_TOTAL_RESERVED_BYTES bytes), greater
Xthan reservable system RAM, ($TOTAL_RESERVABLE_MEM bytes)."
X	else
X		if zpool list >/dev/null 2>&1 ; then 
X			ZFS_ARC_MAX=`cat /sys/module/zfs/parameters/zfs_arc_max`
X			if ([ "$ZFS_ARC_MAX" -eq "0" ] || [ "$ZFS_ARC_MAX" -gt "$REQ_ZFS_ARC_MAX" ]) ; then
X				echo $REQ_ZFS_ARC_MAX > /sys/module/zfs/parameters/zfs_arc_max
X			fi
X		fi
X	fi
X	
X	# If huge pages are supported and enabled.
X	if [ -n "$HUGE_PAGE_SIZE_BYTES" ] && [ "$ENABLE_HUGE_PAGES" == "true" ]
X		then
X		local SHMMAX_MAX
X		local SHMALL_MAX
X		if [[ `uname -m` == "x86_64" ]]
X			then
X			SHMMAX_MAX=`echo "2^64 - 16777217" | bc`
X		else
X			SHMMAX_MAX=`echo "2^32 - 16777217" | bc`
X		fi
X		SHMALL_MAX=$SHMMAX_MAX
X		
X	  	# Explicitly allocate and enable huge pages for the controller's
X		# java and mysql processes
X		
X		echo $(($(cat /proc/sys/vm/nr_hugepages)+APPD_HUGE_PAGES)) > /proc/sys/vm/nr_hugepages
X
X		# Allow the AppDynamics user to access the huge pages we're allocating.
X		if ! id -G $RUNUSER | grep -wq `cat /proc/sys/vm/hugetlb_shm_group`
X			then
X			echo $(id -g $RUNUSER) > /proc/sys/vm/hugetlb_shm_group
X		fi
X		
X		#check/set shmmax
X		#use bc to handle unsigned 64-bit unsigned integers
X		((APPD_SHMMAX=APPD_HUGE_PAGES*HUGE_PAGE_SIZE_BYTES))
X		local PROC_SHMMAX=$(cat /proc/sys/kernel/shmmax)
X		[[ $(echo "$PROC_SHMMAX < $SHMMAX_MAX"|bc) == "1" ]] \
X			&& echo "shmmax = $PROC_SHMMAX+$APPD_SHMMAX; \
X			if (shmmax > $SHMMAX_MAX) shmmax=$SHMMAX_MAX; print shmmax;"\
X				| bc > /proc/sys/kernel/shmmax
X
X		#check/set shmmall
X		#use bc to handle unsigned 64-bit unsigned integers
X		((APPD_SHMALL=APPD_SHMMAX/PAGE_SIZE_BYTES))
X		local PROC_SHMALL=$(cat /proc/sys/kernel/shmall)
X		[[ $(echo "$PROC_SHMALL < $SHMALL_MAX"|bc) == "1" ]] \
X			&& echo "shmall = $PROC_SHMALL+$APPD_SHMALL; \
X			if(shmall > $SHMALL_MAX) shmall=$SHMALL_MAX; print shmall;" \
X				| bc > /proc/sys/kernel/shmall
X	
X		# check/set unlimited memlock limit for $RUNUSER
X		if [[ $RUNUSER == "root" ]]
X			then
X			ulimit -l unlimited
X		else
X			if [[ $(su -s /bin/bash -c "ulimit -l" $RUNUSER) != "unlimited" ]]
X				then
X				echo "$RUNUSER  soft  memlock  unlimited" >> /etc/security/limits.d/appdynamics.conf
X				echo "$RUNUSER  hard  memlock  unlimited" >> /etc/security/limits.d/appdynamics.conf
X			fi
X		fi
X		
X		dbcnf_set large_pages ""
X		
X		# check/tweak domain.xml
X
X		domain_set_jvm_option +UseLargePages
X		domain_set_jvm_option LargePageSizeInBytes $HUGE_PAGE_SIZE_BYTES
X		
X		# XXX
X		# check / tweak events service settings
X		if ! runuser cat $EVENTS_VMOPTIONS_FILE | \
X			grep -q "\-XX:+UseLargePages" ; then
X			runuser ex -s $EVENTS_VMOPTIONS_FILE <<- EVENTS_LARGE_PAGES
X				a
X				-XX:+UseLargePages 
X				-XX:LargePageSizeInBytes=$HUGE_PAGE_SIZE_BYTES
X				.
X				wq
X			EVENTS_LARGE_PAGES
X		# simplify the awk-fu below...
X		elif [[ `( runuser cat $EVENTS_VMOPTIONS_FILE ) \
X			| awk -F= '/^[\t ]*-XX:LargePageSizeInBytes=/{
X				if(sub(/[k,K]$/,"",$2)==1){ 
X					BYTES=$2*1024 
X				}
X				else if(sub(/[m,M]$/,"",$2)==1){ 
X					BYTES=$2*1048576 
X				}
X				else if(sub(/[g,G]$/,"",$2)==1){ 
X					BYTES=$2*1073741824 
X				} else { 
X					gsub(/[^0-9]/,"",$2) 
X					BYTES=$2
X				} 
X				print BYTES; 
X				exit;
X			}'` != "$HUGE_PAGE_SIZE_BYTES" ]] ; then
X			#update large page size
X			runuser ex -s $EVENTS_VMOPTIONS_FILE <<- ADJUST_EVENT_LARGE_PAGE_SIZE
X				%s/-XX:LargePageSizeInBytes=[1-9][0-9]*[k,K,m,M,g,G]\?/-XX:LargePageSizeInBytes=$HUGE_PAGE_SIZE_BYTES/g
X				wq
X			ADJUST_EVENT_LARGE_PAGE_SIZE
X		fi
X	else
X		# disable controller MySQL and Java huge page support
X		dbcnf_unset large-pages
X		domain_unset_jvm_option +UseLargePages
X		domain_unset_jvm_option LargePageSizeInBytes
X
X		# remove events service large pages config from controller.sh
X		if ( runuser cat $EVENTS_VMOPTIONS_FILE ) \
X			 | grep -q "^[\t ]*\-XX:+UseLargePages[\t ]*" ; then
X			runuser ex -s $EVENTS_VMOPTIONS_FILE <<- DELETE_EVENTS_LARGE_PAGES
X				%s/^[\t ]*-XX:+UseLargePages[\t ]*\n//g
X				%s/^[\t ]*-XX:LargePageSizeInBytes=.*\n//g
X				wq
X			DELETE_EVENTS_LARGE_PAGES
X		fi
X	fi
X	# XXX
X}
X
Xfunction unreserve_memory {
X	# If huge pages are supported and enabled.
X	if [ -n "$HUGE_PAGE_SIZE_BYTES" ] && [ "$ENABLE_HUGE_PAGES" == "true" ]
X		then
X		calculate_memory
X		local SHMMAX_MAX
X		local SHMALL_MAX
X		if [[ `uname -m` == "x86_64" ]]
X			then
X			SHMMAX_MAX=`echo "2^64 - 16777217" | bc`
X		else
X			SHMMAX_MAX=`echo "2^32 - 16777217" | bc`
X		fi
X		SHMALL_MAX=$SHMMAX_MAX
X		
X	  	# Explicitly allocate and enable huge pages for the controller's
X		# java and mysql processes
X		
X		echo $(($(cat /proc/sys/vm/nr_hugepages)-APPD_HUGE_PAGES)) > /proc/sys/vm/nr_hugepages
X		
X		#check/set shmmax
X		#use bc to handle unsigned 64-bit unsigned integers
X		((APPD_SHMMAX=APPD_HUGE_PAGES*HUGE_PAGE_SIZE_BYTES))
X		local PROC_SHMMAX=$(cat /proc/sys/kernel/shmmax)
X		[[ $(echo "$PROC_SHMMAX < $SHMMAX_MAX"|bc) == "1" ]] \
X			&& echo "shmmax = $PROC_SHMMAX-$APPD_SHMMAX; \
X			if (shmmax > $SHMMAX_MAX) shmmax=$SHMMAX_MAX; print shmmax;"\
X				| bc > /proc/sys/kernel/shmmax
X
X		#check/set shmmall
X		#use bc to handle unsigned 64-bit unsigned integers
X		((APPD_SHMALL=APPD_SHMMAX/PAGE_SIZE_BYTES))
X		local PROC_SHMALL=$(cat /proc/sys/kernel/shmall)
X		[[ $(echo "$PROC_SHMALL < $SHMALL_MAX"|bc) == "1" ]] \
X			&& echo "shmall = $PROC_SHMALL-$APPD_SHMALL; \
X			if(shmall > $SHMALL_MAX) shmall=$SHMALL_MAX; print shmall;" \
X				| bc > /proc/sys/kernel/shmall
X	fi
X}
X
Xcase "$1" in  
Xstart)  
X	require_root
X	# conditionally run reserve_memory
X	# if no lockfile or host crash (stale lockfile precedes last startup): reserve memory
X	# mysql crashed or shut down outside of intit: stale lockfile that is younger than last boot: noop
X	# mysql already running: noop
X	if ! db_running ; then
X		set_open_fd_limits
X		# if numa settings, then we need to disable transparent huge pages
X		if [ -f $APPD_ROOT/HA/numa.settings ] ; then
X			for dir in /sys/kernel/mm/transparent_hugepage \
X				/sys/kernel/mm/redhat_transparent_hugepage ; do
X				if [ -f $dir/enabled ] ; then
X					echo "never" > $dir/enabled
X				fi
X				if [ -f $dir/defrag ] ; then
X					echo "never" > $dir/defrag
X				fi
X			done
X		fi
X		if ! [ -f $lockfile ] || host_crash ; then
X			reserve_memory
X		fi
X		runuser $APPD_BIN/controller.sh start-db
X	fi
X	rm -f $lockfile	
X	touch $lockfile	
X;;  
X  
Xstop)
X	require_root
X	service appdcontroller stop
X	# The default controller shutdown timeout is 45 minutes 
X	# That is a long time to be stuck with a hung appserver on the way down.
X	# Thankfully, we can set an environment variable to override that:
X	export AD_SHUTDOWN_TIMEOUT_IN_MIN=10
X	# call separately because if _stopControllerAppServer can "exit 1"
X	# which will leave the database still running
X	runuser $APPD_BIN/controller.sh stop-db
X	unreserve_memory
X	rm -f $lockfile
X;;  
X
Xrestart)  
X	$0 stop  
X	$0 start  
X;;  
X  
Xstatus)  
X	if db_running ; then
Xcontrollerversion=`echo "select value from global_configuration_cluster where name='schema.version'" | runuser $MYSQLCLIENT | get value`
X	if [ ! -z "$controllerversion" ] ; then
X		echo version: $controllerversion
X	fi
X		echo -n "db running as $RUNUSER - "
X		if [ "`controller_mode`" == "active" ] ; then
X			echo "active"
X		else
X			echo "passive"
X			if [ -n "$DB_SKIP_SLAVE_START" ] ; then
X				echo replication disabled
X			fi
X		fi
X		case `echo "select value from global_configuration_local where name='ha.controller.type'" | runuser $MYSQLCLIENT | get value` in
X		primary) 
X			echo primary
X			;;
X		secondary)
X			echo secondary
X			;;
X		notapplicable)
X			echo HA not installed
X			;;
X		*)
X			echo unknown HA type
X			;;
X		esac
X		
X		echo "SHOW SLAVE STATUS" | \
X			( runuser $MYSQLCLIENT ) | awk \
X			'/Slave_IO_State/ {print}
X			/Seconds_Behind_Master/ {print} 
X			/Master_Server_Id/ {print}
X			/Master_Host/ {print}'
X		echo "SHOW SLAVE STATUS" | ( runuser $MYSQLCLIENT ) | awk '
X			/Master_SSL_Allowed/ { if ($2 == "Yes") {print "Using SSL Replication" }}'
X	else
X		echo "db not running"
X	fi
X	if [ -n "`dbcnf_get skip-slave-start`" ] ; then
X		echo "replication persistently broken"
X	fi
X;;
X
X*)  
X        echo "Usage: $0 {start|stop|restart|status}"  
X        exit 1  
Xesac
Xexit 0 
END-of-appdcontroller-db.sh
echo x - appdcontroller.sysconfig
sed 's/^X//' >appdcontroller.sysconfig << 'END-of-appdcontroller.sysconfig'
X#
X# $Id: appdcontroller.sysconfig 3.0 2016-06-29 12:58:56 cmayer $
X# 
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# system config settings for appdynamics appserver
X# the source file for this is installed in HA/appdcontroller.sysconfig
X#
X# this file is automatically installed by install-init.sh and uninstalled 
X# by uninstall-init.sh
X#
X# the install-init.sh script edits these settings to reflect reality
X#
XAPPD_ROOT=/opt/AppDynamics/Controller
XRUNUSER=root
END-of-appdcontroller.sysconfig
echo x - appdcontroller-db.sysconfig
sed 's/^X//' >appdcontroller-db.sysconfig << 'END-of-appdcontroller-db.sysconfig'
X#
X# $Id: appdcontroller-db.sysconfig 3.0 2016-06-29 12:58:56 cmayer $
X# 
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# system config settings for appdynamics database
X# the source file for this is installed in HA/appdcontroller-db.sysconfig
X#
X# this file is automatically installed by install-init.sh 
X# and uninstalled by uninstall-init.sh
X#
X# the install-init.sh script edits these settings to reflect reality
X#
XAPPD_ROOT=/opt/AppDynamics/Controller
XRUNUSER=root
END-of-appdcontroller-db.sysconfig
echo x - numa.settings.template
sed 's/^X//' >numa.settings.template << 'END-of-numa.settings.template'
X#
X# this file contains the NUMA node assignments for the java processes and mysqld
X# $Id: numa.settings.template 3.0 2016-06-21 01:41:14 cmayer $
X#
X# copy this file to numa.settings if on a numa machine and we want to statically
X# bind java and mysql to different nodes
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
XNUMA_MYSQL="numactl --cpunodebind 0 --preferred 0"
XNUMA_JAVA="numactl --cpunodebind 1 --preferred 1"
END-of-numa.settings.template
echo x - numa-patch-controller.sh
sed 's/^X//' >numa-patch-controller.sh << 'END-of-numa-patch-controller.sh'
X#!/bin/bash
X#
X# $Id: numa-patch-controller.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# patch the controller.sh script to enable numa support
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xcd $(dirname $0)
X
XCONTR_SH=../bin/controller.sh
XCONTR_TMP=../bin/controller.sh.patch_tmp
XCONTR_SAVE=../bin/controller.sh.pre-numa
X
Xerr=0
X
X# first, make a copy
Xcp $CONTR_SH $CONTR_TMP
X
X#
X# check if controller.sh has inclusion of NUMA settings
X#
Xif ! grep -q "HA/numa.settings" $CONTR_TMP ; then
X	ex -s $CONTR_TMP <<- ADDINCLUDE
X/^INSTALL_DIR/
Xa
X
X#### added by numa-patch-controller.sh ###
XNUMA_MYSQL=
XNUMA_JAVA=
Xif [ -f \$INSTALL_DIR/HA/numa.settings ] ; then
X	. \$INSTALL_DIR/HA/numa.settings
Xfi
X#### end addition ####
X
X.
Xw
Xq
XADDINCLUDE
Xerr=$?
Xfi
X
X#
X# check if controller.sh has mysqld_safe numa-ized
X#
Xwhile grep "^[[:space:]]*bin/mysqld_safe" $CONTR_TMP;  do
X	ex -s $CONTR_TMP <<- ADDMYSQL
X	/^[[:space:]]*bin\/mysqld_safe
X	i
X	#### edited by numa-patch-controller.sh ####
X	.
X	+
X	s,\(^[[:space:]]*\)\(bin/mysqld_safe\),\1\$NUMA_MYSQL \2,
X	a
X	#### end edit ####
X	.
X	w
X	q
XADDMYSQL
X	err=$?
Xdone
X
X#
X# check if controller.sh has start-domain numa-ized
X#
Xif grep "start-domain" $CONTR_TMP | grep -qv NUMA_JAVA ; then
X	ex -s $CONTR_TMP <<- ADDSTARTDOMAIN
X	/start-domain/
X	i
X	#### edited by numa-patch-controller.sh ####
X	.
X	+
X	s,./asadmin start-domain,\$NUMA_JAVA ./asadmin start-domain,
X	a
X	#### end edit ####
X	.
X	w
X	q
XADDSTARTDOMAIN
X	err=$?
Xfi
X
Xif cmp -s $CONTR_SH $CONTR_TMP ; then
X	echo controller.sh already patched
X	rm $CONTR_TMP
Xelse
X	echo controller.sh patched for numa
X	mv $CONTR_SH $CONTR_SAVE
X	mv $CONTR_TMP $CONTR_SH
Xfi
END-of-numa-patch-controller.sh
echo x - save_mysql_passwd.sh
sed 's/^X//' >save_mysql_passwd.sh << 'END-of-save_mysql_passwd.sh'
X#!/bin/bash
X#
X# $Id: save_mysql_passwd.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# a simple wrapper around the obfuscated password saver function
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xcd $(dirname $0)
X
X. lib/log.sh
X. lib/ha.sh
X. lib/password.sh
X
Xsave_mysql_passwd $APPD_ROOT
END-of-save_mysql_passwd.sh
echo x - rsyncd.conf
sed 's/^X//' >rsyncd.conf << 'END-of-rsyncd.conf'
Xpid file = /tmp/replicate.rsync.pid
Xlog file = /tmp/rsyncd.log
X
X[default]
X	path=/
X	use chroot = no
X	read only = no
END-of-rsyncd.conf
echo x - lib/password.sh
sed 's/^X//' >lib/password.sh << 'END-of-lib/password.sh'
X#!/bin/bash
X#
X# $Id: lib/password.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# passwordfunctions.sh
X# contains common code used by the HA toolkit
X#
X# policy:
X# intended to be minimalized for inclusion into the init functions
X# 
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# Collection of routines to deal with MySQL root password
X#
X
Xif [ "`uname`" == "Linux" ] ; then
X	BASE64_NO_WRAP="-w 0"
Xelse
X	BASE64_NO_WRAP=""
Xfi
X
X#
X# prerequisites - die immediately if not present
X#
Xwhich tr >& /dev/null || fatal 2 "needs \'tr\'"
Xwhich base64 >& /dev/null || fatal 3 "needs \'base64\'"
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  ofa1 <obfuscated value of input parameter>
X#
X# Call as:
X#  obf_ofa1 <data>
Xfunction obf_ofa1 {
X	local thisfn=${FUNCNAME[0]} step1 obf
X	(( $# == 1 )) || abend "Usage: $thisfn <clear_data>"
X
X	step1=$(tr '\!-~' 'P-~\!-O' < <(echo -n $1)) || exit 1
X	[[ -n "$step1" ]] || fatal 2 "produced empty step1 obfuscation"
X	obf=$(base64 $BASE64_NO_WRAP < <(echo -n $step1)) || exit 1
X	[[ -n "$obf" ]] || fatal 3 "produced empty obfuscation"
X
X	# use part of function name after last '_' as obfuscator type
X	echo "${thisfn##*_} "$obf
X}
Xexport -f obf_ofa1
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  <deobfuscated value of input parameter>\n
X# Call as:
X#  deobf_ofa1 <data>
Xfunction deobf_ofa1 {
X	local step1 clear
X	(( $# == 1 )) || abend "Usage: ${FUNCNAME[0]} <obf_data>"
X
X	step1=$(base64 --decode $BASE64_NO_WRAP < <(echo -n $1)) || exit 1
X	[[ -n "$step1" ]] || fatal 2 "produced empty step1 deobfuscation"
X	clear=$(tr '\!-~' 'P-~\!-O' < <(echo -n $step1)) || exit 1
X	[[ -n "$clear" ]] || fatal 3 "produced empty cleartext"
X
X	echo $clear
X}
Xexport deobf_ofa1
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  ofa2 <obfuscated value of input parameter>
X#
X# Call as:
X#  obf_ofa2 <data>
Xfunction obf_ofa2 {
X	local thisfn=${FUNCNAME[0]} step1 otype obf
X	(( $# == 1 )) || abend "Usage: $thisfn <clear_data>"
X
X	obf=$(tr 'A-Za-z' 'N-ZA-Mn-za-m' < <(echo -n $1)) || exit 1
X	[[ -n "$obf" ]] || fatal 2 "produced empty obfuscation"
X
X	# use part of function name after last '_' as obfuscator type
X	echo "${thisfn##*_} "$obf
X}
Xexport -f obf_ofa2
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  <deobfuscated value of input parameter>\n
X# Call as:
X#  deobf_ofa2 <data>
Xfunction deobf_ofa2 {
X	local step1 clear
X	(( $# == 1 )) || abend "Usage: ${FUNCNAME[0]} <obf_data>"
X
X	clear=$(tr 'A-Za-z' 'N-ZA-Mn-za-m' < <(echo -n $1)) || exit 1
X	[[ -n "$clear" ]] || fatal 2 "produced empty cleartext"
X
X	echo $clear
X}
Xexport -f deobf_ofa2
X
X# overall wrapper function for obfuscation 
X# Call as
X#  obfuscate <obf type> <data>
X# or
X#  obfuscate <data>
Xfunction obfuscate {
X	local data otype
X	(( $# == 1 || $# == 2 )) || abend "Usage: ${FUNCNAME[0]} [<obf type>] <data>"
X
X	if (( $# == 2 )) ; then
X		otype=$1
X		data=$2
X	else
X		otype=''
X		data=$1
X	fi
X	case $otype in
X		ofa1 | '' )	obf_ofa1 $data ;;	# default case
X		ofa2)		obf_ofa2 $data ;;
X		*)		abend "unknown obfuscation type \"$otype\"" ;;
X	esac
X}
Xexport -f obfuscate
X
X# overall wrapper for various de-obfuscator functions
X# Call as:
X#  deobfuscate <otype> <obf_data>
Xfunction deobfuscate {
X	local otype=$1 data=$2
X	(( $# == 2 )) || abend "Usage: ${FUNCNAME[0]} <obf type> <obf_data>"
X
X	case $otype in
X		ofa1)	deobf_ofa1 "$data" ;;
X		ofa2)	deobf_ofa2 "$data" ;;
X		*)	abend "unknown obfuscation type \"$otype\"" ;;
X	esac
X}
Xexport -f deobfuscate
X
X###
X# get MySQL root password in a variety of ways.
X# 1. respect MYSQL_ROOT_PASSWD if present; please pass down to sub-scripts. 
X#    Do NOT persist to disk.
X# 2. respect $APPD_ROOT/db/.rootpw if present
X# 3. respect $APPD_ROOT/db/.rootpw.obf if present
X# 4. gripe, letting them know how to persist a password
X#
X# Call as:
X#  dbpasswd=`get_mysql_passwd`
Xfunction get_mysql_passwd {
X	local clear obf otype inpw2=' '
X	local rootpw="$APPD_ROOT/db/.rootpw" rootpw_obf="$APPD_ROOT/db/.rootpw.obf"
X
X	if [[ -n "$MYSQL_ROOT_PASSWD" ]] ; then
X		echo $MYSQL_ROOT_PASSWD
X	elif [[ -s $rootpw && -r $rootpw ]] ; then 
X		echo $(<$rootpw)
X	elif [[ -s $rootpw_obf ]] ; then
X		IFS=$' ' read -r otype obf < $rootpw_obf
X		[[ -n "$otype" && -n "$obf" ]] || \
X			fatal 1 "unable to read obfuscated passwd from $rootpw_obf"
X		clear=$(deobfuscate $otype $obf)
X		[[ -n "$clear" ]] || \
X			fatal 2 "unable to deobfuscate passwd from $rootpw_obf"
X		echo $clear
X	else
X		fatal 3 "no password in db/.rootpw, db/.rootpw.obf or MYSQL_ROOT_PASSWORD"
X	fi
X}
Xexport -f get_mysql_passwd
END-of-lib/password.sh
echo x - lib/ha.sh
sed 's/^X//' >lib/ha.sh << 'END-of-lib/ha.sh'
X#!/bin/bash
X#
X# $Id: lib/ha.sh 3.0.1 2016-08-08 13:40:17 cmayer $
X#
X# ha.sh
X# contains common code used by the HA toolkit
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X# filenames
X#
XDOMAIN_XML=$APPD_ROOT/appserver/glassfish/domains/domain1/config/domain.xml
XWATCHDOG_ENABLE=$APPD_ROOT/HA/WATCHDOG_ENABLE
XWATCHDOG_SETTINGS=$APPD_ROOT/HA/watchdog.settings
XWATCHDOG_STATUS=$APPD_ROOT/logs/watchdog.status
XWATCHDOG_ERROR=$APPD_ROOT/logs/watchdog.error
X
X#
X# pidfiles
X#
XASSASSIN_PID=$APPD_ROOT/HA/appd_assassin.pid
XWATCHDOG_PID=$APPD_ROOT/HA/appd_watchdog.pid
X
X# with help from:
X# http://stackoverflow.com/questions/1923435/how-do-i-echo-stars-when-reading-password-with-read
Xfunction getpw { 
X        (( $# == 1 )) || err "Usage: ${FUNCNAME[0]} <variable name>"
X        local pwch inpw1 inpw2=' ' prompt; 
X        
X        ref=$1 
X	while [[ "$inpw1" != "$inpw2" ]] ; do
X		prompt="Enter MySQL root password: "
X		inpw1=''
X		while read -p "$prompt" -r -s -n1 pwch ; do 
X			if [[ -z "$pwch" ]]; then 
X				echo > /dev/tty
X				break 
X			else 
X				prompt='*'
X				inpw1+=$pwch 
X			fi 
X		done 
X
X		prompt="re-enter same password: "
X		inpw2=''
X		while read -p "$prompt" -r -s -n1 pwch ; do 
X			if [[ -z "$pwch" ]]; then 
X				echo > /dev/tty
X				break 
X			else 
X				prompt='*'
X				inpw2+=$pwch 
X			fi 
X		done 
X	
X		[[ "$inpw1" == "$inpw2" ]] || echo "passwords unequal. Retry..." 1>&2
X	done
X
X	# indirect assignment (without local -n) needs eval. 
X	# This only works with global variables :-( Please use weird variable names to
X	# avoid namespace conflicts...
X        eval "${ref}=\$inpw1"            # assign passwd to parameter variable
X}
X
X# helper function to allow separate setting of passwd from command line.
X# Use this to persist an obfuscated version of the MySQL passwd to disk.
X# Call as:
X#  . hafunctions.sh
X#  save_mysql_passwd $APPD_ROOT
Xfunction save_mysql_passwd {
X	(( $# == 1 )) || err "Usage: ${FUNCNAME[0]} <APPD_ROOT>"
X
X	local thisfn=${FUNCNAME[0]} APPD_ROOT=$1 
X	[[ -d $1 ]] || err "$thisfn: \"$1\" is not APPD_ROOT"
X	local rootpw_obf="$APPD_ROOT/db/.rootpw.obf"
X
X	getpw __inpw1 || exit 1		# updates __inpw1 *ONLY* if global variable
X	obf=$(obfuscate $__inpw1) || exit 1
X	echo $obf > $rootpw_obf || err "$thisfn: failed to save obfuscated passwd to $rootpw_obf"
X	chmod 600 $rootpw_obf || warn "$thisfn: failed to make $rootpw_obf readonly"
X}
X
X#
X# find out which escalation method we are using
X#
Xif [ -f /sbin/service ] ; then
X    service_bin=/sbin/service
Xelif [ -f /usr/sbin/service ] ; then
X    service_bin=/usr/sbin/service
Xelse
X    fatal 1 "service not found in /sbin or /usr/sbin"
Xfi
X
X#
X# abstract out the privilege escalation at run time
X#
X# remservice <flags> <machine> <service> <verb>
X# service <service> <verb>
X#
Xif [[ `id -u` == 0 ]] ; then
X	function service {
X		$service_bin $1 $2
X	}   
X        
X	function remservice {
X		ssh $1 $2 $service_bin $3 $4
X	}
Xelse
X	if [ -x /sbin/appdservice ] ; then
X		function service {
X			/sbin/appdservice $1 $2
X		}
X		function remservice {
X			ssh $1 $2 /sbin/appdservice $3 $4
X		}
X	else
X		function service {
X			sudo $service_bin $1 $2
X		}
X		function remservice {
X			ssh $1 $2 sudo -n $service_bin $3 $4
X		}
X    fi
Xfi
X
X#
X# we do a boatload of sanity checks, and if anything is unexpected, we
X# exit with a non-zero status and complain.
X#
Xfunction check_sanity {
X	if [ ! -d "$APPD_ROOT" ] ; then
X		fatal 1 "controller root $APPD_ROOT is not a directory"
X	fi
X	if [ ! -w "$DB_CONF" ] ; then
X		fatal 2 "db configuration $DB_CONF is not writable"
X	fi
X	if [ ! -x "$MYSQL" ] ; then
X		fatal 3 "controller root $MYSQL is not executable"
X	fi
X	if [ `id -un` != $dbuser ] ; then
X		fatal 4 "$0 must run as $dbuser"
X	fi
X}
X
X
END-of-lib/ha.sh
echo x - lib/sql.sh
sed 's/^X//' >lib/sql.sh << 'END-of-lib/sql.sh'
X#
X# $Id: lib/sql.sh 3.0.1 2016-08-08 13:40:17 cmayer $
X#
X# run sql statements
X# potentially logging, potentially with timeouts,
X# outputting rows as key-value pairs
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X
Xdbpasswd=${dbpasswd:-`get_mysql_passwd`}
Xdbport=${dbport:-`dbcnf_get port`}
Xdbuser=${dbuser:-`dbcnf_get user`}
X
X#
X# these are derived, but should not need editing
X#
XMYSQL="$APPD_ROOT/db/bin/mysql"
XMYSQLADMIN="$APPD_ROOT/db/bin/mysqladmin"
XCONNECT=(--protocol=TCP --user=root --password="$dbpasswd" --port=$dbport)
X
X#
X# bunch of state variables
X#
Xsqlpid=0
Xsqlkiller=0
Xsqlkilled=0
XDELFILES=""
X
X#
X# alarm signal handler function for sql timer
X#
Xfunction sqltimeout {
X	echo "sqltimeout $sqlpid"
X	if [ $sqlpid -ne 0 ] ; then
X		echo "sql timed out: killing pid $sqlpid" | sqlerr
X		disown $sqlpid
X		kill -s SIGINT $sqlpid
X		sqlpid=0
X		sqlkiller=0
X		sqlkilled=1
X	fi
X}
X
X#
X# sql wrapper - knows about timeout - returns 0 on success, nonzero otherwise
X# args:  hostname command [ timeout ]
X#
X# side effects, is that it sends errors and sql to sqlerr
X# sets DELFILES
X#
Xfunction sql {
X	local tmpfile
X	local errfile
X	local mypid
X	local retval
X
X	mypid=$$
X	tmpfile=/tmp/sql_result.$mypid
X	errfile=/tmp/sql-err.$mypid
X	DELFILES="$tmpfile $errfile"
X	rm -f $DELFILES
X
X	if [ $# -lt 3 ] ; then
X		echo "$2" | $MYSQL -BE --host=$1 "${CONNECT[@]}" controller > $tmpfile
X		if [ -f $APPD_ROOT/HA/LOG_SQL ] ; then
X			echo "$MYSQL -BE --host=$1 "${CONNECT[@]}" controller" | logonly
X			echo "$2" | logonly
X			echo "result:" | logonly
X			cat $tmpfile | logonly
X		fi
X		cat $tmpfile
X	else
X		trap sqltimeout SIGALRM
X		# start time bomb
X		(sleep $3 ; kill -SIGALRM $mypid) &
X		sqlkiller=$!
X		disown $sqlkiller
X
X		# issue sql
X		echo `date` "sql text: $2" >$errfile
X		echo "$2" | $MYSQL -BE --host=$1 "${CONNECT[@]}" controller >$tmpfile 2>>$errfile &
X		sqlpid=$!
X		wait $sqlpid
X		retval=$?
X		if [ $sqlkiller -ne 0 ] ; then
X			kill -9 $sqlkiller >/dev/null 2>&1
X		fi
X		if [ $sqlkilled -ne 0 ] ; then
X			echo "sqlkilled: ret $retval" >> $errfile
X			retval=1
X		fi
X
X		if [ $retval == 0 ] ; then
X			cat $tmpfile
X        else
X			echo "output: " >> $errfile
X			cat $tmpfile >> $errfile
X			cat $errfile | sqlerr
X        fi
X		return $retval
X	fi
X	rm -f $DELFILES
X	DELFILES=""
X}
X
X#
X# read a column from sql return
X#
Xfunction get {
X	local key=$1
X	awk "/^[ \t]*$key:/ {print \$2}"
X}
X
Xfunction get_replication_master {
X    sql localhost "show slave status" 5 | get Master_Host
X}
X
Xfunction get_replication_type {
X	local host=$1
X	sql $host "select value from global_configuration_local where name = \
X		'ha.controller.type'" | get value
X}
X
Xfunction get_replication_mode {
X	local host=$1
X	sql $host "select value from global_configuration_local where name = \
X		'appserver.mode'" | get value
X}
X
Xfunction bounce_slave {
X    sql localhost "stop slave ; start slave ;"
X}
X
Xfunction get_slave_status {
X	slave_io=""
X	slave_sql=""
X	seconds_behind=""
X	primary=""
X
X	sql localhost "show slave status" | \
X	awk 'BEGIN { OFS="" }
X         /Slave_IO_Running:/ {print "slave_io=",$2}
X         /Slave_SQL_Running:/ {print "slave_sql=",$2}
X         /Seconds_Behind_Master:/ {print "seconds_behind=",$2}
X         /Master_Host:/ {print "primary=",$2}'
X}
X
END-of-lib/sql.sh
echo x - lib/log.sh
sed 's/^X//' >lib/log.sh << 'END-of-lib/log.sh'
X#!/bin/bash
X#
X# $Id: lib/log.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# logging code for the HA toolkit - include this first
X#
X# all use the global LOGNAME
X# 
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xif [ -z "$APPD_ROOT" ] ; then
X	APPD_ROOT=$( cd $(dirname "$0"); cd .. ; pwd -P)
Xfi
X
X#
X# function to mask passwords
X#
Xfunction pwmask {
X	sed -e 's/--password=[^ ]*/--password=/'
X}
X
XLOGFILE=$APPD_ROOT/logs/$LOGNAME
X
Xfunction log {
X	local out=/dev/tty
X	if ! [ -c $out ] ; then
X		out=/dev/null
X	fi
X
X	pwmask | tee -a $LOGFILE > $out
X}
X
Xfunction logonly {
X	pwmask >> $LOGFILE
X}
X
Xfunction gripe {
X	local out=/dev/tty
X	if ! [ -c $out ] ; then
X		out=/dev/null
X	fi
X
X	echo "$@" > $out
X}
X
Xfunction logmsg {
X	echo "  -- " "$@" >> $LOGFILE
X}
X
Xfunction message {
X	local out=/dev/tty
X	if ! [ -c $out ] ; then
X		out=/dev/null
X	fi
X
X	echo "  -- " "$@" > $out
X	logmsg "$@"
X}
X
Xfunction sqlerr {
X    if [ -z "$SQL_ERROR" ] ; then
X        pwmask >> $LOGFILE
X    else
X        pwmask >> $SQL_ERROR
X    fi
X}
X
X#
X# this indicates a coding error, so let's print a useful backtrace
X# as in guten abend
X#
Xfunction abend {
X	local lines=($((LINENO-1)) ${BASH_LINENO[*]})
X	local level=0
X
X	gripe "$@"
X	echo "exit code $exitcode" | log
X	echo "backtrace: " | log
X	for func in ${FUNCNAME[*]} ; do
X		echo "${FUNCNAME[$level]}() ${BASH_SOURCE[$level]}:${lines[$level]}" | log
X		level=$((level+1))
X	done
X	kill -INT $$
X}
X
X#
X# this is a runtime failure
X#
Xfunction fatal {
X	local exitcode=$1
X	shift
X	gripe "$@"
X	gripe "exit code $exitcode"
X	kill -INT $$
X	exit $exitcode
X}
X
X#
X# rename the log
X#
Xfunction log_rename {
X	if [ -e $LOGFILE ] ; then
X		message "log renamed" `date`
X		mv $LOGFILE $LOGFILE.`date +%F.%T`
X	fi
X}
X
END-of-lib/log.sh
echo x - lib/conf.sh
sed 's/^X//' >lib/conf.sh << 'END-of-lib/conf.sh'
X#!/bin/bash
X#
X# $Id: lib/conf.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# contains common code used to extract and set information in the
X# config files.
X#
X# there is some hair here having to do with permissions,
X# and we invoke runuser to do file access as the appropriate user
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X# filenames
X#
XDOMAIN_XML=$APPD_ROOT/appserver/glassfish/domains/domain1/config/domain.xml
XDB_CONF=$APPD_ROOT/db/db.cnf
X
X#
X# simplifies processing jvm options from domain.xml
X#
X# different types of jvm_options are settable, unsettable, and gettable
X# they are denoted by a prefix character
X# -Xmx		prefix character X
X# -XX:+foo	prefix character +|-	we can ask for either sense
X# -XX:-foo
X# -Dfoo		no prefix
X
X#
X# domain_set_jvm_option <property> [<value>]
X#
Xfunction domain_set_jvm_option {
X	local property=$1
X	local value="$2"
X	local valueset=""
X
X	case $property in
X	X*)
X		if [ -n "$value" ] ; then
X			valueset="$value"
X		fi
X		selector="-X$property"
X		setter="/appdynamics.controller.port.*\$/a<jvm-options>-$property$valueset</jvm-options>"
X		changer="s,\($property\)[=]*[^<]*,\1$valueset,"
X		;;
X	+*|-*)
X		base=${property:1}
X		selector="XX:[+-]$base"
X		setter="/appdynamics.controller.port.*\$/a<jvm-options>-XX:$property</jvm-options>"
X		changer="s,-XX:$base,-XX:$property,"
X		;;
X	*)
X		if [ -n "$value" ] ; then
X			valueset="=$value"
X		fi
X		selector=-D$property
X		setter="/appdynamics.controller.port.*\$/a<jvm-options>-D$property$valueset</jvm-options>"
X		changer="s,\(-D$property\)[=]*[^<]*,\1$valueset,"
X		;;
X	esac
X
X	if runuser xmllint --xpath '/domain/configs/config[1]/java-config/*' $DOMAIN_XML | \
X		grep -q -e "$selector" ; then
X		# if property already present
X		runuser sed -i "$changer" $DOMAIN_XML
X	else
X		# property needs to be added
X		runuser sed -i "$setter" $DOMAIN_XML
X	fi
X} 
X
X#
X# extract a specific jvm option value from a stream
X#
X# get_jvm_option <property>
X#
Xfunction get_jvm_option
X{
X	local property=$1
X
X	awk -F= "/^-XX:$property=/ { print \$2 }
X		/^-XX:\+$property/ { print \"+\" }
X		/^-XX:-$property/ { print \"-\" }
X		/^-D$property=/ { print \$2 }
X		/^-$property/ { sub(\"-$property\",\"\"); print }"
X}
X
X#
X# read a jvm_option from the domain.xml
X#
X# domain_get_jvm_option
Xfunction domain_get_jvm_option {
X	local property=$1
X
X	runuser xmllint --xpath '/domain/configs/config[1]/java-config/*' $DOMAIN_XML | \
X		sed -e 's/<[^>]*>/\n/g' -e 's/\n\n/\n/g' | \
X		get_jvm_option $property
X}
X
X#
X# function to unset a domain.xml property
X#
Xfunction domain_unset_jvm_option {
X	local property=$1
X
X	case $property in
X	X*)
X		selector="-$property"
X		;;
X	+*|-*)
X		base=${property:1}
X		selector="XX:[+-]$base"
X		;;
X	*)
X		selector=-D$property
X		;;
X	esac
X
X	runuser sed -i "/$selector/d" $DOMAIN_XML
X}
X
X# set a property into the db.cnf file
X# if the property is already there, edit it, else append it
X# if remotehost clear, do it locally
Xfunction dbcnf_set {
X	local property=$1
X	local value="$2"
X	local remotehost=$3
X	local IN=/tmp/db.cnf.in.$$
X	local OUT=/tmp/db.cnf.out.$$
X	
X	rm -f $IN $OUT
X
X	if [ -z "$remotehost" ] ; then
X		DBCNF=$DB_CONF
X		CP="cp"
X	else
X		DBCNF=$remotehost:$DB_CONF
X		CP="scp -q"
X	fi
X	runuser $CP $DBCNF $IN
X	cp $IN $OUT
X
X	if grep -q "^[[:space:]]*$property\(=\|$\)" $IN ; then
X		if ! [ -z "$value" ] ; then
X			sed -i "s,\(^[[:space:]]*$property=\).*$,\1$value," $OUT >/dev/null
X		fi
X	else
X		if [ -z "$value" ] ; then
X			echo "$property" >> $OUT
X		else
X			echo "$property=$value" >> $OUT
X		fi
X	fi
X
X	if ! cmp -s $IN $OUT ; then
X		runuser $CP $OUT $DBCNF
X	fi
X	rm -f $IN $OUT
X}
X
X#
X# remove a property setting from the db.cnf file
X#
Xfunction dbcnf_unset {
X	local property=$1
X	local remotehost=$2
X	local IN=/tmp/db.cnf.in.$$
X	local OUT=/tmp/db.cnf.out.$$
X
X	rm -f $IN $OUT
X
X	if [ -z "$remotehost" ] ; then
X		DBCNF=$DB_CONF
X		CP=cp
X	else
X		DBCNF=$remotehost:$DB_CONF
X		CP="scp -q"
X	fi
X	runuser $CP $DBCNF $IN
X	cp $IN $OUT
X
X	sed -i "/^[[:space:]]*$property\b/d" $OUT >/dev/null
X
X	if ! cmp -s $IN $OUT ; then
X		$CP $OUT $DBCNF
X	fi
X	rm -f $IN $OUT
X}
X
X#
X# read the db.cnf file and extract an attribute
X#
Xfunction dbcnf_get {
X	local property=$1
X
X	val=`runuser grep "^[[:space:]]*$property=" $DB_CONF | awk -F= '{print $2}'`
X	if [ -n "$val" ] ; then
X		echo $val
X	elif runuser grep -q "^[[:space:]]*\b$property\b" $DB_CONF ; then
X		echo $property
X	else
X		echo ""
X	fi
X}
X
X#
X# look in the domain.xml to see if any privileged ports are in use
X# return success if they are
X#
Xfunction use_privileged_ports {
X	runuser xmllint --xpath '//*[@port<1024]' $DOMAIN_XML >/dev/null 2>&1
X}
X
X#
X# scale a size by a suffix [KkMmGg] if present
X# also, add some fluff if specified
X#
X# input on stdin
Xfunction scale {
X	local fluff=1
X	if [ $# = 1 ] ; then fluff=$1 ; fi
X
X	awk "{
X		if(sub(/[Kk]/,\"\",\$1) == 1){
X			BYTES=\$1*1024
X		}
X		else if(sub(/[Mm]/,\"\",\$1)==1){
X			BYTES=\$1*1048576
X		}
X		else if(sub(/[Gg]/,\"\",\$1)==1){
X			BYTES=\$1*1073741824
X		} else {
X			gsub(/[^0-9]/,\"\",\$1)
X			BYTES=\$1
X		}
X		printf(\"%.0f\n\", BYTES * $fluff)
X		exit;
X	}"
X}
END-of-lib/conf.sh
echo x - lib/runuser.sh
sed 's/^X//' >lib/runuser.sh << 'END-of-lib/runuser.sh'
X#!/bin/bash
X#
X# $Id: lib/runuser.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# contains function stubs to make the runuser hook disappear
X# this file is intended to be included by shell scripts running
X# as the appdynamics user only.
X#
X# init scripts are intended to embed lib/init.sh instead
X# 
X# finally, if we are root, then this means that root had better
X# be the user defined in db.cnf
X#
X
Xfunction bg_runuser {
X	exec nohup "$@" >/dev/null 2>&1 &
X}
Xfunction runuser {
X	"$@"
X}
Xexport -f runuser bg_runuser
END-of-lib/runuser.sh
echo x - lib/init.sh
sed 's/^X//' >lib/init.sh << 'END-of-lib/init.sh'
X#!/bin/bash
X#
X# $Id: lib/init.sh 3.0 2016-08-04 03:09:03 cmayer $
X#
X# init.sh
X# contains functions to change user and run processes
X# 
X# also, common code for the init scripts.
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X# RUNUSER must be defined before here
Xif [ -z "$RUNUSER" ] ; then
X	echo "RUNUSER variable must be defined in /etc/sysconfig/appdcontroller"
X	exit 1
Xfi
X
X#
X# runuser quoting is a definite PITA.  the way to stay sane is to note
X# exactly when you want $ to be expanded and make that explicit, passing
X# escaped $ signs when you want the expansion deferred
X#
X# finally, the bb_runuser function should return the pid
X#
Xif [ `id -un` == "$RUNUSER" ] ; then
X	function bg_runuser {
X		bash -c "nohup $* >/dev/null 2>&1 & echo \$!" &
X	}
X	function runuser {
X		"$@"
X	}
Xelse
X	function bg_runuser {
X		su -m -s /bin/bash -c "nohup $* >/dev/null 2>&1 & echo \$!" $RUNUSER
X	}
X	function runuser {
X		su -m -s /bin/bash -c "$*" $RUNUSER
X	}
Xfi
Xexport -f runuser bg_runuser
X
X# enable Debian systems to work also
Xfunction service {
X    if [[ -z "$service_bin" ]] ; then
X        if [[ -f /sbin/service ]] ; then
X                service_bin=/sbin/service
X        elif [[ -f /usr/sbin/service ]] ; then
X                service_bin=/usr/sbin/service
X        else
X            echo service not found in /sbin or /usr/sbin - exiting
X            exit 13
X        fi
X        $service_bin "$@"
X    else
X        $service_bin "$@"
X    fi
X}
X
Xfunction require_root {
X    if [ `id -un` != "root" ] ; then
X        echo "service changes must be run as root"
X        exit 1
X    fi
X}
X
X#
X# trivial sanity check
X#
Xfunction check_sanity {
X	if runuser [ ! -f $APPD_ROOT/db/db.cnf ] ; then
X		echo appd controller not installed in $APPD_ROOT
X		exit 1
X	fi
X	if runuser [ ! -x $APPD_ROOT/bin/controller.sh ] ; then
X		echo controller disabled on this host
X		exit 1
X	fi
X}
X
END-of-lib/init.sh
chmod ugo+rx . .. ; find . -name \*.sh -print | xargs chmod ugo+rx; exit

