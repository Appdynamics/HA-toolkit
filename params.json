{
  "name": "Ha-toolkit",
  "tagline": "AppDynamics Controller High Availability Toolkit",
  "body": "# HA\r\nAppdynamics HA Controller provisioning subsystem\r\n\r\n## Non-developer installation & use\r\n* HA Toolkit *must* be installed from `HA.shar`\r\n* Download HA.shar only or clone this repository and then run `make` to build a fresh HA.shar\r\n\r\n## Documentation\r\nSee [README.txt](README.txt) and https://docs.appdynamics.com/display/PRO42/Using+the+High+Availability+(HA)+Toolkit\r\n\r\n## Contributing\r\n\r\n### Use HubFlow to manage development branches and releases\r\n\r\nGit Flow automates [a number of excellent conventions for managing branches, merges, and releases](http://nvie.com/posts/a-successful-git-branching-model/).  HubFlow is a GitHub-aware fork of the original Git Flow project:\r\n\r\n* Easily installed on Mac OS X via homebrew \r\n* Documentation: http://datasift.github.io/gitflow/\r\n\r\nThe Git Flow / Hubflow workflow maintains a pair of branches: `develop` and `master`:\r\n\r\n* `develop` contains every merged feature and bug fix.\r\n* `master` only contains released, production-ready code.  Bug fixes or features are branched from develop and then merged back in.\r\n\r\n***Please note that only Curt Mayer, the project architect, has push privileges to the*** `develop` ***and*** `master` ***branches in this repository.***  To get your features and fixes merged into `develop` and released into `master`, please follow the procedures below.\r\n\r\n### Getting started with HA toolkit development\r\n\r\n**AppDynamics GitHub organization members:**\r\n\r\n* Install hubflow (`brew install hubflow` on Macs with [Homebrew](http://brew.sh) installed, follow the instructions [here](https://github.com/datasift/gitflow) for other platforms.)\r\n* Clone this repo from GitHub with SSH\r\n* Change directories into your clone of the HA-toolkit repo and run `git hf init`\r\n* Please see [Datasift's excellent tutorial on HubFlow](http://datasift.github.io/gitflow/GitFlowForGitHub.html)\r\n\r\n**Others:**\r\n\r\n* Fork this repository on GitHub\r\n* Clone your forked repository to your development machine.\r\n* Use your preferred version control workflow, push back to your forked repo, and open a pull request on GitHub.  We will evaluate your contributions as we have the bandwidth to do so.\r\n\r\n### Common HubFlow / GitHub operations\r\n\r\n**Starting a new feature (or bugfix) branch**\r\n\r\n`git hf feature start <feature-name>`\r\n\r\n**Returning to a feature branch from another branch**\r\n\r\n`git hf feature checkout <feature-name>`\r\n\r\nThis command also works for checking out a feature started by a colleague.  Note that you will need to look [here](https://github.com/Appdynamics/HA-toolkit/branches) for the correct `feature/<feature name>` branch.\r\n\r\n**Pulling a colleague's work down from GitHub to your feature branch.**\r\n\r\n`git hf pull`\r\n\r\n**Pulling down the latest `master` and `develop` branches from GitHub**\r\n\r\n`git hf update`\r\n\r\n**Merging changes onto your feature branch from develop**\r\n\r\n* `git hf feature checkout <feature-name>`\r\n* `git merge develop`\r\n\r\n**Getting your feature merged into the develop branch**\r\n\r\n* `git hf update`\r\n* `git hf feature checkout <feature-name>`\r\n* `git merge develop` (and resolve any merge conflicts)\r\n* `git hf push`\r\n* Open a [pull request](https://help.github.com/articles/using-pull-requests/) to pull changes from your feature branch to `develop` and assign to Curt Mayer (cmayer68)\r\n* If any changes are required before your pull request gets merged, commit them to your feature request branch and `git hf push` them to github.  They will be added automatically to your pull request.\r\n* Once your pull request has been merged, delete your feature branch from GitHub and run `git hf feature finish` to close your feature branch.  If this fails and you are certain that your feature has been merged, run `git hf feature finish -f <feature name>` to force the cleanup to complete.\r\n\r\n**Handling pull requests**\r\n\r\n* Open the pull request and review the \"Conversation,\" \"Commits,\" and \"Files changed\" tabs.\r\n* Make comments, as necessary, on the submitted code changes.  (Unfortunately, that GitHub's comment system isn't as slick as Gerrit's where you can highlight a section of code and attach a comment it to it.  You should place your comment *below* all of the code you are commenting on to improve readability in the \"Conversation\" tab)\r\n* New commits based on your feedback will be reflected automatically in the pull request, though a browser refresh may be required.\r\n* Once you are satisfied with all of the changes, scroll to the end of the conversation and click the \"Merge pull request\" button.\r\n* Enter a commit message\r\n* Decide whether to [preserve all of the commits in the pull request, or squash them into a single commit.](https://help.github.com/articles/about-pull-request-merge-squashing/)\r\n* Click the green button again to confirm your selection.\r\n\r\n**Publishing a new release**\r\n\r\n* `git hf release start <tag name>` (Note that the `<tag name>` should be your version string, i.e. '1.2.3')\r\n* Complete pre-release tests and bug fixes on the relese candidate branch\r\n* `git hf release finish <tag name>`\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}